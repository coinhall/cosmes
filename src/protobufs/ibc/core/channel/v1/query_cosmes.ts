// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file ibc/core/channel/v1/query.proto (package ibc.core.channel.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryChannelClientStateRequest, QueryChannelClientStateResponse, QueryChannelConsensusStateRequest, QueryChannelConsensusStateResponse, QueryChannelRequest, QueryChannelResponse, QueryChannelsRequest, QueryChannelsResponse, QueryConnectionChannelsRequest, QueryConnectionChannelsResponse, QueryNextSequenceReceiveRequest, QueryNextSequenceReceiveResponse, QueryNextSequenceSendRequest, QueryNextSequenceSendResponse, QueryPacketAcknowledgementRequest, QueryPacketAcknowledgementResponse, QueryPacketAcknowledgementsRequest, QueryPacketAcknowledgementsResponse, QueryPacketCommitmentRequest, QueryPacketCommitmentResponse, QueryPacketCommitmentsRequest, QueryPacketCommitmentsResponse, QueryPacketReceiptRequest, QueryPacketReceiptResponse, QueryUnreceivedAcksRequest, QueryUnreceivedAcksResponse, QueryUnreceivedPacketsRequest, QueryUnreceivedPacketsResponse } from "./query_pb.js";

const TYPE_NAME = "ibc.core.channel.v1.Query";

/**
 * Channel queries an IBC Channel.
 *
 * @generated from rpc ibc.core.channel.v1.Query.Channel
 */
export const QueryChannelService = {
  typeName: TYPE_NAME,
  method: "Channel",
  Request: QueryChannelRequest,
  Response: QueryChannelResponse,
} as const;

/**
 * Channels queries all the IBC channels of a chain.
 *
 * @generated from rpc ibc.core.channel.v1.Query.Channels
 */
export const QueryChannelsService = {
  typeName: TYPE_NAME,
  method: "Channels",
  Request: QueryChannelsRequest,
  Response: QueryChannelsResponse,
} as const;

/**
 * ConnectionChannels queries all the channels associated with a connection
 * end.
 *
 * @generated from rpc ibc.core.channel.v1.Query.ConnectionChannels
 */
export const QueryConnectionChannelsService = {
  typeName: TYPE_NAME,
  method: "ConnectionChannels",
  Request: QueryConnectionChannelsRequest,
  Response: QueryConnectionChannelsResponse,
} as const;

/**
 * ChannelClientState queries for the client state for the channel associated
 * with the provided channel identifiers.
 *
 * @generated from rpc ibc.core.channel.v1.Query.ChannelClientState
 */
export const QueryChannelClientStateService = {
  typeName: TYPE_NAME,
  method: "ChannelClientState",
  Request: QueryChannelClientStateRequest,
  Response: QueryChannelClientStateResponse,
} as const;

/**
 * ChannelConsensusState queries for the consensus state for the channel
 * associated with the provided channel identifiers.
 *
 * @generated from rpc ibc.core.channel.v1.Query.ChannelConsensusState
 */
export const QueryChannelConsensusStateService = {
  typeName: TYPE_NAME,
  method: "ChannelConsensusState",
  Request: QueryChannelConsensusStateRequest,
  Response: QueryChannelConsensusStateResponse,
} as const;

/**
 * PacketCommitment queries a stored packet commitment hash.
 *
 * @generated from rpc ibc.core.channel.v1.Query.PacketCommitment
 */
export const QueryPacketCommitmentService = {
  typeName: TYPE_NAME,
  method: "PacketCommitment",
  Request: QueryPacketCommitmentRequest,
  Response: QueryPacketCommitmentResponse,
} as const;

/**
 * PacketCommitments returns all the packet commitments hashes associated
 * with a channel.
 *
 * @generated from rpc ibc.core.channel.v1.Query.PacketCommitments
 */
export const QueryPacketCommitmentsService = {
  typeName: TYPE_NAME,
  method: "PacketCommitments",
  Request: QueryPacketCommitmentsRequest,
  Response: QueryPacketCommitmentsResponse,
} as const;

/**
 * PacketReceipt queries if a given packet sequence has been received on the
 * queried chain
 *
 * @generated from rpc ibc.core.channel.v1.Query.PacketReceipt
 */
export const QueryPacketReceiptService = {
  typeName: TYPE_NAME,
  method: "PacketReceipt",
  Request: QueryPacketReceiptRequest,
  Response: QueryPacketReceiptResponse,
} as const;

/**
 * PacketAcknowledgement queries a stored packet acknowledgement hash.
 *
 * @generated from rpc ibc.core.channel.v1.Query.PacketAcknowledgement
 */
export const QueryPacketAcknowledgementService = {
  typeName: TYPE_NAME,
  method: "PacketAcknowledgement",
  Request: QueryPacketAcknowledgementRequest,
  Response: QueryPacketAcknowledgementResponse,
} as const;

/**
 * PacketAcknowledgements returns all the packet acknowledgements associated
 * with a channel.
 *
 * @generated from rpc ibc.core.channel.v1.Query.PacketAcknowledgements
 */
export const QueryPacketAcknowledgementsService = {
  typeName: TYPE_NAME,
  method: "PacketAcknowledgements",
  Request: QueryPacketAcknowledgementsRequest,
  Response: QueryPacketAcknowledgementsResponse,
} as const;

/**
 * UnreceivedPackets returns all the unreceived IBC packets associated with a
 * channel and sequences.
 *
 * @generated from rpc ibc.core.channel.v1.Query.UnreceivedPackets
 */
export const QueryUnreceivedPacketsService = {
  typeName: TYPE_NAME,
  method: "UnreceivedPackets",
  Request: QueryUnreceivedPacketsRequest,
  Response: QueryUnreceivedPacketsResponse,
} as const;

/**
 * UnreceivedAcks returns all the unreceived IBC acknowledgements associated
 * with a channel and sequences.
 *
 * @generated from rpc ibc.core.channel.v1.Query.UnreceivedAcks
 */
export const QueryUnreceivedAcksService = {
  typeName: TYPE_NAME,
  method: "UnreceivedAcks",
  Request: QueryUnreceivedAcksRequest,
  Response: QueryUnreceivedAcksResponse,
} as const;

/**
 * NextSequenceReceive returns the next receive sequence for a given channel.
 *
 * @generated from rpc ibc.core.channel.v1.Query.NextSequenceReceive
 */
export const QueryNextSequenceReceiveService = {
  typeName: TYPE_NAME,
  method: "NextSequenceReceive",
  Request: QueryNextSequenceReceiveRequest,
  Response: QueryNextSequenceReceiveResponse,
} as const;

/**
 * NextSequenceSend returns the next send sequence for a given channel.
 *
 * @generated from rpc ibc.core.channel.v1.Query.NextSequenceSend
 */
export const QueryNextSequenceSendService = {
  typeName: TYPE_NAME,
  method: "NextSequenceSend",
  Request: QueryNextSequenceSendRequest,
  Response: QueryNextSequenceSendResponse,
} as const;


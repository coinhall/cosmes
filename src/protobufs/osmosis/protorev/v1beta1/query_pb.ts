// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/protorev/v1beta1/query.proto (package osmosis.protorev.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { BaseDenom, InfoByPoolType, RouteStatistics, TokenPairArbRoutes } from "./protorev_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: osmosis.protorev.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryGetProtoRevNumberOfTradesRequest is request type for the
 * Query/GetProtoRevNumberOfTrades RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesRequest
 */
export class QueryGetProtoRevNumberOfTradesRequest extends Message<QueryGetProtoRevNumberOfTradesRequest> {
  constructor(data?: PartialMessage<QueryGetProtoRevNumberOfTradesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevNumberOfTradesRequest {
    return new QueryGetProtoRevNumberOfTradesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevNumberOfTradesRequest {
    return new QueryGetProtoRevNumberOfTradesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevNumberOfTradesRequest {
    return new QueryGetProtoRevNumberOfTradesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevNumberOfTradesRequest | PlainMessage<QueryGetProtoRevNumberOfTradesRequest> | undefined, b: QueryGetProtoRevNumberOfTradesRequest | PlainMessage<QueryGetProtoRevNumberOfTradesRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevNumberOfTradesRequest, a, b);
  }
}

/**
 * QueryGetProtoRevNumberOfTradesResponse is response type for the
 * Query/GetProtoRevNumberOfTrades RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesResponse
 */
export class QueryGetProtoRevNumberOfTradesResponse extends Message<QueryGetProtoRevNumberOfTradesResponse> {
  /**
   * number_of_trades is the number of trades the module has executed
   *
   * @generated from field: string number_of_trades = 1;
   */
  numberOfTrades = "";

  constructor(data?: PartialMessage<QueryGetProtoRevNumberOfTradesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number_of_trades", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevNumberOfTradesResponse {
    return new QueryGetProtoRevNumberOfTradesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevNumberOfTradesResponse {
    return new QueryGetProtoRevNumberOfTradesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevNumberOfTradesResponse {
    return new QueryGetProtoRevNumberOfTradesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevNumberOfTradesResponse | PlainMessage<QueryGetProtoRevNumberOfTradesResponse> | undefined, b: QueryGetProtoRevNumberOfTradesResponse | PlainMessage<QueryGetProtoRevNumberOfTradesResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevNumberOfTradesResponse, a, b);
  }
}

/**
 * QueryGetProtoRevProfitsByDenomRequest is request type for the
 * Query/GetProtoRevProfitsByDenom RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomRequest
 */
export class QueryGetProtoRevProfitsByDenomRequest extends Message<QueryGetProtoRevProfitsByDenomRequest> {
  /**
   * denom is the denom to query profits by
   *
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryGetProtoRevProfitsByDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevProfitsByDenomRequest {
    return new QueryGetProtoRevProfitsByDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevProfitsByDenomRequest {
    return new QueryGetProtoRevProfitsByDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevProfitsByDenomRequest {
    return new QueryGetProtoRevProfitsByDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevProfitsByDenomRequest | PlainMessage<QueryGetProtoRevProfitsByDenomRequest> | undefined, b: QueryGetProtoRevProfitsByDenomRequest | PlainMessage<QueryGetProtoRevProfitsByDenomRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevProfitsByDenomRequest, a, b);
  }
}

/**
 * QueryGetProtoRevProfitsByDenomResponse is response type for the
 * Query/GetProtoRevProfitsByDenom RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomResponse
 */
export class QueryGetProtoRevProfitsByDenomResponse extends Message<QueryGetProtoRevProfitsByDenomResponse> {
  /**
   * profit is the profits of the module by the selected denom
   *
   * @generated from field: cosmos.base.v1beta1.Coin profit = 1;
   */
  profit?: Coin;

  constructor(data?: PartialMessage<QueryGetProtoRevProfitsByDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profit", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevProfitsByDenomResponse {
    return new QueryGetProtoRevProfitsByDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevProfitsByDenomResponse {
    return new QueryGetProtoRevProfitsByDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevProfitsByDenomResponse {
    return new QueryGetProtoRevProfitsByDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevProfitsByDenomResponse | PlainMessage<QueryGetProtoRevProfitsByDenomResponse> | undefined, b: QueryGetProtoRevProfitsByDenomResponse | PlainMessage<QueryGetProtoRevProfitsByDenomResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevProfitsByDenomResponse, a, b);
  }
}

/**
 * QueryGetProtoRevAllProfitsRequest is request type for the
 * Query/GetProtoRevAllProfits RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsRequest
 */
export class QueryGetProtoRevAllProfitsRequest extends Message<QueryGetProtoRevAllProfitsRequest> {
  constructor(data?: PartialMessage<QueryGetProtoRevAllProfitsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevAllProfitsRequest {
    return new QueryGetProtoRevAllProfitsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevAllProfitsRequest {
    return new QueryGetProtoRevAllProfitsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevAllProfitsRequest {
    return new QueryGetProtoRevAllProfitsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevAllProfitsRequest | PlainMessage<QueryGetProtoRevAllProfitsRequest> | undefined, b: QueryGetProtoRevAllProfitsRequest | PlainMessage<QueryGetProtoRevAllProfitsRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevAllProfitsRequest, a, b);
  }
}

/**
 * QueryGetProtoRevAllProfitsResponse is response type for the
 * Query/GetProtoRevAllProfits RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsResponse
 */
export class QueryGetProtoRevAllProfitsResponse extends Message<QueryGetProtoRevAllProfitsResponse> {
  /**
   * profits is a list of all of the profits from the module
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin profits = 1;
   */
  profits: Coin[] = [];

  constructor(data?: PartialMessage<QueryGetProtoRevAllProfitsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profits", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevAllProfitsResponse {
    return new QueryGetProtoRevAllProfitsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevAllProfitsResponse {
    return new QueryGetProtoRevAllProfitsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevAllProfitsResponse {
    return new QueryGetProtoRevAllProfitsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevAllProfitsResponse | PlainMessage<QueryGetProtoRevAllProfitsResponse> | undefined, b: QueryGetProtoRevAllProfitsResponse | PlainMessage<QueryGetProtoRevAllProfitsResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevAllProfitsResponse, a, b);
  }
}

/**
 * QueryGetProtoRevStatisticsByPoolRequest is request type for the
 * Query/GetProtoRevStatisticsByRoute RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteRequest
 */
export class QueryGetProtoRevStatisticsByRouteRequest extends Message<QueryGetProtoRevStatisticsByRouteRequest> {
  /**
   * route is the set of pool ids to query statistics by i.e. 1,2,3
   *
   * @generated from field: repeated uint64 route = 1;
   */
  route: bigint[] = [];

  constructor(data?: PartialMessage<QueryGetProtoRevStatisticsByRouteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "route", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevStatisticsByRouteRequest {
    return new QueryGetProtoRevStatisticsByRouteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevStatisticsByRouteRequest {
    return new QueryGetProtoRevStatisticsByRouteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevStatisticsByRouteRequest {
    return new QueryGetProtoRevStatisticsByRouteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevStatisticsByRouteRequest | PlainMessage<QueryGetProtoRevStatisticsByRouteRequest> | undefined, b: QueryGetProtoRevStatisticsByRouteRequest | PlainMessage<QueryGetProtoRevStatisticsByRouteRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevStatisticsByRouteRequest, a, b);
  }
}

/**
 * QueryGetProtoRevStatisticsByRouteResponse is response type for the
 * Query/GetProtoRevStatisticsByRoute RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteResponse
 */
export class QueryGetProtoRevStatisticsByRouteResponse extends Message<QueryGetProtoRevStatisticsByRouteResponse> {
  /**
   * statistics contains the number of trades the module has executed after a
   * swap on a given pool and the profits from the trades
   *
   * @generated from field: osmosis.protorev.v1beta1.RouteStatistics statistics = 1;
   */
  statistics?: RouteStatistics;

  constructor(data?: PartialMessage<QueryGetProtoRevStatisticsByRouteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "statistics", kind: "message", T: RouteStatistics },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevStatisticsByRouteResponse {
    return new QueryGetProtoRevStatisticsByRouteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevStatisticsByRouteResponse {
    return new QueryGetProtoRevStatisticsByRouteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevStatisticsByRouteResponse {
    return new QueryGetProtoRevStatisticsByRouteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevStatisticsByRouteResponse | PlainMessage<QueryGetProtoRevStatisticsByRouteResponse> | undefined, b: QueryGetProtoRevStatisticsByRouteResponse | PlainMessage<QueryGetProtoRevStatisticsByRouteResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevStatisticsByRouteResponse, a, b);
  }
}

/**
 * QueryGetProtoRevAllRouteStatisticsRequest is request type for the
 * Query/GetProtoRevAllRouteStatistics RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsRequest
 */
export class QueryGetProtoRevAllRouteStatisticsRequest extends Message<QueryGetProtoRevAllRouteStatisticsRequest> {
  constructor(data?: PartialMessage<QueryGetProtoRevAllRouteStatisticsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevAllRouteStatisticsRequest {
    return new QueryGetProtoRevAllRouteStatisticsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevAllRouteStatisticsRequest {
    return new QueryGetProtoRevAllRouteStatisticsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevAllRouteStatisticsRequest {
    return new QueryGetProtoRevAllRouteStatisticsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevAllRouteStatisticsRequest | PlainMessage<QueryGetProtoRevAllRouteStatisticsRequest> | undefined, b: QueryGetProtoRevAllRouteStatisticsRequest | PlainMessage<QueryGetProtoRevAllRouteStatisticsRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevAllRouteStatisticsRequest, a, b);
  }
}

/**
 * QueryGetProtoRevAllRouteStatisticsResponse is response type for the
 * Query/GetProtoRevAllRouteStatistics RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsResponse
 */
export class QueryGetProtoRevAllRouteStatisticsResponse extends Message<QueryGetProtoRevAllRouteStatisticsResponse> {
  /**
   * statistics contains the number of trades/profits the module has executed on
   * all routes it has successfully executed a trade on
   *
   * @generated from field: repeated osmosis.protorev.v1beta1.RouteStatistics statistics = 1;
   */
  statistics: RouteStatistics[] = [];

  constructor(data?: PartialMessage<QueryGetProtoRevAllRouteStatisticsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "statistics", kind: "message", T: RouteStatistics, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevAllRouteStatisticsResponse {
    return new QueryGetProtoRevAllRouteStatisticsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevAllRouteStatisticsResponse {
    return new QueryGetProtoRevAllRouteStatisticsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevAllRouteStatisticsResponse {
    return new QueryGetProtoRevAllRouteStatisticsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevAllRouteStatisticsResponse | PlainMessage<QueryGetProtoRevAllRouteStatisticsResponse> | undefined, b: QueryGetProtoRevAllRouteStatisticsResponse | PlainMessage<QueryGetProtoRevAllRouteStatisticsResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevAllRouteStatisticsResponse, a, b);
  }
}

/**
 * QueryGetProtoRevTokenPairArbRoutesRequest is request type for the
 * Query/GetProtoRevTokenPairArbRoutes RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesRequest
 */
export class QueryGetProtoRevTokenPairArbRoutesRequest extends Message<QueryGetProtoRevTokenPairArbRoutesRequest> {
  constructor(data?: PartialMessage<QueryGetProtoRevTokenPairArbRoutesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevTokenPairArbRoutesRequest {
    return new QueryGetProtoRevTokenPairArbRoutesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevTokenPairArbRoutesRequest {
    return new QueryGetProtoRevTokenPairArbRoutesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevTokenPairArbRoutesRequest {
    return new QueryGetProtoRevTokenPairArbRoutesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevTokenPairArbRoutesRequest | PlainMessage<QueryGetProtoRevTokenPairArbRoutesRequest> | undefined, b: QueryGetProtoRevTokenPairArbRoutesRequest | PlainMessage<QueryGetProtoRevTokenPairArbRoutesRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevTokenPairArbRoutesRequest, a, b);
  }
}

/**
 * QueryGetProtoRevTokenPairArbRoutesResponse is response type for the
 * Query/GetProtoRevTokenPairArbRoutes RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesResponse
 */
export class QueryGetProtoRevTokenPairArbRoutesResponse extends Message<QueryGetProtoRevTokenPairArbRoutesResponse> {
  /**
   * routes is a list of all of the hot routes that the module is currently
   * arbitraging
   *
   * @generated from field: repeated osmosis.protorev.v1beta1.TokenPairArbRoutes routes = 1;
   */
  routes: TokenPairArbRoutes[] = [];

  constructor(data?: PartialMessage<QueryGetProtoRevTokenPairArbRoutesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "routes", kind: "message", T: TokenPairArbRoutes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevTokenPairArbRoutesResponse {
    return new QueryGetProtoRevTokenPairArbRoutesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevTokenPairArbRoutesResponse {
    return new QueryGetProtoRevTokenPairArbRoutesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevTokenPairArbRoutesResponse {
    return new QueryGetProtoRevTokenPairArbRoutesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevTokenPairArbRoutesResponse | PlainMessage<QueryGetProtoRevTokenPairArbRoutesResponse> | undefined, b: QueryGetProtoRevTokenPairArbRoutesResponse | PlainMessage<QueryGetProtoRevTokenPairArbRoutesResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevTokenPairArbRoutesResponse, a, b);
  }
}

/**
 * QueryGetProtoRevAdminAccountRequest is request type for the
 * Query/GetProtoRevAdminAccount RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountRequest
 */
export class QueryGetProtoRevAdminAccountRequest extends Message<QueryGetProtoRevAdminAccountRequest> {
  constructor(data?: PartialMessage<QueryGetProtoRevAdminAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevAdminAccountRequest {
    return new QueryGetProtoRevAdminAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevAdminAccountRequest {
    return new QueryGetProtoRevAdminAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevAdminAccountRequest {
    return new QueryGetProtoRevAdminAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevAdminAccountRequest | PlainMessage<QueryGetProtoRevAdminAccountRequest> | undefined, b: QueryGetProtoRevAdminAccountRequest | PlainMessage<QueryGetProtoRevAdminAccountRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevAdminAccountRequest, a, b);
  }
}

/**
 * QueryGetProtoRevAdminAccountResponse is response type for the
 * Query/GetProtoRevAdminAccount RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountResponse
 */
export class QueryGetProtoRevAdminAccountResponse extends Message<QueryGetProtoRevAdminAccountResponse> {
  /**
   * admin_account is the admin account of the module
   *
   * @generated from field: string admin_account = 1;
   */
  adminAccount = "";

  constructor(data?: PartialMessage<QueryGetProtoRevAdminAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevAdminAccountResponse {
    return new QueryGetProtoRevAdminAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevAdminAccountResponse {
    return new QueryGetProtoRevAdminAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevAdminAccountResponse {
    return new QueryGetProtoRevAdminAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevAdminAccountResponse | PlainMessage<QueryGetProtoRevAdminAccountResponse> | undefined, b: QueryGetProtoRevAdminAccountResponse | PlainMessage<QueryGetProtoRevAdminAccountResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevAdminAccountResponse, a, b);
  }
}

/**
 * QueryGetProtoRevDeveloperAccountRequest is request type for the
 * Query/GetProtoRevDeveloperAccount RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountRequest
 */
export class QueryGetProtoRevDeveloperAccountRequest extends Message<QueryGetProtoRevDeveloperAccountRequest> {
  constructor(data?: PartialMessage<QueryGetProtoRevDeveloperAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevDeveloperAccountRequest {
    return new QueryGetProtoRevDeveloperAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevDeveloperAccountRequest {
    return new QueryGetProtoRevDeveloperAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevDeveloperAccountRequest {
    return new QueryGetProtoRevDeveloperAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevDeveloperAccountRequest | PlainMessage<QueryGetProtoRevDeveloperAccountRequest> | undefined, b: QueryGetProtoRevDeveloperAccountRequest | PlainMessage<QueryGetProtoRevDeveloperAccountRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevDeveloperAccountRequest, a, b);
  }
}

/**
 * QueryGetProtoRevDeveloperAccountResponse is response type for the
 * Query/GetProtoRevDeveloperAccount RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountResponse
 */
export class QueryGetProtoRevDeveloperAccountResponse extends Message<QueryGetProtoRevDeveloperAccountResponse> {
  /**
   * developer_account is the developer account of the module
   *
   * @generated from field: string developer_account = 1;
   */
  developerAccount = "";

  constructor(data?: PartialMessage<QueryGetProtoRevDeveloperAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "developer_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevDeveloperAccountResponse {
    return new QueryGetProtoRevDeveloperAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevDeveloperAccountResponse {
    return new QueryGetProtoRevDeveloperAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevDeveloperAccountResponse {
    return new QueryGetProtoRevDeveloperAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevDeveloperAccountResponse | PlainMessage<QueryGetProtoRevDeveloperAccountResponse> | undefined, b: QueryGetProtoRevDeveloperAccountResponse | PlainMessage<QueryGetProtoRevDeveloperAccountResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevDeveloperAccountResponse, a, b);
  }
}

/**
 * QueryGetProtoRevInfoByPoolTypeRequest is request type for the
 * Query/GetProtoRevInfoByPoolType RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeRequest
 */
export class QueryGetProtoRevInfoByPoolTypeRequest extends Message<QueryGetProtoRevInfoByPoolTypeRequest> {
  constructor(data?: PartialMessage<QueryGetProtoRevInfoByPoolTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevInfoByPoolTypeRequest {
    return new QueryGetProtoRevInfoByPoolTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevInfoByPoolTypeRequest {
    return new QueryGetProtoRevInfoByPoolTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevInfoByPoolTypeRequest {
    return new QueryGetProtoRevInfoByPoolTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevInfoByPoolTypeRequest | PlainMessage<QueryGetProtoRevInfoByPoolTypeRequest> | undefined, b: QueryGetProtoRevInfoByPoolTypeRequest | PlainMessage<QueryGetProtoRevInfoByPoolTypeRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevInfoByPoolTypeRequest, a, b);
  }
}

/**
 * QueryGetProtoRevInfoByPoolTypeResponse is response type for the
 * Query/GetProtoRevInfoByPoolType RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeResponse
 */
export class QueryGetProtoRevInfoByPoolTypeResponse extends Message<QueryGetProtoRevInfoByPoolTypeResponse> {
  /**
   * InfoByPoolType contains all information pertaining to how different
   * pool types are handled by the module.
   *
   * @generated from field: osmosis.protorev.v1beta1.InfoByPoolType info_by_pool_type = 1;
   */
  infoByPoolType?: InfoByPoolType;

  constructor(data?: PartialMessage<QueryGetProtoRevInfoByPoolTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info_by_pool_type", kind: "message", T: InfoByPoolType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevInfoByPoolTypeResponse {
    return new QueryGetProtoRevInfoByPoolTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevInfoByPoolTypeResponse {
    return new QueryGetProtoRevInfoByPoolTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevInfoByPoolTypeResponse {
    return new QueryGetProtoRevInfoByPoolTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevInfoByPoolTypeResponse | PlainMessage<QueryGetProtoRevInfoByPoolTypeResponse> | undefined, b: QueryGetProtoRevInfoByPoolTypeResponse | PlainMessage<QueryGetProtoRevInfoByPoolTypeResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevInfoByPoolTypeResponse, a, b);
  }
}

/**
 * QueryGetProtoRevMaxPoolPointsPerBlockRequest is request type for the
 * Query/GetProtoRevMaxPoolPointsPerBlock RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockRequest
 */
export class QueryGetProtoRevMaxPoolPointsPerBlockRequest extends Message<QueryGetProtoRevMaxPoolPointsPerBlockRequest> {
  constructor(data?: PartialMessage<QueryGetProtoRevMaxPoolPointsPerBlockRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevMaxPoolPointsPerBlockRequest {
    return new QueryGetProtoRevMaxPoolPointsPerBlockRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevMaxPoolPointsPerBlockRequest {
    return new QueryGetProtoRevMaxPoolPointsPerBlockRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevMaxPoolPointsPerBlockRequest {
    return new QueryGetProtoRevMaxPoolPointsPerBlockRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevMaxPoolPointsPerBlockRequest | PlainMessage<QueryGetProtoRevMaxPoolPointsPerBlockRequest> | undefined, b: QueryGetProtoRevMaxPoolPointsPerBlockRequest | PlainMessage<QueryGetProtoRevMaxPoolPointsPerBlockRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevMaxPoolPointsPerBlockRequest, a, b);
  }
}

/**
 * QueryGetProtoRevMaxPoolPointsPerBlockResponse is response type for the
 * Query/GetProtoRevMaxPoolPointsPerBlock RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockResponse
 */
export class QueryGetProtoRevMaxPoolPointsPerBlockResponse extends Message<QueryGetProtoRevMaxPoolPointsPerBlockResponse> {
  /**
   * max_pool_points_per_block is the maximum number of pool points that can be
   * consumed per block
   *
   * @generated from field: uint64 max_pool_points_per_block = 1;
   */
  maxPoolPointsPerBlock = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGetProtoRevMaxPoolPointsPerBlockResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_pool_points_per_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevMaxPoolPointsPerBlockResponse {
    return new QueryGetProtoRevMaxPoolPointsPerBlockResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevMaxPoolPointsPerBlockResponse {
    return new QueryGetProtoRevMaxPoolPointsPerBlockResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevMaxPoolPointsPerBlockResponse {
    return new QueryGetProtoRevMaxPoolPointsPerBlockResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevMaxPoolPointsPerBlockResponse | PlainMessage<QueryGetProtoRevMaxPoolPointsPerBlockResponse> | undefined, b: QueryGetProtoRevMaxPoolPointsPerBlockResponse | PlainMessage<QueryGetProtoRevMaxPoolPointsPerBlockResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevMaxPoolPointsPerBlockResponse, a, b);
  }
}

/**
 * QueryGetProtoRevMaxPoolPointsPerTxRequest is request type for the
 * Query/GetProtoRevMaxPoolPointsPerTx RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxRequest
 */
export class QueryGetProtoRevMaxPoolPointsPerTxRequest extends Message<QueryGetProtoRevMaxPoolPointsPerTxRequest> {
  constructor(data?: PartialMessage<QueryGetProtoRevMaxPoolPointsPerTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevMaxPoolPointsPerTxRequest {
    return new QueryGetProtoRevMaxPoolPointsPerTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevMaxPoolPointsPerTxRequest {
    return new QueryGetProtoRevMaxPoolPointsPerTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevMaxPoolPointsPerTxRequest {
    return new QueryGetProtoRevMaxPoolPointsPerTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevMaxPoolPointsPerTxRequest | PlainMessage<QueryGetProtoRevMaxPoolPointsPerTxRequest> | undefined, b: QueryGetProtoRevMaxPoolPointsPerTxRequest | PlainMessage<QueryGetProtoRevMaxPoolPointsPerTxRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevMaxPoolPointsPerTxRequest, a, b);
  }
}

/**
 * QueryGetProtoRevMaxPoolPointsPerTxResponse is response type for the
 * Query/GetProtoRevMaxPoolPointsPerTx RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxResponse
 */
export class QueryGetProtoRevMaxPoolPointsPerTxResponse extends Message<QueryGetProtoRevMaxPoolPointsPerTxResponse> {
  /**
   * max_pool_points_per_tx is the maximum number of pool points that can be
   * consumed per transaction
   *
   * @generated from field: uint64 max_pool_points_per_tx = 1;
   */
  maxPoolPointsPerTx = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGetProtoRevMaxPoolPointsPerTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_pool_points_per_tx", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevMaxPoolPointsPerTxResponse {
    return new QueryGetProtoRevMaxPoolPointsPerTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevMaxPoolPointsPerTxResponse {
    return new QueryGetProtoRevMaxPoolPointsPerTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevMaxPoolPointsPerTxResponse {
    return new QueryGetProtoRevMaxPoolPointsPerTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevMaxPoolPointsPerTxResponse | PlainMessage<QueryGetProtoRevMaxPoolPointsPerTxResponse> | undefined, b: QueryGetProtoRevMaxPoolPointsPerTxResponse | PlainMessage<QueryGetProtoRevMaxPoolPointsPerTxResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevMaxPoolPointsPerTxResponse, a, b);
  }
}

/**
 * QueryGetProtoRevBaseDenomsRequest is request type for the
 * Query/GetProtoRevBaseDenoms RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsRequest
 */
export class QueryGetProtoRevBaseDenomsRequest extends Message<QueryGetProtoRevBaseDenomsRequest> {
  constructor(data?: PartialMessage<QueryGetProtoRevBaseDenomsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevBaseDenomsRequest {
    return new QueryGetProtoRevBaseDenomsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevBaseDenomsRequest {
    return new QueryGetProtoRevBaseDenomsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevBaseDenomsRequest {
    return new QueryGetProtoRevBaseDenomsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevBaseDenomsRequest | PlainMessage<QueryGetProtoRevBaseDenomsRequest> | undefined, b: QueryGetProtoRevBaseDenomsRequest | PlainMessage<QueryGetProtoRevBaseDenomsRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevBaseDenomsRequest, a, b);
  }
}

/**
 * QueryGetProtoRevBaseDenomsResponse is response type for the
 * Query/GetProtoRevBaseDenoms RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsResponse
 */
export class QueryGetProtoRevBaseDenomsResponse extends Message<QueryGetProtoRevBaseDenomsResponse> {
  /**
   * base_denoms is a list of all of the base denoms and step sizes
   *
   * @generated from field: repeated osmosis.protorev.v1beta1.BaseDenom base_denoms = 1;
   */
  baseDenoms: BaseDenom[] = [];

  constructor(data?: PartialMessage<QueryGetProtoRevBaseDenomsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_denoms", kind: "message", T: BaseDenom, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevBaseDenomsResponse {
    return new QueryGetProtoRevBaseDenomsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevBaseDenomsResponse {
    return new QueryGetProtoRevBaseDenomsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevBaseDenomsResponse {
    return new QueryGetProtoRevBaseDenomsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevBaseDenomsResponse | PlainMessage<QueryGetProtoRevBaseDenomsResponse> | undefined, b: QueryGetProtoRevBaseDenomsResponse | PlainMessage<QueryGetProtoRevBaseDenomsResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevBaseDenomsResponse, a, b);
  }
}

/**
 * QueryGetProtoRevEnabledRequest is request type for the
 * Query/GetProtoRevEnabled RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevEnabledRequest
 */
export class QueryGetProtoRevEnabledRequest extends Message<QueryGetProtoRevEnabledRequest> {
  constructor(data?: PartialMessage<QueryGetProtoRevEnabledRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevEnabledRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevEnabledRequest {
    return new QueryGetProtoRevEnabledRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevEnabledRequest {
    return new QueryGetProtoRevEnabledRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevEnabledRequest {
    return new QueryGetProtoRevEnabledRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevEnabledRequest | PlainMessage<QueryGetProtoRevEnabledRequest> | undefined, b: QueryGetProtoRevEnabledRequest | PlainMessage<QueryGetProtoRevEnabledRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevEnabledRequest, a, b);
  }
}

/**
 * QueryGetProtoRevEnabledResponse is response type for the
 * Query/GetProtoRevEnabled RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevEnabledResponse
 */
export class QueryGetProtoRevEnabledResponse extends Message<QueryGetProtoRevEnabledResponse> {
  /**
   * enabled is whether the module is enabled
   *
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  constructor(data?: PartialMessage<QueryGetProtoRevEnabledResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevEnabledResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevEnabledResponse {
    return new QueryGetProtoRevEnabledResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevEnabledResponse {
    return new QueryGetProtoRevEnabledResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevEnabledResponse {
    return new QueryGetProtoRevEnabledResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevEnabledResponse | PlainMessage<QueryGetProtoRevEnabledResponse> | undefined, b: QueryGetProtoRevEnabledResponse | PlainMessage<QueryGetProtoRevEnabledResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevEnabledResponse, a, b);
  }
}

/**
 * QueryGetProtoRevPoolRequest is request type for the
 * Query/GetProtoRevPool RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevPoolRequest
 */
export class QueryGetProtoRevPoolRequest extends Message<QueryGetProtoRevPoolRequest> {
  /**
   * base_denom is the base denom set in protorev for the denom pair to pool
   * mapping
   *
   * @generated from field: string base_denom = 1;
   */
  baseDenom = "";

  /**
   * other_denom is the other denom for the denom pair to pool mapping
   *
   * @generated from field: string other_denom = 2;
   */
  otherDenom = "";

  constructor(data?: PartialMessage<QueryGetProtoRevPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "other_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevPoolRequest {
    return new QueryGetProtoRevPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevPoolRequest {
    return new QueryGetProtoRevPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevPoolRequest {
    return new QueryGetProtoRevPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevPoolRequest | PlainMessage<QueryGetProtoRevPoolRequest> | undefined, b: QueryGetProtoRevPoolRequest | PlainMessage<QueryGetProtoRevPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevPoolRequest, a, b);
  }
}

/**
 * QueryGetProtoRevPoolResponse is response type for the
 * Query/GetProtoRevPool RPC method.
 *
 * @generated from message osmosis.protorev.v1beta1.QueryGetProtoRevPoolResponse
 */
export class QueryGetProtoRevPoolResponse extends Message<QueryGetProtoRevPoolResponse> {
  /**
   * pool_id is the pool_id stored for the denom pair
   *
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGetProtoRevPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.QueryGetProtoRevPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtoRevPoolResponse {
    return new QueryGetProtoRevPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtoRevPoolResponse {
    return new QueryGetProtoRevPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtoRevPoolResponse {
    return new QueryGetProtoRevPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtoRevPoolResponse | PlainMessage<QueryGetProtoRevPoolResponse> | undefined, b: QueryGetProtoRevPoolResponse | PlainMessage<QueryGetProtoRevPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtoRevPoolResponse, a, b);
  }
}


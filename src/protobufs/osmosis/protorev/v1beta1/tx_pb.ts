// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/protorev/v1beta1/tx.proto (package osmosis.protorev.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BaseDenom, InfoByPoolType, TokenPairArbRoutes } from "./protorev_pb.js";

/**
 * MsgSetHotRoutes defines the Msg/SetHotRoutes request type.
 *
 * @generated from message osmosis.protorev.v1beta1.MsgSetHotRoutes
 */
export class MsgSetHotRoutes extends Message<MsgSetHotRoutes> {
  /**
   * admin is the account that is authorized to set the hot routes.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * hot_routes is the list of hot routes to set.
   *
   * @generated from field: repeated osmosis.protorev.v1beta1.TokenPairArbRoutes hot_routes = 2;
   */
  hotRoutes: TokenPairArbRoutes[] = [];

  constructor(data?: PartialMessage<MsgSetHotRoutes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.MsgSetHotRoutes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hot_routes", kind: "message", T: TokenPairArbRoutes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetHotRoutes {
    return new MsgSetHotRoutes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetHotRoutes {
    return new MsgSetHotRoutes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetHotRoutes {
    return new MsgSetHotRoutes().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetHotRoutes | PlainMessage<MsgSetHotRoutes> | undefined, b: MsgSetHotRoutes | PlainMessage<MsgSetHotRoutes> | undefined): boolean {
    return proto3.util.equals(MsgSetHotRoutes, a, b);
  }
}

/**
 * MsgSetHotRoutesResponse defines the Msg/SetHotRoutes response type.
 *
 * @generated from message osmosis.protorev.v1beta1.MsgSetHotRoutesResponse
 */
export class MsgSetHotRoutesResponse extends Message<MsgSetHotRoutesResponse> {
  constructor(data?: PartialMessage<MsgSetHotRoutesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.MsgSetHotRoutesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetHotRoutesResponse {
    return new MsgSetHotRoutesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetHotRoutesResponse {
    return new MsgSetHotRoutesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetHotRoutesResponse {
    return new MsgSetHotRoutesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetHotRoutesResponse | PlainMessage<MsgSetHotRoutesResponse> | undefined, b: MsgSetHotRoutesResponse | PlainMessage<MsgSetHotRoutesResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetHotRoutesResponse, a, b);
  }
}

/**
 * MsgSetDeveloperAccount defines the Msg/SetDeveloperAccount request type.
 *
 * @generated from message osmosis.protorev.v1beta1.MsgSetDeveloperAccount
 */
export class MsgSetDeveloperAccount extends Message<MsgSetDeveloperAccount> {
  /**
   * admin is the account that is authorized to set the developer account.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * developer_account is the account that will receive a portion of the profits
   * from the protorev module.
   *
   * @generated from field: string developer_account = 2;
   */
  developerAccount = "";

  constructor(data?: PartialMessage<MsgSetDeveloperAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.MsgSetDeveloperAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "developer_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetDeveloperAccount {
    return new MsgSetDeveloperAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetDeveloperAccount {
    return new MsgSetDeveloperAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetDeveloperAccount {
    return new MsgSetDeveloperAccount().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetDeveloperAccount | PlainMessage<MsgSetDeveloperAccount> | undefined, b: MsgSetDeveloperAccount | PlainMessage<MsgSetDeveloperAccount> | undefined): boolean {
    return proto3.util.equals(MsgSetDeveloperAccount, a, b);
  }
}

/**
 * MsgSetDeveloperAccountResponse defines the Msg/SetDeveloperAccount response
 * type.
 *
 * @generated from message osmosis.protorev.v1beta1.MsgSetDeveloperAccountResponse
 */
export class MsgSetDeveloperAccountResponse extends Message<MsgSetDeveloperAccountResponse> {
  constructor(data?: PartialMessage<MsgSetDeveloperAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.MsgSetDeveloperAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetDeveloperAccountResponse {
    return new MsgSetDeveloperAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetDeveloperAccountResponse {
    return new MsgSetDeveloperAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetDeveloperAccountResponse {
    return new MsgSetDeveloperAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetDeveloperAccountResponse | PlainMessage<MsgSetDeveloperAccountResponse> | undefined, b: MsgSetDeveloperAccountResponse | PlainMessage<MsgSetDeveloperAccountResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetDeveloperAccountResponse, a, b);
  }
}

/**
 * MsgSetInfoByPoolType defines the Msg/SetInfoByPoolType request type.
 *
 * @generated from message osmosis.protorev.v1beta1.MsgSetInfoByPoolType
 */
export class MsgSetInfoByPoolType extends Message<MsgSetInfoByPoolType> {
  /**
   * admin is the account that is authorized to set the pool weights.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * info_by_pool_type contains information about the pool types.
   *
   * @generated from field: osmosis.protorev.v1beta1.InfoByPoolType info_by_pool_type = 2;
   */
  infoByPoolType?: InfoByPoolType;

  constructor(data?: PartialMessage<MsgSetInfoByPoolType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.MsgSetInfoByPoolType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "info_by_pool_type", kind: "message", T: InfoByPoolType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetInfoByPoolType {
    return new MsgSetInfoByPoolType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetInfoByPoolType {
    return new MsgSetInfoByPoolType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetInfoByPoolType {
    return new MsgSetInfoByPoolType().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetInfoByPoolType | PlainMessage<MsgSetInfoByPoolType> | undefined, b: MsgSetInfoByPoolType | PlainMessage<MsgSetInfoByPoolType> | undefined): boolean {
    return proto3.util.equals(MsgSetInfoByPoolType, a, b);
  }
}

/**
 * MsgSetInfoByPoolTypeResponse defines the Msg/SetInfoByPoolType response type.
 *
 * @generated from message osmosis.protorev.v1beta1.MsgSetInfoByPoolTypeResponse
 */
export class MsgSetInfoByPoolTypeResponse extends Message<MsgSetInfoByPoolTypeResponse> {
  constructor(data?: PartialMessage<MsgSetInfoByPoolTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.MsgSetInfoByPoolTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetInfoByPoolTypeResponse {
    return new MsgSetInfoByPoolTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetInfoByPoolTypeResponse {
    return new MsgSetInfoByPoolTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetInfoByPoolTypeResponse {
    return new MsgSetInfoByPoolTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetInfoByPoolTypeResponse | PlainMessage<MsgSetInfoByPoolTypeResponse> | undefined, b: MsgSetInfoByPoolTypeResponse | PlainMessage<MsgSetInfoByPoolTypeResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetInfoByPoolTypeResponse, a, b);
  }
}

/**
 * MsgSetMaxPoolPointsPerTx defines the Msg/SetMaxPoolPointsPerTx request type.
 *
 * @generated from message osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTx
 */
export class MsgSetMaxPoolPointsPerTx extends Message<MsgSetMaxPoolPointsPerTx> {
  /**
   * admin is the account that is authorized to set the max pool points per tx.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * max_pool_points_per_tx is the maximum number of pool points that can be
   * consumed per transaction.
   *
   * @generated from field: uint64 max_pool_points_per_tx = 2;
   */
  maxPoolPointsPerTx = protoInt64.zero;

  constructor(data?: PartialMessage<MsgSetMaxPoolPointsPerTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "max_pool_points_per_tx", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetMaxPoolPointsPerTx {
    return new MsgSetMaxPoolPointsPerTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetMaxPoolPointsPerTx {
    return new MsgSetMaxPoolPointsPerTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetMaxPoolPointsPerTx {
    return new MsgSetMaxPoolPointsPerTx().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetMaxPoolPointsPerTx | PlainMessage<MsgSetMaxPoolPointsPerTx> | undefined, b: MsgSetMaxPoolPointsPerTx | PlainMessage<MsgSetMaxPoolPointsPerTx> | undefined): boolean {
    return proto3.util.equals(MsgSetMaxPoolPointsPerTx, a, b);
  }
}

/**
 * MsgSetMaxPoolPointsPerTxResponse defines the Msg/SetMaxPoolPointsPerTx
 * response type.
 *
 * @generated from message osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTxResponse
 */
export class MsgSetMaxPoolPointsPerTxResponse extends Message<MsgSetMaxPoolPointsPerTxResponse> {
  constructor(data?: PartialMessage<MsgSetMaxPoolPointsPerTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetMaxPoolPointsPerTxResponse {
    return new MsgSetMaxPoolPointsPerTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetMaxPoolPointsPerTxResponse {
    return new MsgSetMaxPoolPointsPerTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetMaxPoolPointsPerTxResponse {
    return new MsgSetMaxPoolPointsPerTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetMaxPoolPointsPerTxResponse | PlainMessage<MsgSetMaxPoolPointsPerTxResponse> | undefined, b: MsgSetMaxPoolPointsPerTxResponse | PlainMessage<MsgSetMaxPoolPointsPerTxResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetMaxPoolPointsPerTxResponse, a, b);
  }
}

/**
 * MsgSetMaxPoolPointsPerBlock defines the Msg/SetMaxPoolPointsPerBlock request
 * type.
 *
 * @generated from message osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlock
 */
export class MsgSetMaxPoolPointsPerBlock extends Message<MsgSetMaxPoolPointsPerBlock> {
  /**
   * admin is the account that is authorized to set the max pool points per
   * block.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * max_pool_points_per_block is the maximum number of pool points that can be
   * consumed per block.
   *
   * @generated from field: uint64 max_pool_points_per_block = 2;
   */
  maxPoolPointsPerBlock = protoInt64.zero;

  constructor(data?: PartialMessage<MsgSetMaxPoolPointsPerBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "max_pool_points_per_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetMaxPoolPointsPerBlock {
    return new MsgSetMaxPoolPointsPerBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetMaxPoolPointsPerBlock {
    return new MsgSetMaxPoolPointsPerBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetMaxPoolPointsPerBlock {
    return new MsgSetMaxPoolPointsPerBlock().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetMaxPoolPointsPerBlock | PlainMessage<MsgSetMaxPoolPointsPerBlock> | undefined, b: MsgSetMaxPoolPointsPerBlock | PlainMessage<MsgSetMaxPoolPointsPerBlock> | undefined): boolean {
    return proto3.util.equals(MsgSetMaxPoolPointsPerBlock, a, b);
  }
}

/**
 * MsgSetMaxPoolPointsPerBlockResponse defines the
 * Msg/SetMaxPoolPointsPerBlock response type.
 *
 * @generated from message osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlockResponse
 */
export class MsgSetMaxPoolPointsPerBlockResponse extends Message<MsgSetMaxPoolPointsPerBlockResponse> {
  constructor(data?: PartialMessage<MsgSetMaxPoolPointsPerBlockResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlockResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetMaxPoolPointsPerBlockResponse {
    return new MsgSetMaxPoolPointsPerBlockResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetMaxPoolPointsPerBlockResponse {
    return new MsgSetMaxPoolPointsPerBlockResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetMaxPoolPointsPerBlockResponse {
    return new MsgSetMaxPoolPointsPerBlockResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetMaxPoolPointsPerBlockResponse | PlainMessage<MsgSetMaxPoolPointsPerBlockResponse> | undefined, b: MsgSetMaxPoolPointsPerBlockResponse | PlainMessage<MsgSetMaxPoolPointsPerBlockResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetMaxPoolPointsPerBlockResponse, a, b);
  }
}

/**
 * MsgSetBaseDenoms defines the Msg/SetBaseDenoms request type.
 *
 * @generated from message osmosis.protorev.v1beta1.MsgSetBaseDenoms
 */
export class MsgSetBaseDenoms extends Message<MsgSetBaseDenoms> {
  /**
   * admin is the account that is authorized to set the base denoms.
   *
   * @generated from field: string admin = 1;
   */
  admin = "";

  /**
   * base_denoms is the list of base denoms to set.
   *
   * @generated from field: repeated osmosis.protorev.v1beta1.BaseDenom base_denoms = 2;
   */
  baseDenoms: BaseDenom[] = [];

  constructor(data?: PartialMessage<MsgSetBaseDenoms>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.MsgSetBaseDenoms";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "base_denoms", kind: "message", T: BaseDenom, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetBaseDenoms {
    return new MsgSetBaseDenoms().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetBaseDenoms {
    return new MsgSetBaseDenoms().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetBaseDenoms {
    return new MsgSetBaseDenoms().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetBaseDenoms | PlainMessage<MsgSetBaseDenoms> | undefined, b: MsgSetBaseDenoms | PlainMessage<MsgSetBaseDenoms> | undefined): boolean {
    return proto3.util.equals(MsgSetBaseDenoms, a, b);
  }
}

/**
 * MsgSetBaseDenomsResponse defines the Msg/SetBaseDenoms response type.
 *
 * @generated from message osmosis.protorev.v1beta1.MsgSetBaseDenomsResponse
 */
export class MsgSetBaseDenomsResponse extends Message<MsgSetBaseDenomsResponse> {
  constructor(data?: PartialMessage<MsgSetBaseDenomsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.protorev.v1beta1.MsgSetBaseDenomsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetBaseDenomsResponse {
    return new MsgSetBaseDenomsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetBaseDenomsResponse {
    return new MsgSetBaseDenomsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetBaseDenomsResponse {
    return new MsgSetBaseDenomsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetBaseDenomsResponse | PlainMessage<MsgSetBaseDenomsResponse> | undefined, b: MsgSetBaseDenomsResponse | PlainMessage<MsgSetBaseDenomsResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetBaseDenomsResponse, a, b);
  }
}


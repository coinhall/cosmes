// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/smartaccount/v1beta1/models.proto (package osmosis.smartaccount.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * AccountAuthenticator represents a foundational model for all authenticators.
 * It provides extensibility by allowing concrete types to interpret and
 * validate transactions based on the encapsulated data.
 *
 * @generated from message osmosis.smartaccount.v1beta1.AccountAuthenticator
 */
export class AccountAuthenticator extends Message<AccountAuthenticator> {
  /**
   * ID uniquely identifies the authenticator instance.
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * Type specifies the category of the AccountAuthenticator.
   * This type information is essential for differentiating authenticators
   * and ensuring precise data retrieval from the storage layer.
   *
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * Config is a versatile field used in conjunction with the specific type of
   * account authenticator to facilitate complex authentication processes.
   * The interpretation of this field is overloaded, enabling multiple
   * authenticators to utilize it for their respective purposes.
   *
   * @generated from field: bytes config = 3;
   */
  config = new Uint8Array(0);

  constructor(data?: PartialMessage<AccountAuthenticator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.smartaccount.v1beta1.AccountAuthenticator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "config", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountAuthenticator {
    return new AccountAuthenticator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountAuthenticator {
    return new AccountAuthenticator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountAuthenticator {
    return new AccountAuthenticator().fromJsonString(jsonString, options);
  }

  static equals(a: AccountAuthenticator | PlainMessage<AccountAuthenticator> | undefined, b: AccountAuthenticator | PlainMessage<AccountAuthenticator> | undefined): boolean {
    return proto3.util.equals(AccountAuthenticator, a, b);
  }
}


// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/smartaccount/v1beta1/tx.proto (package osmosis.smartaccount.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * MsgAddAuthenticatorRequest defines the Msg/AddAuthenticator request type.
 *
 * @generated from message osmosis.smartaccount.v1beta1.MsgAddAuthenticator
 */
export class MsgAddAuthenticator extends Message<MsgAddAuthenticator> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgAddAuthenticator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.smartaccount.v1beta1.MsgAddAuthenticator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddAuthenticator {
    return new MsgAddAuthenticator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddAuthenticator {
    return new MsgAddAuthenticator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddAuthenticator {
    return new MsgAddAuthenticator().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddAuthenticator | PlainMessage<MsgAddAuthenticator> | undefined, b: MsgAddAuthenticator | PlainMessage<MsgAddAuthenticator> | undefined): boolean {
    return proto3.util.equals(MsgAddAuthenticator, a, b);
  }
}

/**
 * MsgAddAuthenticatorResponse defines the Msg/AddAuthenticator response type.
 *
 * @generated from message osmosis.smartaccount.v1beta1.MsgAddAuthenticatorResponse
 */
export class MsgAddAuthenticatorResponse extends Message<MsgAddAuthenticatorResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<MsgAddAuthenticatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.smartaccount.v1beta1.MsgAddAuthenticatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddAuthenticatorResponse {
    return new MsgAddAuthenticatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddAuthenticatorResponse {
    return new MsgAddAuthenticatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddAuthenticatorResponse {
    return new MsgAddAuthenticatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddAuthenticatorResponse | PlainMessage<MsgAddAuthenticatorResponse> | undefined, b: MsgAddAuthenticatorResponse | PlainMessage<MsgAddAuthenticatorResponse> | undefined): boolean {
    return proto3.util.equals(MsgAddAuthenticatorResponse, a, b);
  }
}

/**
 * MsgRemoveAuthenticatorRequest defines the Msg/RemoveAuthenticator request
 * type.
 *
 * @generated from message osmosis.smartaccount.v1beta1.MsgRemoveAuthenticator
 */
export class MsgRemoveAuthenticator extends Message<MsgRemoveAuthenticator> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<MsgRemoveAuthenticator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.smartaccount.v1beta1.MsgRemoveAuthenticator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveAuthenticator {
    return new MsgRemoveAuthenticator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveAuthenticator {
    return new MsgRemoveAuthenticator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveAuthenticator {
    return new MsgRemoveAuthenticator().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveAuthenticator | PlainMessage<MsgRemoveAuthenticator> | undefined, b: MsgRemoveAuthenticator | PlainMessage<MsgRemoveAuthenticator> | undefined): boolean {
    return proto3.util.equals(MsgRemoveAuthenticator, a, b);
  }
}

/**
 * MsgRemoveAuthenticatorResponse defines the Msg/RemoveAuthenticator response
 * type.
 *
 * @generated from message osmosis.smartaccount.v1beta1.MsgRemoveAuthenticatorResponse
 */
export class MsgRemoveAuthenticatorResponse extends Message<MsgRemoveAuthenticatorResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<MsgRemoveAuthenticatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.smartaccount.v1beta1.MsgRemoveAuthenticatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRemoveAuthenticatorResponse {
    return new MsgRemoveAuthenticatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRemoveAuthenticatorResponse {
    return new MsgRemoveAuthenticatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRemoveAuthenticatorResponse {
    return new MsgRemoveAuthenticatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRemoveAuthenticatorResponse | PlainMessage<MsgRemoveAuthenticatorResponse> | undefined, b: MsgRemoveAuthenticatorResponse | PlainMessage<MsgRemoveAuthenticatorResponse> | undefined): boolean {
    return proto3.util.equals(MsgRemoveAuthenticatorResponse, a, b);
  }
}

/**
 * @generated from message osmosis.smartaccount.v1beta1.MsgSetActiveState
 */
export class MsgSetActiveState extends Message<MsgSetActiveState> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: bool active = 2;
   */
  active = false;

  constructor(data?: PartialMessage<MsgSetActiveState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.smartaccount.v1beta1.MsgSetActiveState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetActiveState {
    return new MsgSetActiveState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetActiveState {
    return new MsgSetActiveState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetActiveState {
    return new MsgSetActiveState().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetActiveState | PlainMessage<MsgSetActiveState> | undefined, b: MsgSetActiveState | PlainMessage<MsgSetActiveState> | undefined): boolean {
    return proto3.util.equals(MsgSetActiveState, a, b);
  }
}

/**
 * @generated from message osmosis.smartaccount.v1beta1.MsgSetActiveStateResponse
 */
export class MsgSetActiveStateResponse extends Message<MsgSetActiveStateResponse> {
  constructor(data?: PartialMessage<MsgSetActiveStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.smartaccount.v1beta1.MsgSetActiveStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetActiveStateResponse {
    return new MsgSetActiveStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetActiveStateResponse {
    return new MsgSetActiveStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetActiveStateResponse {
    return new MsgSetActiveStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetActiveStateResponse | PlainMessage<MsgSetActiveStateResponse> | undefined, b: MsgSetActiveStateResponse | PlainMessage<MsgSetActiveStateResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetActiveStateResponse, a, b);
  }
}

/**
 * TxExtension allows for additional authenticator-specific data in
 * transactions.
 *
 * @generated from message osmosis.smartaccount.v1beta1.TxExtension
 */
export class TxExtension extends Message<TxExtension> {
  /**
   * selected_authenticators holds the authenticator_id for the chosen
   * authenticator per message.
   *
   * @generated from field: repeated uint64 selected_authenticators = 1;
   */
  selectedAuthenticators: bigint[] = [];

  constructor(data?: PartialMessage<TxExtension>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.smartaccount.v1beta1.TxExtension";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "selected_authenticators", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxExtension {
    return new TxExtension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxExtension {
    return new TxExtension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxExtension {
    return new TxExtension().fromJsonString(jsonString, options);
  }

  static equals(a: TxExtension | PlainMessage<TxExtension> | undefined, b: TxExtension | PlainMessage<TxExtension> | undefined): boolean {
    return proto3.util.equals(TxExtension, a, b);
  }
}


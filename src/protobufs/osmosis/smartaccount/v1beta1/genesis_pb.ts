// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/smartaccount/v1beta1/genesis.proto (package osmosis.smartaccount.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AccountAuthenticator } from "./models_pb.js";
import { Params } from "./params_pb.js";

/**
 * AuthenticatorData represents a genesis exported account with Authenticators.
 * The address is used as the key, and the account authenticators are stored in
 * the authenticators field.
 *
 * @generated from message osmosis.smartaccount.v1beta1.AuthenticatorData
 */
export class AuthenticatorData extends Message<AuthenticatorData> {
  /**
   * address is an account address, one address can have many authenticators
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * authenticators are the account's authenticators, these can be multiple
   * types including SignatureVerification, AllOfs, CosmWasmAuthenticators, etc
   *
   * @generated from field: repeated osmosis.smartaccount.v1beta1.AccountAuthenticator authenticators = 2;
   */
  authenticators: AccountAuthenticator[] = [];

  constructor(data?: PartialMessage<AuthenticatorData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.smartaccount.v1beta1.AuthenticatorData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "authenticators", kind: "message", T: AccountAuthenticator, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticatorData {
    return new AuthenticatorData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticatorData {
    return new AuthenticatorData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticatorData {
    return new AuthenticatorData().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticatorData | PlainMessage<AuthenticatorData> | undefined, b: AuthenticatorData | PlainMessage<AuthenticatorData> | undefined): boolean {
    return proto3.util.equals(AuthenticatorData, a, b);
  }
}

/**
 * GenesisState defines the authenticator module's genesis state.
 *
 * @generated from message osmosis.smartaccount.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params define the parameters for the authenticator module.
   *
   * @generated from field: osmosis.smartaccount.v1beta1.Params params = 1;
   */
  params?: Params;

  /**
   * next_authenticator_id is the next available authenticator ID.
   *
   * @generated from field: uint64 next_authenticator_id = 2;
   */
  nextAuthenticatorId = protoInt64.zero;

  /**
   * authenticator_data contains the data for multiple accounts, each with their
   * authenticators.
   *
   * @generated from field: repeated osmosis.smartaccount.v1beta1.AuthenticatorData authenticator_data = 3;
   */
  authenticatorData: AuthenticatorData[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.smartaccount.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "next_authenticator_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "authenticator_data", kind: "message", T: AuthenticatorData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}


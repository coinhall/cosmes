// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/concentratedliquidity/v1beta1/query.proto (package osmosis.concentratedliquidity.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { FullPositionBreakdown, PositionWithPeriodLock } from "./position_pb.js";
import { Params } from "../params_pb.js";
import { Coin, DecCoin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { UptimeTracker } from "./tick_info_pb.js";
import { IncentiveRecord } from "./incentive_record_pb.js";

/**
 * =============================== UserPositions
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.UserPositionsRequest
 */
export class UserPositionsRequest extends Message<UserPositionsRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<UserPositionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.UserPositionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserPositionsRequest {
    return new UserPositionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserPositionsRequest {
    return new UserPositionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserPositionsRequest {
    return new UserPositionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserPositionsRequest | PlainMessage<UserPositionsRequest> | undefined, b: UserPositionsRequest | PlainMessage<UserPositionsRequest> | undefined): boolean {
    return proto3.util.equals(UserPositionsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.UserPositionsResponse
 */
export class UserPositionsResponse extends Message<UserPositionsResponse> {
  /**
   * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.FullPositionBreakdown positions = 1;
   */
  positions: FullPositionBreakdown[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<UserPositionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.UserPositionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "positions", kind: "message", T: FullPositionBreakdown, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserPositionsResponse {
    return new UserPositionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserPositionsResponse {
    return new UserPositionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserPositionsResponse {
    return new UserPositionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserPositionsResponse | PlainMessage<UserPositionsResponse> | undefined, b: UserPositionsResponse | PlainMessage<UserPositionsResponse> | undefined): boolean {
    return proto3.util.equals(UserPositionsResponse, a, b);
  }
}

/**
 * =============================== PositionById
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.PositionByIdRequest
 */
export class PositionByIdRequest extends Message<PositionByIdRequest> {
  /**
   * @generated from field: uint64 position_id = 1;
   */
  positionId = protoInt64.zero;

  constructor(data?: PartialMessage<PositionByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.PositionByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionByIdRequest {
    return new PositionByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionByIdRequest {
    return new PositionByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionByIdRequest {
    return new PositionByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PositionByIdRequest | PlainMessage<PositionByIdRequest> | undefined, b: PositionByIdRequest | PlainMessage<PositionByIdRequest> | undefined): boolean {
    return proto3.util.equals(PositionByIdRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.PositionByIdResponse
 */
export class PositionByIdResponse extends Message<PositionByIdResponse> {
  /**
   * @generated from field: osmosis.concentratedliquidity.v1beta1.FullPositionBreakdown position = 1;
   */
  position?: FullPositionBreakdown;

  constructor(data?: PartialMessage<PositionByIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.PositionByIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "message", T: FullPositionBreakdown },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositionByIdResponse {
    return new PositionByIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositionByIdResponse {
    return new PositionByIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositionByIdResponse {
    return new PositionByIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PositionByIdResponse | PlainMessage<PositionByIdResponse> | undefined, b: PositionByIdResponse | PlainMessage<PositionByIdResponse> | undefined): boolean {
    return proto3.util.equals(PositionByIdResponse, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.NumPoolPositionsRequest
 */
export class NumPoolPositionsRequest extends Message<NumPoolPositionsRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<NumPoolPositionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.NumPoolPositionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumPoolPositionsRequest {
    return new NumPoolPositionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumPoolPositionsRequest {
    return new NumPoolPositionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumPoolPositionsRequest {
    return new NumPoolPositionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NumPoolPositionsRequest | PlainMessage<NumPoolPositionsRequest> | undefined, b: NumPoolPositionsRequest | PlainMessage<NumPoolPositionsRequest> | undefined): boolean {
    return proto3.util.equals(NumPoolPositionsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.NumPoolPositionsResponse
 */
export class NumPoolPositionsResponse extends Message<NumPoolPositionsResponse> {
  /**
   * @generated from field: uint64 position_count = 1;
   */
  positionCount = protoInt64.zero;

  constructor(data?: PartialMessage<NumPoolPositionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.NumPoolPositionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumPoolPositionsResponse {
    return new NumPoolPositionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumPoolPositionsResponse {
    return new NumPoolPositionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumPoolPositionsResponse {
    return new NumPoolPositionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NumPoolPositionsResponse | PlainMessage<NumPoolPositionsResponse> | undefined, b: NumPoolPositionsResponse | PlainMessage<NumPoolPositionsResponse> | undefined): boolean {
    return proto3.util.equals(NumPoolPositionsResponse, a, b);
  }
}

/**
 * =============================== Pools
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.PoolsRequest
 */
export class PoolsRequest extends Message<PoolsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<PoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.PoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolsRequest {
    return new PoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolsRequest {
    return new PoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolsRequest {
    return new PoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PoolsRequest | PlainMessage<PoolsRequest> | undefined, b: PoolsRequest | PlainMessage<PoolsRequest> | undefined): boolean {
    return proto3.util.equals(PoolsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.PoolsResponse
 */
export class PoolsResponse extends Message<PoolsResponse> {
  /**
   * @generated from field: repeated google.protobuf.Any pools = 1;
   */
  pools: Any[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<PoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.PoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: Any, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolsResponse {
    return new PoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolsResponse {
    return new PoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolsResponse {
    return new PoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PoolsResponse | PlainMessage<PoolsResponse> | undefined, b: PoolsResponse | PlainMessage<PoolsResponse> | undefined): boolean {
    return proto3.util.equals(PoolsResponse, a, b);
  }
}

/**
 * =============================== ModuleParams
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.ParamsRequest
 */
export class ParamsRequest extends Message<ParamsRequest> {
  constructor(data?: PartialMessage<ParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.ParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsRequest {
    return new ParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsRequest {
    return new ParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsRequest {
    return new ParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsRequest | PlainMessage<ParamsRequest> | undefined, b: ParamsRequest | PlainMessage<ParamsRequest> | undefined): boolean {
    return proto3.util.equals(ParamsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.ParamsResponse
 */
export class ParamsResponse extends Message<ParamsResponse> {
  /**
   * @generated from field: osmosis.concentratedliquidity.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<ParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.ParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsResponse {
    return new ParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsResponse {
    return new ParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsResponse {
    return new ParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsResponse | PlainMessage<ParamsResponse> | undefined, b: ParamsResponse | PlainMessage<ParamsResponse> | undefined): boolean {
    return proto3.util.equals(ParamsResponse, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.TickLiquidityNet
 */
export class TickLiquidityNet extends Message<TickLiquidityNet> {
  /**
   * @generated from field: string liquidity_net = 1;
   */
  liquidityNet = "";

  /**
   * @generated from field: int64 tick_index = 2;
   */
  tickIndex = protoInt64.zero;

  constructor(data?: PartialMessage<TickLiquidityNet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.TickLiquidityNet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity_net", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tick_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TickLiquidityNet {
    return new TickLiquidityNet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TickLiquidityNet {
    return new TickLiquidityNet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TickLiquidityNet {
    return new TickLiquidityNet().fromJsonString(jsonString, options);
  }

  static equals(a: TickLiquidityNet | PlainMessage<TickLiquidityNet> | undefined, b: TickLiquidityNet | PlainMessage<TickLiquidityNet> | undefined): boolean {
    return proto3.util.equals(TickLiquidityNet, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.LiquidityDepthWithRange
 */
export class LiquidityDepthWithRange extends Message<LiquidityDepthWithRange> {
  /**
   * @generated from field: string liquidity_amount = 1;
   */
  liquidityAmount = "";

  /**
   * @generated from field: int64 lower_tick = 2;
   */
  lowerTick = protoInt64.zero;

  /**
   * @generated from field: int64 upper_tick = 3;
   */
  upperTick = protoInt64.zero;

  constructor(data?: PartialMessage<LiquidityDepthWithRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.LiquidityDepthWithRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lower_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "upper_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LiquidityDepthWithRange {
    return new LiquidityDepthWithRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LiquidityDepthWithRange {
    return new LiquidityDepthWithRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LiquidityDepthWithRange {
    return new LiquidityDepthWithRange().fromJsonString(jsonString, options);
  }

  static equals(a: LiquidityDepthWithRange | PlainMessage<LiquidityDepthWithRange> | undefined, b: LiquidityDepthWithRange | PlainMessage<LiquidityDepthWithRange> | undefined): boolean {
    return proto3.util.equals(LiquidityDepthWithRange, a, b);
  }
}

/**
 * =============================== LiquidityNetInDirection
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.LiquidityNetInDirectionRequest
 */
export class LiquidityNetInDirectionRequest extends Message<LiquidityNetInDirectionRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string token_in = 2;
   */
  tokenIn = "";

  /**
   * @generated from field: int64 start_tick = 3;
   */
  startTick = protoInt64.zero;

  /**
   * @generated from field: bool use_cur_tick = 4;
   */
  useCurTick = false;

  /**
   * @generated from field: int64 bound_tick = 5;
   */
  boundTick = protoInt64.zero;

  /**
   * @generated from field: bool use_no_bound = 6;
   */
  useNoBound = false;

  constructor(data?: PartialMessage<LiquidityNetInDirectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.LiquidityNetInDirectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "use_cur_tick", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "bound_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "use_no_bound", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LiquidityNetInDirectionRequest {
    return new LiquidityNetInDirectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LiquidityNetInDirectionRequest {
    return new LiquidityNetInDirectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LiquidityNetInDirectionRequest {
    return new LiquidityNetInDirectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LiquidityNetInDirectionRequest | PlainMessage<LiquidityNetInDirectionRequest> | undefined, b: LiquidityNetInDirectionRequest | PlainMessage<LiquidityNetInDirectionRequest> | undefined): boolean {
    return proto3.util.equals(LiquidityNetInDirectionRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.LiquidityNetInDirectionResponse
 */
export class LiquidityNetInDirectionResponse extends Message<LiquidityNetInDirectionResponse> {
  /**
   * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.TickLiquidityNet liquidity_depths = 1;
   */
  liquidityDepths: TickLiquidityNet[] = [];

  /**
   * @generated from field: int64 current_tick = 2;
   */
  currentTick = protoInt64.zero;

  /**
   * @generated from field: string current_liquidity = 3;
   */
  currentLiquidity = "";

  /**
   * @generated from field: string current_sqrt_price = 4;
   */
  currentSqrtPrice = "";

  constructor(data?: PartialMessage<LiquidityNetInDirectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.LiquidityNetInDirectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity_depths", kind: "message", T: TickLiquidityNet, repeated: true },
    { no: 2, name: "current_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "current_liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "current_sqrt_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LiquidityNetInDirectionResponse {
    return new LiquidityNetInDirectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LiquidityNetInDirectionResponse {
    return new LiquidityNetInDirectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LiquidityNetInDirectionResponse {
    return new LiquidityNetInDirectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LiquidityNetInDirectionResponse | PlainMessage<LiquidityNetInDirectionResponse> | undefined, b: LiquidityNetInDirectionResponse | PlainMessage<LiquidityNetInDirectionResponse> | undefined): boolean {
    return proto3.util.equals(LiquidityNetInDirectionResponse, a, b);
  }
}

/**
 * =============================== LiquidityPerTickRange
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.LiquidityPerTickRangeRequest
 */
export class LiquidityPerTickRangeRequest extends Message<LiquidityPerTickRangeRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<LiquidityPerTickRangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.LiquidityPerTickRangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LiquidityPerTickRangeRequest {
    return new LiquidityPerTickRangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LiquidityPerTickRangeRequest {
    return new LiquidityPerTickRangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LiquidityPerTickRangeRequest {
    return new LiquidityPerTickRangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LiquidityPerTickRangeRequest | PlainMessage<LiquidityPerTickRangeRequest> | undefined, b: LiquidityPerTickRangeRequest | PlainMessage<LiquidityPerTickRangeRequest> | undefined): boolean {
    return proto3.util.equals(LiquidityPerTickRangeRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.LiquidityPerTickRangeResponse
 */
export class LiquidityPerTickRangeResponse extends Message<LiquidityPerTickRangeResponse> {
  /**
   * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.LiquidityDepthWithRange liquidity = 1;
   */
  liquidity: LiquidityDepthWithRange[] = [];

  /**
   * @generated from field: int64 bucket_index = 2;
   */
  bucketIndex = protoInt64.zero;

  constructor(data?: PartialMessage<LiquidityPerTickRangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.LiquidityPerTickRangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity", kind: "message", T: LiquidityDepthWithRange, repeated: true },
    { no: 2, name: "bucket_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LiquidityPerTickRangeResponse {
    return new LiquidityPerTickRangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LiquidityPerTickRangeResponse {
    return new LiquidityPerTickRangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LiquidityPerTickRangeResponse {
    return new LiquidityPerTickRangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LiquidityPerTickRangeResponse | PlainMessage<LiquidityPerTickRangeResponse> | undefined, b: LiquidityPerTickRangeResponse | PlainMessage<LiquidityPerTickRangeResponse> | undefined): boolean {
    return proto3.util.equals(LiquidityPerTickRangeResponse, a, b);
  }
}

/**
 * ===================== QueryClaimableSpreadRewards
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.ClaimableSpreadRewardsRequest
 */
export class ClaimableSpreadRewardsRequest extends Message<ClaimableSpreadRewardsRequest> {
  /**
   * @generated from field: uint64 position_id = 1;
   */
  positionId = protoInt64.zero;

  constructor(data?: PartialMessage<ClaimableSpreadRewardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.ClaimableSpreadRewardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimableSpreadRewardsRequest {
    return new ClaimableSpreadRewardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimableSpreadRewardsRequest {
    return new ClaimableSpreadRewardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimableSpreadRewardsRequest {
    return new ClaimableSpreadRewardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimableSpreadRewardsRequest | PlainMessage<ClaimableSpreadRewardsRequest> | undefined, b: ClaimableSpreadRewardsRequest | PlainMessage<ClaimableSpreadRewardsRequest> | undefined): boolean {
    return proto3.util.equals(ClaimableSpreadRewardsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.ClaimableSpreadRewardsResponse
 */
export class ClaimableSpreadRewardsResponse extends Message<ClaimableSpreadRewardsResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin claimable_spread_rewards = 1;
   */
  claimableSpreadRewards: Coin[] = [];

  constructor(data?: PartialMessage<ClaimableSpreadRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.ClaimableSpreadRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "claimable_spread_rewards", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimableSpreadRewardsResponse {
    return new ClaimableSpreadRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimableSpreadRewardsResponse {
    return new ClaimableSpreadRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimableSpreadRewardsResponse {
    return new ClaimableSpreadRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimableSpreadRewardsResponse | PlainMessage<ClaimableSpreadRewardsResponse> | undefined, b: ClaimableSpreadRewardsResponse | PlainMessage<ClaimableSpreadRewardsResponse> | undefined): boolean {
    return proto3.util.equals(ClaimableSpreadRewardsResponse, a, b);
  }
}

/**
 * ===================== QueryClaimableIncentives
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.ClaimableIncentivesRequest
 */
export class ClaimableIncentivesRequest extends Message<ClaimableIncentivesRequest> {
  /**
   * @generated from field: uint64 position_id = 1;
   */
  positionId = protoInt64.zero;

  constructor(data?: PartialMessage<ClaimableIncentivesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.ClaimableIncentivesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimableIncentivesRequest {
    return new ClaimableIncentivesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimableIncentivesRequest {
    return new ClaimableIncentivesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimableIncentivesRequest {
    return new ClaimableIncentivesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimableIncentivesRequest | PlainMessage<ClaimableIncentivesRequest> | undefined, b: ClaimableIncentivesRequest | PlainMessage<ClaimableIncentivesRequest> | undefined): boolean {
    return proto3.util.equals(ClaimableIncentivesRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.ClaimableIncentivesResponse
 */
export class ClaimableIncentivesResponse extends Message<ClaimableIncentivesResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin claimable_incentives = 1;
   */
  claimableIncentives: Coin[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin forfeited_incentives = 2;
   */
  forfeitedIncentives: Coin[] = [];

  constructor(data?: PartialMessage<ClaimableIncentivesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.ClaimableIncentivesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "claimable_incentives", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "forfeited_incentives", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimableIncentivesResponse {
    return new ClaimableIncentivesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimableIncentivesResponse {
    return new ClaimableIncentivesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimableIncentivesResponse {
    return new ClaimableIncentivesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimableIncentivesResponse | PlainMessage<ClaimableIncentivesResponse> | undefined, b: ClaimableIncentivesResponse | PlainMessage<ClaimableIncentivesResponse> | undefined): boolean {
    return proto3.util.equals(ClaimableIncentivesResponse, a, b);
  }
}

/**
 * ===================== QueryPoolAccumulatorRewards
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.PoolAccumulatorRewardsRequest
 */
export class PoolAccumulatorRewardsRequest extends Message<PoolAccumulatorRewardsRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<PoolAccumulatorRewardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.PoolAccumulatorRewardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolAccumulatorRewardsRequest {
    return new PoolAccumulatorRewardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolAccumulatorRewardsRequest {
    return new PoolAccumulatorRewardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolAccumulatorRewardsRequest {
    return new PoolAccumulatorRewardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PoolAccumulatorRewardsRequest | PlainMessage<PoolAccumulatorRewardsRequest> | undefined, b: PoolAccumulatorRewardsRequest | PlainMessage<PoolAccumulatorRewardsRequest> | undefined): boolean {
    return proto3.util.equals(PoolAccumulatorRewardsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.PoolAccumulatorRewardsResponse
 */
export class PoolAccumulatorRewardsResponse extends Message<PoolAccumulatorRewardsResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin spread_reward_growth_global = 1;
   */
  spreadRewardGrowthGlobal: DecCoin[] = [];

  /**
   * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.UptimeTracker uptime_growth_global = 2;
   */
  uptimeGrowthGlobal: UptimeTracker[] = [];

  constructor(data?: PartialMessage<PoolAccumulatorRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.PoolAccumulatorRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spread_reward_growth_global", kind: "message", T: DecCoin, repeated: true },
    { no: 2, name: "uptime_growth_global", kind: "message", T: UptimeTracker, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolAccumulatorRewardsResponse {
    return new PoolAccumulatorRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolAccumulatorRewardsResponse {
    return new PoolAccumulatorRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolAccumulatorRewardsResponse {
    return new PoolAccumulatorRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PoolAccumulatorRewardsResponse | PlainMessage<PoolAccumulatorRewardsResponse> | undefined, b: PoolAccumulatorRewardsResponse | PlainMessage<PoolAccumulatorRewardsResponse> | undefined): boolean {
    return proto3.util.equals(PoolAccumulatorRewardsResponse, a, b);
  }
}

/**
 * ===================== QueryTickAccumulatorTrackers
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.TickAccumulatorTrackersRequest
 */
export class TickAccumulatorTrackersRequest extends Message<TickAccumulatorTrackersRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: int64 tick_index = 2;
   */
  tickIndex = protoInt64.zero;

  constructor(data?: PartialMessage<TickAccumulatorTrackersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.TickAccumulatorTrackersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "tick_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TickAccumulatorTrackersRequest {
    return new TickAccumulatorTrackersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TickAccumulatorTrackersRequest {
    return new TickAccumulatorTrackersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TickAccumulatorTrackersRequest {
    return new TickAccumulatorTrackersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TickAccumulatorTrackersRequest | PlainMessage<TickAccumulatorTrackersRequest> | undefined, b: TickAccumulatorTrackersRequest | PlainMessage<TickAccumulatorTrackersRequest> | undefined): boolean {
    return proto3.util.equals(TickAccumulatorTrackersRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.TickAccumulatorTrackersResponse
 */
export class TickAccumulatorTrackersResponse extends Message<TickAccumulatorTrackersResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin spread_reward_growth_opposite_direction_of_last_traversal = 1;
   */
  spreadRewardGrowthOppositeDirectionOfLastTraversal: DecCoin[] = [];

  /**
   * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.UptimeTracker uptime_trackers = 2;
   */
  uptimeTrackers: UptimeTracker[] = [];

  constructor(data?: PartialMessage<TickAccumulatorTrackersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.TickAccumulatorTrackersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spread_reward_growth_opposite_direction_of_last_traversal", kind: "message", T: DecCoin, repeated: true },
    { no: 2, name: "uptime_trackers", kind: "message", T: UptimeTracker, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TickAccumulatorTrackersResponse {
    return new TickAccumulatorTrackersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TickAccumulatorTrackersResponse {
    return new TickAccumulatorTrackersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TickAccumulatorTrackersResponse {
    return new TickAccumulatorTrackersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TickAccumulatorTrackersResponse | PlainMessage<TickAccumulatorTrackersResponse> | undefined, b: TickAccumulatorTrackersResponse | PlainMessage<TickAccumulatorTrackersResponse> | undefined): boolean {
    return proto3.util.equals(TickAccumulatorTrackersResponse, a, b);
  }
}

/**
 * ===================== QueryIncentiveRecords
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.IncentiveRecordsRequest
 */
export class IncentiveRecordsRequest extends Message<IncentiveRecordsRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<IncentiveRecordsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.IncentiveRecordsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IncentiveRecordsRequest {
    return new IncentiveRecordsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IncentiveRecordsRequest {
    return new IncentiveRecordsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IncentiveRecordsRequest {
    return new IncentiveRecordsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IncentiveRecordsRequest | PlainMessage<IncentiveRecordsRequest> | undefined, b: IncentiveRecordsRequest | PlainMessage<IncentiveRecordsRequest> | undefined): boolean {
    return proto3.util.equals(IncentiveRecordsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.IncentiveRecordsResponse
 */
export class IncentiveRecordsResponse extends Message<IncentiveRecordsResponse> {
  /**
   * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.IncentiveRecord incentive_records = 1;
   */
  incentiveRecords: IncentiveRecord[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<IncentiveRecordsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.IncentiveRecordsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "incentive_records", kind: "message", T: IncentiveRecord, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IncentiveRecordsResponse {
    return new IncentiveRecordsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IncentiveRecordsResponse {
    return new IncentiveRecordsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IncentiveRecordsResponse {
    return new IncentiveRecordsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IncentiveRecordsResponse | PlainMessage<IncentiveRecordsResponse> | undefined, b: IncentiveRecordsResponse | PlainMessage<IncentiveRecordsResponse> | undefined): boolean {
    return proto3.util.equals(IncentiveRecordsResponse, a, b);
  }
}

/**
 * =============================== CFMMPoolIdLinkFromConcentratedPoolId
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.CFMMPoolIdLinkFromConcentratedPoolIdRequest
 */
export class CFMMPoolIdLinkFromConcentratedPoolIdRequest extends Message<CFMMPoolIdLinkFromConcentratedPoolIdRequest> {
  /**
   * @generated from field: uint64 concentrated_pool_id = 1;
   */
  concentratedPoolId = protoInt64.zero;

  constructor(data?: PartialMessage<CFMMPoolIdLinkFromConcentratedPoolIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.CFMMPoolIdLinkFromConcentratedPoolIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "concentrated_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CFMMPoolIdLinkFromConcentratedPoolIdRequest {
    return new CFMMPoolIdLinkFromConcentratedPoolIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CFMMPoolIdLinkFromConcentratedPoolIdRequest {
    return new CFMMPoolIdLinkFromConcentratedPoolIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CFMMPoolIdLinkFromConcentratedPoolIdRequest {
    return new CFMMPoolIdLinkFromConcentratedPoolIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CFMMPoolIdLinkFromConcentratedPoolIdRequest | PlainMessage<CFMMPoolIdLinkFromConcentratedPoolIdRequest> | undefined, b: CFMMPoolIdLinkFromConcentratedPoolIdRequest | PlainMessage<CFMMPoolIdLinkFromConcentratedPoolIdRequest> | undefined): boolean {
    return proto3.util.equals(CFMMPoolIdLinkFromConcentratedPoolIdRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.CFMMPoolIdLinkFromConcentratedPoolIdResponse
 */
export class CFMMPoolIdLinkFromConcentratedPoolIdResponse extends Message<CFMMPoolIdLinkFromConcentratedPoolIdResponse> {
  /**
   * @generated from field: uint64 cfmm_pool_id = 1;
   */
  cfmmPoolId = protoInt64.zero;

  constructor(data?: PartialMessage<CFMMPoolIdLinkFromConcentratedPoolIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.CFMMPoolIdLinkFromConcentratedPoolIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cfmm_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CFMMPoolIdLinkFromConcentratedPoolIdResponse {
    return new CFMMPoolIdLinkFromConcentratedPoolIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CFMMPoolIdLinkFromConcentratedPoolIdResponse {
    return new CFMMPoolIdLinkFromConcentratedPoolIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CFMMPoolIdLinkFromConcentratedPoolIdResponse {
    return new CFMMPoolIdLinkFromConcentratedPoolIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CFMMPoolIdLinkFromConcentratedPoolIdResponse | PlainMessage<CFMMPoolIdLinkFromConcentratedPoolIdResponse> | undefined, b: CFMMPoolIdLinkFromConcentratedPoolIdResponse | PlainMessage<CFMMPoolIdLinkFromConcentratedPoolIdResponse> | undefined): boolean {
    return proto3.util.equals(CFMMPoolIdLinkFromConcentratedPoolIdResponse, a, b);
  }
}

/**
 * =============================== UserUnbondingPositions
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.UserUnbondingPositionsRequest
 */
export class UserUnbondingPositionsRequest extends Message<UserUnbondingPositionsRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<UserUnbondingPositionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.UserUnbondingPositionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserUnbondingPositionsRequest {
    return new UserUnbondingPositionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserUnbondingPositionsRequest {
    return new UserUnbondingPositionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserUnbondingPositionsRequest {
    return new UserUnbondingPositionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UserUnbondingPositionsRequest | PlainMessage<UserUnbondingPositionsRequest> | undefined, b: UserUnbondingPositionsRequest | PlainMessage<UserUnbondingPositionsRequest> | undefined): boolean {
    return proto3.util.equals(UserUnbondingPositionsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.UserUnbondingPositionsResponse
 */
export class UserUnbondingPositionsResponse extends Message<UserUnbondingPositionsResponse> {
  /**
   * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.PositionWithPeriodLock positions_with_period_lock = 1;
   */
  positionsWithPeriodLock: PositionWithPeriodLock[] = [];

  constructor(data?: PartialMessage<UserUnbondingPositionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.UserUnbondingPositionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "positions_with_period_lock", kind: "message", T: PositionWithPeriodLock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserUnbondingPositionsResponse {
    return new UserUnbondingPositionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserUnbondingPositionsResponse {
    return new UserUnbondingPositionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserUnbondingPositionsResponse {
    return new UserUnbondingPositionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UserUnbondingPositionsResponse | PlainMessage<UserUnbondingPositionsResponse> | undefined, b: UserUnbondingPositionsResponse | PlainMessage<UserUnbondingPositionsResponse> | undefined): boolean {
    return proto3.util.equals(UserUnbondingPositionsResponse, a, b);
  }
}

/**
 * =============================== GetTotalLiquidity
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.GetTotalLiquidityRequest
 */
export class GetTotalLiquidityRequest extends Message<GetTotalLiquidityRequest> {
  constructor(data?: PartialMessage<GetTotalLiquidityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.GetTotalLiquidityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTotalLiquidityRequest {
    return new GetTotalLiquidityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTotalLiquidityRequest {
    return new GetTotalLiquidityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTotalLiquidityRequest {
    return new GetTotalLiquidityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTotalLiquidityRequest | PlainMessage<GetTotalLiquidityRequest> | undefined, b: GetTotalLiquidityRequest | PlainMessage<GetTotalLiquidityRequest> | undefined): boolean {
    return proto3.util.equals(GetTotalLiquidityRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.GetTotalLiquidityResponse
 */
export class GetTotalLiquidityResponse extends Message<GetTotalLiquidityResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_liquidity = 1;
   */
  totalLiquidity: Coin[] = [];

  constructor(data?: PartialMessage<GetTotalLiquidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.GetTotalLiquidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_liquidity", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTotalLiquidityResponse {
    return new GetTotalLiquidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTotalLiquidityResponse {
    return new GetTotalLiquidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTotalLiquidityResponse {
    return new GetTotalLiquidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTotalLiquidityResponse | PlainMessage<GetTotalLiquidityResponse> | undefined, b: GetTotalLiquidityResponse | PlainMessage<GetTotalLiquidityResponse> | undefined): boolean {
    return proto3.util.equals(GetTotalLiquidityResponse, a, b);
  }
}

/**
 * =============================== NumNextInitializedTicks
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.NumNextInitializedTicksRequest
 */
export class NumNextInitializedTicksRequest extends Message<NumNextInitializedTicksRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string token_in_denom = 2;
   */
  tokenInDenom = "";

  /**
   * @generated from field: uint64 num_next_initialized_ticks = 3;
   */
  numNextInitializedTicks = protoInt64.zero;

  constructor(data?: PartialMessage<NumNextInitializedTicksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.NumNextInitializedTicksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_in_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "num_next_initialized_ticks", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumNextInitializedTicksRequest {
    return new NumNextInitializedTicksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumNextInitializedTicksRequest {
    return new NumNextInitializedTicksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumNextInitializedTicksRequest {
    return new NumNextInitializedTicksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NumNextInitializedTicksRequest | PlainMessage<NumNextInitializedTicksRequest> | undefined, b: NumNextInitializedTicksRequest | PlainMessage<NumNextInitializedTicksRequest> | undefined): boolean {
    return proto3.util.equals(NumNextInitializedTicksRequest, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.NumNextInitializedTicksResponse
 */
export class NumNextInitializedTicksResponse extends Message<NumNextInitializedTicksResponse> {
  /**
   * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.TickLiquidityNet liquidity_depths = 1;
   */
  liquidityDepths: TickLiquidityNet[] = [];

  /**
   * @generated from field: int64 current_tick = 2;
   */
  currentTick = protoInt64.zero;

  /**
   * @generated from field: string current_liquidity = 3;
   */
  currentLiquidity = "";

  constructor(data?: PartialMessage<NumNextInitializedTicksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.NumNextInitializedTicksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity_depths", kind: "message", T: TickLiquidityNet, repeated: true },
    { no: 2, name: "current_tick", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "current_liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumNextInitializedTicksResponse {
    return new NumNextInitializedTicksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumNextInitializedTicksResponse {
    return new NumNextInitializedTicksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumNextInitializedTicksResponse {
    return new NumNextInitializedTicksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NumNextInitializedTicksResponse | PlainMessage<NumNextInitializedTicksResponse> | undefined, b: NumNextInitializedTicksResponse | PlainMessage<NumNextInitializedTicksResponse> | undefined): boolean {
    return proto3.util.equals(NumNextInitializedTicksResponse, a, b);
  }
}


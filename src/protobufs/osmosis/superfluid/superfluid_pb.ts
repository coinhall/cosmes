// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/superfluid/superfluid.proto (package osmosis.superfluid, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { SyntheticLock } from "../lockup/lock_pb.js";

/**
 * SuperfluidAssetType indicates whether the superfluid asset is
 * a native token, lp share of a pool, or concentrated share of a pool
 *
 * @generated from enum osmosis.superfluid.SuperfluidAssetType
 */
export enum SuperfluidAssetType {
  /**
   * @generated from enum value: SuperfluidAssetTypeNative = 0;
   */
  SuperfluidAssetTypeNative = 0,

  /**
   * @generated from enum value: SuperfluidAssetTypeLPShare = 1;
   */
  SuperfluidAssetTypeLPShare = 1,

  /**
   * SuperfluidAssetTypeLendingShare = 3; // for now not exist
   *
   * @generated from enum value: SuperfluidAssetTypeConcentratedShare = 2;
   */
  SuperfluidAssetTypeConcentratedShare = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SuperfluidAssetType)
proto3.util.setEnumType(SuperfluidAssetType, "osmosis.superfluid.SuperfluidAssetType", [
  { no: 0, name: "SuperfluidAssetTypeNative" },
  { no: 1, name: "SuperfluidAssetTypeLPShare" },
  { no: 2, name: "SuperfluidAssetTypeConcentratedShare" },
]);

/**
 * SuperfluidAsset stores the pair of superfluid asset type and denom pair
 *
 * @generated from message osmosis.superfluid.SuperfluidAsset
 */
export class SuperfluidAsset extends Message<SuperfluidAsset> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * AssetType indicates whether the superfluid asset is a native token or an lp
   * share
   *
   * @generated from field: osmosis.superfluid.SuperfluidAssetType asset_type = 2;
   */
  assetType = SuperfluidAssetType.SuperfluidAssetTypeNative;

  /**
   * For non-osmo native assets, we need a pool_id osmo/asset to determine the
   * twap of the asset
   *
   * @generated from field: uint64 price_pool_id = 3;
   */
  pricePoolId = protoInt64.zero;

  constructor(data?: PartialMessage<SuperfluidAsset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.SuperfluidAsset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset_type", kind: "enum", T: proto3.getEnumType(SuperfluidAssetType) },
    { no: 3, name: "price_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperfluidAsset {
    return new SuperfluidAsset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperfluidAsset {
    return new SuperfluidAsset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperfluidAsset {
    return new SuperfluidAsset().fromJsonString(jsonString, options);
  }

  static equals(a: SuperfluidAsset | PlainMessage<SuperfluidAsset> | undefined, b: SuperfluidAsset | PlainMessage<SuperfluidAsset> | undefined): boolean {
    return proto3.util.equals(SuperfluidAsset, a, b);
  }
}

/**
 * SuperfluidIntermediaryAccount takes the role of intermediary between LP token
 * and OSMO tokens for superfluid staking. The intermediary account is the
 * actual account responsible for delegation, not the validator account itself.
 *
 * @generated from message osmosis.superfluid.SuperfluidIntermediaryAccount
 */
export class SuperfluidIntermediaryAccount extends Message<SuperfluidIntermediaryAccount> {
  /**
   * Denom indicates the denom of the superfluid asset.
   *
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string val_addr = 2;
   */
  valAddr = "";

  /**
   * perpetual gauge for rewards distribution
   *
   * @generated from field: uint64 gauge_id = 3;
   */
  gaugeId = protoInt64.zero;

  constructor(data?: PartialMessage<SuperfluidIntermediaryAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.SuperfluidIntermediaryAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "val_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gauge_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperfluidIntermediaryAccount {
    return new SuperfluidIntermediaryAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperfluidIntermediaryAccount {
    return new SuperfluidIntermediaryAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperfluidIntermediaryAccount {
    return new SuperfluidIntermediaryAccount().fromJsonString(jsonString, options);
  }

  static equals(a: SuperfluidIntermediaryAccount | PlainMessage<SuperfluidIntermediaryAccount> | undefined, b: SuperfluidIntermediaryAccount | PlainMessage<SuperfluidIntermediaryAccount> | undefined): boolean {
    return proto3.util.equals(SuperfluidIntermediaryAccount, a, b);
  }
}

/**
 * The Osmo-Equivalent-Multiplier Record for epoch N refers to the osmo worth we
 * treat an LP share as having, for all of epoch N. Eventually this is intended
 * to be set as the Time-weighted-average-osmo-backing for the entire duration
 * of epoch N-1. (Thereby locking what's in use for epoch N as based on the
 * prior epochs rewards) However for now, this is not the TWAP but instead the
 * spot price at the boundary. For different types of assets in the future, it
 * could change.
 *
 * @generated from message osmosis.superfluid.OsmoEquivalentMultiplierRecord
 */
export class OsmoEquivalentMultiplierRecord extends Message<OsmoEquivalentMultiplierRecord> {
  /**
   * @generated from field: int64 epoch_number = 1;
   */
  epochNumber = protoInt64.zero;

  /**
   * superfluid asset denom, can be LP token or native token
   *
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: string multiplier = 3;
   */
  multiplier = "";

  constructor(data?: PartialMessage<OsmoEquivalentMultiplierRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.OsmoEquivalentMultiplierRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch_number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "multiplier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OsmoEquivalentMultiplierRecord {
    return new OsmoEquivalentMultiplierRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OsmoEquivalentMultiplierRecord {
    return new OsmoEquivalentMultiplierRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OsmoEquivalentMultiplierRecord {
    return new OsmoEquivalentMultiplierRecord().fromJsonString(jsonString, options);
  }

  static equals(a: OsmoEquivalentMultiplierRecord | PlainMessage<OsmoEquivalentMultiplierRecord> | undefined, b: OsmoEquivalentMultiplierRecord | PlainMessage<OsmoEquivalentMultiplierRecord> | undefined): boolean {
    return proto3.util.equals(OsmoEquivalentMultiplierRecord, a, b);
  }
}

/**
 * SuperfluidDelegationRecord is a struct used to indicate superfluid
 * delegations of an account in the state machine in a user friendly form.
 *
 * @generated from message osmosis.superfluid.SuperfluidDelegationRecord
 */
export class SuperfluidDelegationRecord extends Message<SuperfluidDelegationRecord> {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * @generated from field: string validator_address = 2;
   */
  validatorAddress = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin delegation_amount = 3;
   */
  delegationAmount?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin equivalent_staked_amount = 4;
   */
  equivalentStakedAmount?: Coin;

  constructor(data?: PartialMessage<SuperfluidDelegationRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.SuperfluidDelegationRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "delegation_amount", kind: "message", T: Coin },
    { no: 4, name: "equivalent_staked_amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperfluidDelegationRecord {
    return new SuperfluidDelegationRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperfluidDelegationRecord {
    return new SuperfluidDelegationRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperfluidDelegationRecord {
    return new SuperfluidDelegationRecord().fromJsonString(jsonString, options);
  }

  static equals(a: SuperfluidDelegationRecord | PlainMessage<SuperfluidDelegationRecord> | undefined, b: SuperfluidDelegationRecord | PlainMessage<SuperfluidDelegationRecord> | undefined): boolean {
    return proto3.util.equals(SuperfluidDelegationRecord, a, b);
  }
}

/**
 * LockIdIntermediaryAccountConnection is a struct used to indicate the
 * relationship between the underlying lock id and superfluid delegation done
 * via lp shares.
 *
 * @generated from message osmosis.superfluid.LockIdIntermediaryAccountConnection
 */
export class LockIdIntermediaryAccountConnection extends Message<LockIdIntermediaryAccountConnection> {
  /**
   * @generated from field: uint64 lock_id = 1;
   */
  lockId = protoInt64.zero;

  /**
   * @generated from field: string intermediary_account = 2;
   */
  intermediaryAccount = "";

  constructor(data?: PartialMessage<LockIdIntermediaryAccountConnection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.LockIdIntermediaryAccountConnection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "intermediary_account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockIdIntermediaryAccountConnection {
    return new LockIdIntermediaryAccountConnection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockIdIntermediaryAccountConnection {
    return new LockIdIntermediaryAccountConnection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockIdIntermediaryAccountConnection {
    return new LockIdIntermediaryAccountConnection().fromJsonString(jsonString, options);
  }

  static equals(a: LockIdIntermediaryAccountConnection | PlainMessage<LockIdIntermediaryAccountConnection> | undefined, b: LockIdIntermediaryAccountConnection | PlainMessage<LockIdIntermediaryAccountConnection> | undefined): boolean {
    return proto3.util.equals(LockIdIntermediaryAccountConnection, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.UnpoolWhitelistedPools
 */
export class UnpoolWhitelistedPools extends Message<UnpoolWhitelistedPools> {
  /**
   * @generated from field: repeated uint64 ids = 1;
   */
  ids: bigint[] = [];

  constructor(data?: PartialMessage<UnpoolWhitelistedPools>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.UnpoolWhitelistedPools";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpoolWhitelistedPools {
    return new UnpoolWhitelistedPools().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpoolWhitelistedPools {
    return new UnpoolWhitelistedPools().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpoolWhitelistedPools {
    return new UnpoolWhitelistedPools().fromJsonString(jsonString, options);
  }

  static equals(a: UnpoolWhitelistedPools | PlainMessage<UnpoolWhitelistedPools> | undefined, b: UnpoolWhitelistedPools | PlainMessage<UnpoolWhitelistedPools> | undefined): boolean {
    return proto3.util.equals(UnpoolWhitelistedPools, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.ConcentratedPoolUserPositionRecord
 */
export class ConcentratedPoolUserPositionRecord extends Message<ConcentratedPoolUserPositionRecord> {
  /**
   * @generated from field: string validator_address = 1;
   */
  validatorAddress = "";

  /**
   * @generated from field: uint64 position_id = 2;
   */
  positionId = protoInt64.zero;

  /**
   * @generated from field: uint64 lock_id = 3;
   */
  lockId = protoInt64.zero;

  /**
   * @generated from field: osmosis.lockup.SyntheticLock synthetic_lock = 4;
   */
  syntheticLock?: SyntheticLock;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin delegation_amount = 5;
   */
  delegationAmount?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin equivalent_staked_amount = 6;
   */
  equivalentStakedAmount?: Coin;

  constructor(data?: PartialMessage<ConcentratedPoolUserPositionRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.ConcentratedPoolUserPositionRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "synthetic_lock", kind: "message", T: SyntheticLock },
    { no: 5, name: "delegation_amount", kind: "message", T: Coin },
    { no: 6, name: "equivalent_staked_amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConcentratedPoolUserPositionRecord {
    return new ConcentratedPoolUserPositionRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConcentratedPoolUserPositionRecord {
    return new ConcentratedPoolUserPositionRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConcentratedPoolUserPositionRecord {
    return new ConcentratedPoolUserPositionRecord().fromJsonString(jsonString, options);
  }

  static equals(a: ConcentratedPoolUserPositionRecord | PlainMessage<ConcentratedPoolUserPositionRecord> | undefined, b: ConcentratedPoolUserPositionRecord | PlainMessage<ConcentratedPoolUserPositionRecord> | undefined): boolean {
    return proto3.util.equals(ConcentratedPoolUserPositionRecord, a, b);
  }
}

/**
 * The DenomRiskFactor stores the risk factor of a superfluid asset
 *
 * @generated from message osmosis.superfluid.DenomRiskFactor
 */
export class DenomRiskFactor extends Message<DenomRiskFactor> {
  /**
   * superfluid asset denom, can be LP token or native token
   *
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * risk_factor is to be cut on OSMO equivalent value of the denom tokens
   * for superfluid staking. It defaults to params.minimum_risk_factor
   *
   * @generated from field: string risk_factor = 2;
   */
  riskFactor = "";

  constructor(data?: PartialMessage<DenomRiskFactor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.DenomRiskFactor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "risk_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DenomRiskFactor {
    return new DenomRiskFactor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DenomRiskFactor {
    return new DenomRiskFactor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DenomRiskFactor {
    return new DenomRiskFactor().fromJsonString(jsonString, options);
  }

  static equals(a: DenomRiskFactor | PlainMessage<DenomRiskFactor> | undefined, b: DenomRiskFactor | PlainMessage<DenomRiskFactor> | undefined): boolean {
    return proto3.util.equals(DenomRiskFactor, a, b);
  }
}


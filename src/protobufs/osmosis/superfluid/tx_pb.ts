// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/superfluid/tx.proto (package osmosis.superfluid, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message osmosis.superfluid.MsgSuperfluidDelegate
 */
export class MsgSuperfluidDelegate extends Message<MsgSuperfluidDelegate> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint64 lock_id = 2;
   */
  lockId = protoInt64.zero;

  /**
   * @generated from field: string val_addr = 3;
   */
  valAddr = "";

  constructor(data?: PartialMessage<MsgSuperfluidDelegate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgSuperfluidDelegate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "val_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSuperfluidDelegate {
    return new MsgSuperfluidDelegate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSuperfluidDelegate {
    return new MsgSuperfluidDelegate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSuperfluidDelegate {
    return new MsgSuperfluidDelegate().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSuperfluidDelegate | PlainMessage<MsgSuperfluidDelegate> | undefined, b: MsgSuperfluidDelegate | PlainMessage<MsgSuperfluidDelegate> | undefined): boolean {
    return proto3.util.equals(MsgSuperfluidDelegate, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.MsgSuperfluidDelegateResponse
 */
export class MsgSuperfluidDelegateResponse extends Message<MsgSuperfluidDelegateResponse> {
  constructor(data?: PartialMessage<MsgSuperfluidDelegateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgSuperfluidDelegateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSuperfluidDelegateResponse {
    return new MsgSuperfluidDelegateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSuperfluidDelegateResponse {
    return new MsgSuperfluidDelegateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSuperfluidDelegateResponse {
    return new MsgSuperfluidDelegateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSuperfluidDelegateResponse | PlainMessage<MsgSuperfluidDelegateResponse> | undefined, b: MsgSuperfluidDelegateResponse | PlainMessage<MsgSuperfluidDelegateResponse> | undefined): boolean {
    return proto3.util.equals(MsgSuperfluidDelegateResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.MsgSuperfluidUndelegate
 */
export class MsgSuperfluidUndelegate extends Message<MsgSuperfluidUndelegate> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint64 lock_id = 2;
   */
  lockId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgSuperfluidUndelegate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgSuperfluidUndelegate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSuperfluidUndelegate {
    return new MsgSuperfluidUndelegate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSuperfluidUndelegate {
    return new MsgSuperfluidUndelegate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSuperfluidUndelegate {
    return new MsgSuperfluidUndelegate().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSuperfluidUndelegate | PlainMessage<MsgSuperfluidUndelegate> | undefined, b: MsgSuperfluidUndelegate | PlainMessage<MsgSuperfluidUndelegate> | undefined): boolean {
    return proto3.util.equals(MsgSuperfluidUndelegate, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.MsgSuperfluidUndelegateResponse
 */
export class MsgSuperfluidUndelegateResponse extends Message<MsgSuperfluidUndelegateResponse> {
  constructor(data?: PartialMessage<MsgSuperfluidUndelegateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgSuperfluidUndelegateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSuperfluidUndelegateResponse {
    return new MsgSuperfluidUndelegateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSuperfluidUndelegateResponse {
    return new MsgSuperfluidUndelegateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSuperfluidUndelegateResponse {
    return new MsgSuperfluidUndelegateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSuperfluidUndelegateResponse | PlainMessage<MsgSuperfluidUndelegateResponse> | undefined, b: MsgSuperfluidUndelegateResponse | PlainMessage<MsgSuperfluidUndelegateResponse> | undefined): boolean {
    return proto3.util.equals(MsgSuperfluidUndelegateResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.MsgSuperfluidUnbondLock
 */
export class MsgSuperfluidUnbondLock extends Message<MsgSuperfluidUnbondLock> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint64 lock_id = 2;
   */
  lockId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgSuperfluidUnbondLock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgSuperfluidUnbondLock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSuperfluidUnbondLock {
    return new MsgSuperfluidUnbondLock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSuperfluidUnbondLock {
    return new MsgSuperfluidUnbondLock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSuperfluidUnbondLock {
    return new MsgSuperfluidUnbondLock().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSuperfluidUnbondLock | PlainMessage<MsgSuperfluidUnbondLock> | undefined, b: MsgSuperfluidUnbondLock | PlainMessage<MsgSuperfluidUnbondLock> | undefined): boolean {
    return proto3.util.equals(MsgSuperfluidUnbondLock, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.MsgSuperfluidUnbondLockResponse
 */
export class MsgSuperfluidUnbondLockResponse extends Message<MsgSuperfluidUnbondLockResponse> {
  constructor(data?: PartialMessage<MsgSuperfluidUnbondLockResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgSuperfluidUnbondLockResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSuperfluidUnbondLockResponse {
    return new MsgSuperfluidUnbondLockResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSuperfluidUnbondLockResponse {
    return new MsgSuperfluidUnbondLockResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSuperfluidUnbondLockResponse {
    return new MsgSuperfluidUnbondLockResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSuperfluidUnbondLockResponse | PlainMessage<MsgSuperfluidUnbondLockResponse> | undefined, b: MsgSuperfluidUnbondLockResponse | PlainMessage<MsgSuperfluidUnbondLockResponse> | undefined): boolean {
    return proto3.util.equals(MsgSuperfluidUnbondLockResponse, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLock
 */
export class MsgSuperfluidUndelegateAndUnbondLock extends Message<MsgSuperfluidUndelegateAndUnbondLock> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint64 lock_id = 2;
   */
  lockId = protoInt64.zero;

  /**
   * Amount of unlocking coin.
   *
   * @generated from field: cosmos.base.v1beta1.Coin coin = 3;
   */
  coin?: Coin;

  constructor(data?: PartialMessage<MsgSuperfluidUndelegateAndUnbondLock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "coin", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSuperfluidUndelegateAndUnbondLock {
    return new MsgSuperfluidUndelegateAndUnbondLock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSuperfluidUndelegateAndUnbondLock {
    return new MsgSuperfluidUndelegateAndUnbondLock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSuperfluidUndelegateAndUnbondLock {
    return new MsgSuperfluidUndelegateAndUnbondLock().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSuperfluidUndelegateAndUnbondLock | PlainMessage<MsgSuperfluidUndelegateAndUnbondLock> | undefined, b: MsgSuperfluidUndelegateAndUnbondLock | PlainMessage<MsgSuperfluidUndelegateAndUnbondLock> | undefined): boolean {
    return proto3.util.equals(MsgSuperfluidUndelegateAndUnbondLock, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLockResponse
 */
export class MsgSuperfluidUndelegateAndUnbondLockResponse extends Message<MsgSuperfluidUndelegateAndUnbondLockResponse> {
  /**
   * lock id of the new lock created for the remaining amount.
   * returns the original lockid if the unlocked amount is equal to the
   * original lock's amount.
   *
   * @generated from field: uint64 lock_id = 1;
   */
  lockId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgSuperfluidUndelegateAndUnbondLockResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLockResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSuperfluidUndelegateAndUnbondLockResponse {
    return new MsgSuperfluidUndelegateAndUnbondLockResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSuperfluidUndelegateAndUnbondLockResponse {
    return new MsgSuperfluidUndelegateAndUnbondLockResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSuperfluidUndelegateAndUnbondLockResponse {
    return new MsgSuperfluidUndelegateAndUnbondLockResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSuperfluidUndelegateAndUnbondLockResponse | PlainMessage<MsgSuperfluidUndelegateAndUnbondLockResponse> | undefined, b: MsgSuperfluidUndelegateAndUnbondLockResponse | PlainMessage<MsgSuperfluidUndelegateAndUnbondLockResponse> | undefined): boolean {
    return proto3.util.equals(MsgSuperfluidUndelegateAndUnbondLockResponse, a, b);
  }
}

/**
 * MsgLockAndSuperfluidDelegate locks coins with the unbonding period duration,
 * and then does a superfluid lock from the newly created lockup, to the
 * specified validator addr.
 *
 * @generated from message osmosis.superfluid.MsgLockAndSuperfluidDelegate
 */
export class MsgLockAndSuperfluidDelegate extends Message<MsgLockAndSuperfluidDelegate> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 2;
   */
  coins: Coin[] = [];

  /**
   * @generated from field: string val_addr = 3;
   */
  valAddr = "";

  constructor(data?: PartialMessage<MsgLockAndSuperfluidDelegate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgLockAndSuperfluidDelegate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "coins", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "val_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLockAndSuperfluidDelegate {
    return new MsgLockAndSuperfluidDelegate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLockAndSuperfluidDelegate {
    return new MsgLockAndSuperfluidDelegate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLockAndSuperfluidDelegate {
    return new MsgLockAndSuperfluidDelegate().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLockAndSuperfluidDelegate | PlainMessage<MsgLockAndSuperfluidDelegate> | undefined, b: MsgLockAndSuperfluidDelegate | PlainMessage<MsgLockAndSuperfluidDelegate> | undefined): boolean {
    return proto3.util.equals(MsgLockAndSuperfluidDelegate, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse
 */
export class MsgLockAndSuperfluidDelegateResponse extends Message<MsgLockAndSuperfluidDelegateResponse> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID = protoInt64.zero;

  constructor(data?: PartialMessage<MsgLockAndSuperfluidDelegateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLockAndSuperfluidDelegateResponse {
    return new MsgLockAndSuperfluidDelegateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLockAndSuperfluidDelegateResponse {
    return new MsgLockAndSuperfluidDelegateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLockAndSuperfluidDelegateResponse {
    return new MsgLockAndSuperfluidDelegateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLockAndSuperfluidDelegateResponse | PlainMessage<MsgLockAndSuperfluidDelegateResponse> | undefined, b: MsgLockAndSuperfluidDelegateResponse | PlainMessage<MsgLockAndSuperfluidDelegateResponse> | undefined): boolean {
    return proto3.util.equals(MsgLockAndSuperfluidDelegateResponse, a, b);
  }
}

/**
 * MsgCreateFullRangePositionAndSuperfluidDelegate creates a full range position
 * in a concentrated liquidity pool, then superfluid delegates.
 *
 * @generated from message osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegate
 */
export class MsgCreateFullRangePositionAndSuperfluidDelegate extends Message<MsgCreateFullRangePositionAndSuperfluidDelegate> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 2;
   */
  coins: Coin[] = [];

  /**
   * @generated from field: string val_addr = 3;
   */
  valAddr = "";

  /**
   * @generated from field: uint64 pool_id = 4;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgCreateFullRangePositionAndSuperfluidDelegate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "coins", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "val_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateFullRangePositionAndSuperfluidDelegate {
    return new MsgCreateFullRangePositionAndSuperfluidDelegate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateFullRangePositionAndSuperfluidDelegate {
    return new MsgCreateFullRangePositionAndSuperfluidDelegate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateFullRangePositionAndSuperfluidDelegate {
    return new MsgCreateFullRangePositionAndSuperfluidDelegate().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateFullRangePositionAndSuperfluidDelegate | PlainMessage<MsgCreateFullRangePositionAndSuperfluidDelegate> | undefined, b: MsgCreateFullRangePositionAndSuperfluidDelegate | PlainMessage<MsgCreateFullRangePositionAndSuperfluidDelegate> | undefined): boolean {
    return proto3.util.equals(MsgCreateFullRangePositionAndSuperfluidDelegate, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegateResponse
 */
export class MsgCreateFullRangePositionAndSuperfluidDelegateResponse extends Message<MsgCreateFullRangePositionAndSuperfluidDelegateResponse> {
  /**
   * @generated from field: uint64 lockID = 1;
   */
  lockID = protoInt64.zero;

  /**
   * @generated from field: uint64 positionID = 2;
   */
  positionID = protoInt64.zero;

  constructor(data?: PartialMessage<MsgCreateFullRangePositionAndSuperfluidDelegateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lockID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "positionID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateFullRangePositionAndSuperfluidDelegateResponse {
    return new MsgCreateFullRangePositionAndSuperfluidDelegateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateFullRangePositionAndSuperfluidDelegateResponse {
    return new MsgCreateFullRangePositionAndSuperfluidDelegateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateFullRangePositionAndSuperfluidDelegateResponse {
    return new MsgCreateFullRangePositionAndSuperfluidDelegateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateFullRangePositionAndSuperfluidDelegateResponse | PlainMessage<MsgCreateFullRangePositionAndSuperfluidDelegateResponse> | undefined, b: MsgCreateFullRangePositionAndSuperfluidDelegateResponse | PlainMessage<MsgCreateFullRangePositionAndSuperfluidDelegateResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateFullRangePositionAndSuperfluidDelegateResponse, a, b);
  }
}

/**
 * MsgUnPoolWhitelistedPool Unpools every lock the sender has, that is
 * associated with pool pool_id. If pool_id is not approved for unpooling by
 * governance, this is a no-op. Unpooling takes the locked gamm shares, and runs
 * "ExitPool" on it, to get the constituent tokens. e.g. z gamm/pool/1 tokens
 * ExitPools into constituent tokens x uatom, y uosmo. Then it creates a new
 * lock for every constituent token, with the duration associated with the lock.
 * If the lock was unbonding, the new lockup durations should be the time left
 * until unbond completion.
 *
 * @generated from message osmosis.superfluid.MsgUnPoolWhitelistedPool
 */
export class MsgUnPoolWhitelistedPool extends Message<MsgUnPoolWhitelistedPool> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgUnPoolWhitelistedPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgUnPoolWhitelistedPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnPoolWhitelistedPool {
    return new MsgUnPoolWhitelistedPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnPoolWhitelistedPool {
    return new MsgUnPoolWhitelistedPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnPoolWhitelistedPool {
    return new MsgUnPoolWhitelistedPool().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnPoolWhitelistedPool | PlainMessage<MsgUnPoolWhitelistedPool> | undefined, b: MsgUnPoolWhitelistedPool | PlainMessage<MsgUnPoolWhitelistedPool> | undefined): boolean {
    return proto3.util.equals(MsgUnPoolWhitelistedPool, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse
 */
export class MsgUnPoolWhitelistedPoolResponse extends Message<MsgUnPoolWhitelistedPoolResponse> {
  /**
   * @generated from field: repeated uint64 exited_lock_ids = 1;
   */
  exitedLockIds: bigint[] = [];

  constructor(data?: PartialMessage<MsgUnPoolWhitelistedPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exited_lock_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnPoolWhitelistedPoolResponse {
    return new MsgUnPoolWhitelistedPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnPoolWhitelistedPoolResponse {
    return new MsgUnPoolWhitelistedPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnPoolWhitelistedPoolResponse {
    return new MsgUnPoolWhitelistedPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnPoolWhitelistedPoolResponse | PlainMessage<MsgUnPoolWhitelistedPoolResponse> | undefined, b: MsgUnPoolWhitelistedPoolResponse | PlainMessage<MsgUnPoolWhitelistedPoolResponse> | undefined): boolean {
    return proto3.util.equals(MsgUnPoolWhitelistedPoolResponse, a, b);
  }
}

/**
 * =====================
 * MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition
 *
 * @generated from message osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition
 */
export class MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition extends Message<MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: int64 lock_id = 2;
   */
  lockId = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin shares_to_migrate = 3;
   */
  sharesToMigrate?: Coin;

  /**
   * token_out_mins indicates minimum token to exit Balancer pool with.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin token_out_mins = 4;
   */
  tokenOutMins: Coin[] = [];

  constructor(data?: PartialMessage<MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lock_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "shares_to_migrate", kind: "message", T: Coin },
    { no: 4, name: "token_out_mins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition {
    return new MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition {
    return new MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition {
    return new MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition | PlainMessage<MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition> | undefined, b: MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition | PlainMessage<MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition> | undefined): boolean {
    return proto3.util.equals(MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse
 */
export class MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse extends Message<MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse> {
  /**
   * @generated from field: string amount0 = 1;
   */
  amount0 = "";

  /**
   * @generated from field: string amount1 = 2;
   */
  amount1 = "";

  /**
   * @generated from field: string liquidity_created = 3;
   */
  liquidityCreated = "";

  /**
   * @generated from field: google.protobuf.Timestamp join_time = 4;
   */
  joinTime?: Timestamp;

  constructor(data?: PartialMessage<MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "liquidity_created", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "join_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse {
    return new MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse {
    return new MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse {
    return new MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse | PlainMessage<MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse> | undefined, b: MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse | PlainMessage<MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse> | undefined): boolean {
    return proto3.util.equals(MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse, a, b);
  }
}

/**
 * ===================== MsgAddToConcentratedLiquiditySuperfluidPosition
 *
 * @generated from message osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPosition
 */
export class MsgAddToConcentratedLiquiditySuperfluidPosition extends Message<MsgAddToConcentratedLiquiditySuperfluidPosition> {
  /**
   * @generated from field: uint64 position_id = 1;
   */
  positionId = protoInt64.zero;

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_desired0 = 3;
   */
  tokenDesired0?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_desired1 = 4;
   */
  tokenDesired1?: Coin;

  constructor(data?: PartialMessage<MsgAddToConcentratedLiquiditySuperfluidPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_desired0", kind: "message", T: Coin },
    { no: 4, name: "token_desired1", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddToConcentratedLiquiditySuperfluidPosition {
    return new MsgAddToConcentratedLiquiditySuperfluidPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddToConcentratedLiquiditySuperfluidPosition {
    return new MsgAddToConcentratedLiquiditySuperfluidPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddToConcentratedLiquiditySuperfluidPosition {
    return new MsgAddToConcentratedLiquiditySuperfluidPosition().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddToConcentratedLiquiditySuperfluidPosition | PlainMessage<MsgAddToConcentratedLiquiditySuperfluidPosition> | undefined, b: MsgAddToConcentratedLiquiditySuperfluidPosition | PlainMessage<MsgAddToConcentratedLiquiditySuperfluidPosition> | undefined): boolean {
    return proto3.util.equals(MsgAddToConcentratedLiquiditySuperfluidPosition, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPositionResponse
 */
export class MsgAddToConcentratedLiquiditySuperfluidPositionResponse extends Message<MsgAddToConcentratedLiquiditySuperfluidPositionResponse> {
  /**
   * @generated from field: uint64 position_id = 1;
   */
  positionId = protoInt64.zero;

  /**
   * @generated from field: string amount0 = 2;
   */
  amount0 = "";

  /**
   * @generated from field: string amount1 = 3;
   */
  amount1 = "";

  /**
   * new_liquidity is the final liquidity after the add.
   * It includes the liquidity that existed before in the position
   * and the new liquidity that was added to the position.
   *
   * @generated from field: string new_liquidity = 5;
   */
  newLiquidity = "";

  /**
   * @generated from field: uint64 lock_id = 4;
   */
  lockId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgAddToConcentratedLiquiditySuperfluidPositionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPositionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "amount0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "new_liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddToConcentratedLiquiditySuperfluidPositionResponse {
    return new MsgAddToConcentratedLiquiditySuperfluidPositionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddToConcentratedLiquiditySuperfluidPositionResponse {
    return new MsgAddToConcentratedLiquiditySuperfluidPositionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddToConcentratedLiquiditySuperfluidPositionResponse {
    return new MsgAddToConcentratedLiquiditySuperfluidPositionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddToConcentratedLiquiditySuperfluidPositionResponse | PlainMessage<MsgAddToConcentratedLiquiditySuperfluidPositionResponse> | undefined, b: MsgAddToConcentratedLiquiditySuperfluidPositionResponse | PlainMessage<MsgAddToConcentratedLiquiditySuperfluidPositionResponse> | undefined): boolean {
    return proto3.util.equals(MsgAddToConcentratedLiquiditySuperfluidPositionResponse, a, b);
  }
}

/**
 * ===================== MsgUnbondConvertAndStake
 *
 * @generated from message osmosis.superfluid.MsgUnbondConvertAndStake
 */
export class MsgUnbondConvertAndStake extends Message<MsgUnbondConvertAndStake> {
  /**
   * lock ID to convert and stake.
   * lock id with 0 should be provided if converting liquid gamm shares to stake
   *
   * @generated from field: uint64 lock_id = 1;
   */
  lockId = protoInt64.zero;

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * validator address to delegate to.
   * If provided empty string, we use the validators returned from
   * valset-preference module.
   *
   * @generated from field: string val_addr = 3;
   */
  valAddr = "";

  /**
   * min_amt_to_stake indicates the minimum amount to stake after conversion
   *
   * @generated from field: string min_amt_to_stake = 4;
   */
  minAmtToStake = "";

  /**
   * shares_to_convert indicates shares wanted to stake.
   * Note that this field is only used for liquid(unlocked) gamm shares.
   * For all other cases, this field would be disregarded.
   *
   * @generated from field: cosmos.base.v1beta1.Coin shares_to_convert = 5;
   */
  sharesToConvert?: Coin;

  constructor(data?: PartialMessage<MsgUnbondConvertAndStake>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgUnbondConvertAndStake";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lock_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "val_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "min_amt_to_stake", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "shares_to_convert", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnbondConvertAndStake {
    return new MsgUnbondConvertAndStake().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnbondConvertAndStake {
    return new MsgUnbondConvertAndStake().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnbondConvertAndStake {
    return new MsgUnbondConvertAndStake().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnbondConvertAndStake | PlainMessage<MsgUnbondConvertAndStake> | undefined, b: MsgUnbondConvertAndStake | PlainMessage<MsgUnbondConvertAndStake> | undefined): boolean {
    return proto3.util.equals(MsgUnbondConvertAndStake, a, b);
  }
}

/**
 * @generated from message osmosis.superfluid.MsgUnbondConvertAndStakeResponse
 */
export class MsgUnbondConvertAndStakeResponse extends Message<MsgUnbondConvertAndStakeResponse> {
  /**
   * @generated from field: string total_amt_staked = 1;
   */
  totalAmtStaked = "";

  constructor(data?: PartialMessage<MsgUnbondConvertAndStakeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.superfluid.MsgUnbondConvertAndStakeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_amt_staked", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnbondConvertAndStakeResponse {
    return new MsgUnbondConvertAndStakeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnbondConvertAndStakeResponse {
    return new MsgUnbondConvertAndStakeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnbondConvertAndStakeResponse {
    return new MsgUnbondConvertAndStakeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnbondConvertAndStakeResponse | PlainMessage<MsgUnbondConvertAndStakeResponse> | undefined, b: MsgUnbondConvertAndStakeResponse | PlainMessage<MsgUnbondConvertAndStakeResponse> | undefined): boolean {
    return proto3.util.equals(MsgUnbondConvertAndStakeResponse, a, b);
  }
}


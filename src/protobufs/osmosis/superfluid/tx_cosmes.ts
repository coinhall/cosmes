// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file osmosis/superfluid/tx.proto (package osmosis.superfluid, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MsgAddToConcentratedLiquiditySuperfluidPosition, MsgAddToConcentratedLiquiditySuperfluidPositionResponse, MsgCreateFullRangePositionAndSuperfluidDelegate, MsgCreateFullRangePositionAndSuperfluidDelegateResponse, MsgLockAndSuperfluidDelegate, MsgLockAndSuperfluidDelegateResponse, MsgSuperfluidDelegate, MsgSuperfluidDelegateResponse, MsgSuperfluidUnbondLock, MsgSuperfluidUnbondLockResponse, MsgSuperfluidUndelegate, MsgSuperfluidUndelegateAndUnbondLock, MsgSuperfluidUndelegateAndUnbondLockResponse, MsgSuperfluidUndelegateResponse, MsgUnbondConvertAndStake, MsgUnbondConvertAndStakeResponse, MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition, MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse, MsgUnPoolWhitelistedPool, MsgUnPoolWhitelistedPoolResponse } from "./tx_pb.js";

const TYPE_NAME = "osmosis.superfluid.Msg";

/**
 * Execute superfluid delegation for a lockup
 *
 * @generated from rpc osmosis.superfluid.Msg.SuperfluidDelegate
 */
export const MsgSuperfluidDelegateService = {
  typeName: TYPE_NAME,
  method: "SuperfluidDelegate",
  Request: MsgSuperfluidDelegate,
  Response: MsgSuperfluidDelegateResponse,
} as const;

/**
 * Execute superfluid undelegation for a lockup
 *
 * @generated from rpc osmosis.superfluid.Msg.SuperfluidUndelegate
 */
export const MsgSuperfluidUndelegateService = {
  typeName: TYPE_NAME,
  method: "SuperfluidUndelegate",
  Request: MsgSuperfluidUndelegate,
  Response: MsgSuperfluidUndelegateResponse,
} as const;

/**
 * For a given lock that is being superfluidly undelegated,
 * also unbond the underlying lock.
 *
 * @generated from rpc osmosis.superfluid.Msg.SuperfluidUnbondLock
 */
export const MsgSuperfluidUnbondLockService = {
  typeName: TYPE_NAME,
  method: "SuperfluidUnbondLock",
  Request: MsgSuperfluidUnbondLock,
  Response: MsgSuperfluidUnbondLockResponse,
} as const;

/**
 * Superfluid undelegate and unbond partial amount of the underlying lock.
 *
 * @generated from rpc osmosis.superfluid.Msg.SuperfluidUndelegateAndUnbondLock
 */
export const MsgSuperfluidUndelegateAndUnbondLockService = {
  typeName: TYPE_NAME,
  method: "SuperfluidUndelegateAndUnbondLock",
  Request: MsgSuperfluidUndelegateAndUnbondLock,
  Response: MsgSuperfluidUndelegateAndUnbondLockResponse,
} as const;

/**
 * Execute lockup lock and superfluid delegation in a single msg
 *
 * @generated from rpc osmosis.superfluid.Msg.LockAndSuperfluidDelegate
 */
export const MsgLockAndSuperfluidDelegateService = {
  typeName: TYPE_NAME,
  method: "LockAndSuperfluidDelegate",
  Request: MsgLockAndSuperfluidDelegate,
  Response: MsgLockAndSuperfluidDelegateResponse,
} as const;

/**
 * @generated from rpc osmosis.superfluid.Msg.CreateFullRangePositionAndSuperfluidDelegate
 */
export const MsgCreateFullRangePositionAndSuperfluidDelegateService = {
  typeName: TYPE_NAME,
  method: "CreateFullRangePositionAndSuperfluidDelegate",
  Request: MsgCreateFullRangePositionAndSuperfluidDelegate,
  Response: MsgCreateFullRangePositionAndSuperfluidDelegateResponse,
} as const;

/**
 * @generated from rpc osmosis.superfluid.Msg.UnPoolWhitelistedPool
 */
export const MsgUnPoolWhitelistedPoolService = {
  typeName: TYPE_NAME,
  method: "UnPoolWhitelistedPool",
  Request: MsgUnPoolWhitelistedPool,
  Response: MsgUnPoolWhitelistedPoolResponse,
} as const;

/**
 * @generated from rpc osmosis.superfluid.Msg.UnlockAndMigrateSharesToFullRangeConcentratedPosition
 */
export const MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionService = {
  typeName: TYPE_NAME,
  method: "UnlockAndMigrateSharesToFullRangeConcentratedPosition",
  Request: MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition,
  Response: MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse,
} as const;

/**
 * @generated from rpc osmosis.superfluid.Msg.AddToConcentratedLiquiditySuperfluidPosition
 */
export const MsgAddToConcentratedLiquiditySuperfluidPositionService = {
  typeName: TYPE_NAME,
  method: "AddToConcentratedLiquiditySuperfluidPosition",
  Request: MsgAddToConcentratedLiquiditySuperfluidPosition,
  Response: MsgAddToConcentratedLiquiditySuperfluidPositionResponse,
} as const;

/**
 * UnbondConvertAndStake breaks all locks / superfluid staked assets,
 * converts them to osmo then stakes the osmo to the designated validator.
 *
 * @generated from rpc osmosis.superfluid.Msg.UnbondConvertAndStake
 */
export const MsgUnbondConvertAndStakeService = {
  typeName: TYPE_NAME,
  method: "UnbondConvertAndStake",
  Request: MsgUnbondConvertAndStake,
  Response: MsgUnbondConvertAndStakeResponse,
} as const;


// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/gamm/v1beta1/gov.proto (package osmosis.gamm.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BalancerToConcentratedPoolLink } from "./shared_pb.js";

/**
 * ReplaceMigrationRecordsProposal is a gov Content type for updating the
 * migration records. If a ReplaceMigrationRecordsProposal passes, the
 * proposalâ€™s records override the existing MigrationRecords set in the module.
 * Each record specifies a single connection between a single balancer pool and
 * a single concentrated pool.
 *
 * @generated from message osmosis.gamm.v1beta1.ReplaceMigrationRecordsProposal
 */
export class ReplaceMigrationRecordsProposal extends Message<ReplaceMigrationRecordsProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated osmosis.gamm.v1beta1.BalancerToConcentratedPoolLink records = 3;
   */
  records: BalancerToConcentratedPoolLink[] = [];

  constructor(data?: PartialMessage<ReplaceMigrationRecordsProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.ReplaceMigrationRecordsProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "records", kind: "message", T: BalancerToConcentratedPoolLink, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReplaceMigrationRecordsProposal {
    return new ReplaceMigrationRecordsProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReplaceMigrationRecordsProposal {
    return new ReplaceMigrationRecordsProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReplaceMigrationRecordsProposal {
    return new ReplaceMigrationRecordsProposal().fromJsonString(jsonString, options);
  }

  static equals(a: ReplaceMigrationRecordsProposal | PlainMessage<ReplaceMigrationRecordsProposal> | undefined, b: ReplaceMigrationRecordsProposal | PlainMessage<ReplaceMigrationRecordsProposal> | undefined): boolean {
    return proto3.util.equals(ReplaceMigrationRecordsProposal, a, b);
  }
}

/**
 * For example: if the existing DistrRecords were:
 * [(Balancer 1, CL 5), (Balancer 2, CL 6), (Balancer 3, CL 7)]
 * And an UpdateMigrationRecordsProposal includes
 * [(Balancer 2, CL 0), (Balancer 3, CL 4), (Balancer 4, CL 10)]
 * This would leave Balancer 1 record, delete Balancer 2 record,
 * Edit Balancer 3 record, and Add Balancer 4 record
 * The result MigrationRecords in state would be:
 * [(Balancer 1, CL 5), (Balancer 3, CL 4), (Balancer 4, CL 10)]
 *
 * @generated from message osmosis.gamm.v1beta1.UpdateMigrationRecordsProposal
 */
export class UpdateMigrationRecordsProposal extends Message<UpdateMigrationRecordsProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated osmosis.gamm.v1beta1.BalancerToConcentratedPoolLink records = 3;
   */
  records: BalancerToConcentratedPoolLink[] = [];

  constructor(data?: PartialMessage<UpdateMigrationRecordsProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.UpdateMigrationRecordsProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "records", kind: "message", T: BalancerToConcentratedPoolLink, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMigrationRecordsProposal {
    return new UpdateMigrationRecordsProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMigrationRecordsProposal {
    return new UpdateMigrationRecordsProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMigrationRecordsProposal {
    return new UpdateMigrationRecordsProposal().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateMigrationRecordsProposal | PlainMessage<UpdateMigrationRecordsProposal> | undefined, b: UpdateMigrationRecordsProposal | PlainMessage<UpdateMigrationRecordsProposal> | undefined): boolean {
    return proto3.util.equals(UpdateMigrationRecordsProposal, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.PoolRecordWithCFMMLink
 */
export class PoolRecordWithCFMMLink extends Message<PoolRecordWithCFMMLink> {
  /**
   * @generated from field: string denom0 = 1;
   */
  denom0 = "";

  /**
   * @generated from field: string denom1 = 2;
   */
  denom1 = "";

  /**
   * @generated from field: uint64 tick_spacing = 3;
   */
  tickSpacing = protoInt64.zero;

  /**
   * @generated from field: string exponent_at_price_one = 4;
   */
  exponentAtPriceOne = "";

  /**
   * @generated from field: string spread_factor = 5;
   */
  spreadFactor = "";

  /**
   * @generated from field: uint64 balancer_pool_id = 6;
   */
  balancerPoolId = protoInt64.zero;

  constructor(data?: PartialMessage<PoolRecordWithCFMMLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.PoolRecordWithCFMMLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tick_spacing", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "exponent_at_price_one", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "spread_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "balancer_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolRecordWithCFMMLink {
    return new PoolRecordWithCFMMLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolRecordWithCFMMLink {
    return new PoolRecordWithCFMMLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolRecordWithCFMMLink {
    return new PoolRecordWithCFMMLink().fromJsonString(jsonString, options);
  }

  static equals(a: PoolRecordWithCFMMLink | PlainMessage<PoolRecordWithCFMMLink> | undefined, b: PoolRecordWithCFMMLink | PlainMessage<PoolRecordWithCFMMLink> | undefined): boolean {
    return proto3.util.equals(PoolRecordWithCFMMLink, a, b);
  }
}

/**
 * CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal is a gov Content type
 * for creating concentrated liquidity pools and linking it to a CFMM pool.
 *
 * @generated from message osmosis.gamm.v1beta1.CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal
 */
export class CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal extends Message<CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated osmosis.gamm.v1beta1.PoolRecordWithCFMMLink pool_records_with_cfmm_link = 3;
   */
  poolRecordsWithCfmmLink: PoolRecordWithCFMMLink[] = [];

  constructor(data?: PartialMessage<CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pool_records_with_cfmm_link", kind: "message", T: PoolRecordWithCFMMLink, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal {
    return new CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal {
    return new CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal {
    return new CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal().fromJsonString(jsonString, options);
  }

  static equals(a: CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal | PlainMessage<CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal> | undefined, b: CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal | PlainMessage<CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal> | undefined): boolean {
    return proto3.util.equals(CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal, a, b);
  }
}

/**
 * SetScalingFactorControllerProposal is a gov Content type for updating the
 * scaling factor controller address of a stableswap pool
 *
 * @generated from message osmosis.gamm.v1beta1.SetScalingFactorControllerProposal
 */
export class SetScalingFactorControllerProposal extends Message<SetScalingFactorControllerProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: uint64 pool_id = 3;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string controller_address = 4;
   */
  controllerAddress = "";

  constructor(data?: PartialMessage<SetScalingFactorControllerProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.SetScalingFactorControllerProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "controller_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetScalingFactorControllerProposal {
    return new SetScalingFactorControllerProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetScalingFactorControllerProposal {
    return new SetScalingFactorControllerProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetScalingFactorControllerProposal {
    return new SetScalingFactorControllerProposal().fromJsonString(jsonString, options);
  }

  static equals(a: SetScalingFactorControllerProposal | PlainMessage<SetScalingFactorControllerProposal> | undefined, b: SetScalingFactorControllerProposal | PlainMessage<SetScalingFactorControllerProposal> | undefined): boolean {
    return proto3.util.equals(SetScalingFactorControllerProposal, a, b);
  }
}


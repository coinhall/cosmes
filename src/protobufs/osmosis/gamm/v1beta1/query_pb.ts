// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/gamm/v1beta1/query.proto (package osmosis.gamm.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { SwapAmountInRoute, SwapAmountOutRoute } from "../../poolmanager/v1beta1/swap_route_pb.js";
import { MigrationRecords } from "./shared_pb.js";

/**
 * =============================== Pool
 * Deprecated: please use the alternative in x/poolmanager
 *
 * @generated from message osmosis.gamm.v1beta1.QueryPoolRequest
 * @deprecated
 */
export class QueryPoolRequest extends Message<QueryPoolRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolRequest {
    return new QueryPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolRequest {
    return new QueryPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolRequest {
    return new QueryPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolRequest | PlainMessage<QueryPoolRequest> | undefined, b: QueryPoolRequest | PlainMessage<QueryPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolRequest, a, b);
  }
}

/**
 * Deprecated: please use the alternative in x/poolmanager
 *
 * @generated from message osmosis.gamm.v1beta1.QueryPoolResponse
 * @deprecated
 */
export class QueryPoolResponse extends Message<QueryPoolResponse> {
  /**
   * @generated from field: google.protobuf.Any pool = 1;
   */
  pool?: Any;

  constructor(data?: PartialMessage<QueryPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolResponse | PlainMessage<QueryPoolResponse> | undefined, b: QueryPoolResponse | PlainMessage<QueryPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolResponse, a, b);
  }
}

/**
 * =============================== Pools
 *
 * @generated from message osmosis.gamm.v1beta1.QueryPoolsRequest
 */
export class QueryPoolsRequest extends Message<QueryPoolsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryPoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolsRequest {
    return new QueryPoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolsRequest {
    return new QueryPoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolsRequest {
    return new QueryPoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolsRequest | PlainMessage<QueryPoolsRequest> | undefined, b: QueryPoolsRequest | PlainMessage<QueryPoolsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QueryPoolsResponse
 */
export class QueryPoolsResponse extends Message<QueryPoolsResponse> {
  /**
   * @generated from field: repeated google.protobuf.Any pools = 1;
   */
  pools: Any[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryPoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryPoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: Any, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolsResponse {
    return new QueryPoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolsResponse {
    return new QueryPoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolsResponse {
    return new QueryPoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolsResponse | PlainMessage<QueryPoolsResponse> | undefined, b: QueryPoolsResponse | PlainMessage<QueryPoolsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolsResponse, a, b);
  }
}

/**
 * =============================== NumPools
 *
 * @generated from message osmosis.gamm.v1beta1.QueryNumPoolsRequest
 * @deprecated
 */
export class QueryNumPoolsRequest extends Message<QueryNumPoolsRequest> {
  constructor(data?: PartialMessage<QueryNumPoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryNumPoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNumPoolsRequest {
    return new QueryNumPoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNumPoolsRequest {
    return new QueryNumPoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNumPoolsRequest {
    return new QueryNumPoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNumPoolsRequest | PlainMessage<QueryNumPoolsRequest> | undefined, b: QueryNumPoolsRequest | PlainMessage<QueryNumPoolsRequest> | undefined): boolean {
    return proto3.util.equals(QueryNumPoolsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QueryNumPoolsResponse
 * @deprecated
 */
export class QueryNumPoolsResponse extends Message<QueryNumPoolsResponse> {
  /**
   * @generated from field: uint64 num_pools = 1;
   */
  numPools = protoInt64.zero;

  constructor(data?: PartialMessage<QueryNumPoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryNumPoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "num_pools", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNumPoolsResponse {
    return new QueryNumPoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNumPoolsResponse {
    return new QueryNumPoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNumPoolsResponse {
    return new QueryNumPoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNumPoolsResponse | PlainMessage<QueryNumPoolsResponse> | undefined, b: QueryNumPoolsResponse | PlainMessage<QueryNumPoolsResponse> | undefined): boolean {
    return proto3.util.equals(QueryNumPoolsResponse, a, b);
  }
}

/**
 * =============================== PoolType
 *
 * @generated from message osmosis.gamm.v1beta1.QueryPoolTypeRequest
 */
export class QueryPoolTypeRequest extends Message<QueryPoolTypeRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPoolTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryPoolTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolTypeRequest {
    return new QueryPoolTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolTypeRequest {
    return new QueryPoolTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolTypeRequest {
    return new QueryPoolTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolTypeRequest | PlainMessage<QueryPoolTypeRequest> | undefined, b: QueryPoolTypeRequest | PlainMessage<QueryPoolTypeRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolTypeRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QueryPoolTypeResponse
 */
export class QueryPoolTypeResponse extends Message<QueryPoolTypeResponse> {
  /**
   * @generated from field: string pool_type = 1;
   */
  poolType = "";

  constructor(data?: PartialMessage<QueryPoolTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryPoolTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolTypeResponse {
    return new QueryPoolTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolTypeResponse {
    return new QueryPoolTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolTypeResponse {
    return new QueryPoolTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolTypeResponse | PlainMessage<QueryPoolTypeResponse> | undefined, b: QueryPoolTypeResponse | PlainMessage<QueryPoolTypeResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolTypeResponse, a, b);
  }
}

/**
 * =============================== CalcJoinPoolShares
 *
 * @generated from message osmosis.gamm.v1beta1.QueryCalcJoinPoolSharesRequest
 */
export class QueryCalcJoinPoolSharesRequest extends Message<QueryCalcJoinPoolSharesRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin tokens_in = 2;
   */
  tokensIn: Coin[] = [];

  constructor(data?: PartialMessage<QueryCalcJoinPoolSharesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryCalcJoinPoolSharesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "tokens_in", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalcJoinPoolSharesRequest {
    return new QueryCalcJoinPoolSharesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalcJoinPoolSharesRequest {
    return new QueryCalcJoinPoolSharesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalcJoinPoolSharesRequest {
    return new QueryCalcJoinPoolSharesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalcJoinPoolSharesRequest | PlainMessage<QueryCalcJoinPoolSharesRequest> | undefined, b: QueryCalcJoinPoolSharesRequest | PlainMessage<QueryCalcJoinPoolSharesRequest> | undefined): boolean {
    return proto3.util.equals(QueryCalcJoinPoolSharesRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QueryCalcJoinPoolSharesResponse
 */
export class QueryCalcJoinPoolSharesResponse extends Message<QueryCalcJoinPoolSharesResponse> {
  /**
   * @generated from field: string share_out_amount = 1;
   */
  shareOutAmount = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin tokens_out = 2;
   */
  tokensOut: Coin[] = [];

  constructor(data?: PartialMessage<QueryCalcJoinPoolSharesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryCalcJoinPoolSharesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "share_out_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tokens_out", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalcJoinPoolSharesResponse {
    return new QueryCalcJoinPoolSharesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalcJoinPoolSharesResponse {
    return new QueryCalcJoinPoolSharesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalcJoinPoolSharesResponse {
    return new QueryCalcJoinPoolSharesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalcJoinPoolSharesResponse | PlainMessage<QueryCalcJoinPoolSharesResponse> | undefined, b: QueryCalcJoinPoolSharesResponse | PlainMessage<QueryCalcJoinPoolSharesResponse> | undefined): boolean {
    return proto3.util.equals(QueryCalcJoinPoolSharesResponse, a, b);
  }
}

/**
 * =============================== CalcExitPoolCoinsFromShares
 *
 * @generated from message osmosis.gamm.v1beta1.QueryCalcExitPoolCoinsFromSharesRequest
 */
export class QueryCalcExitPoolCoinsFromSharesRequest extends Message<QueryCalcExitPoolCoinsFromSharesRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string share_in_amount = 2;
   */
  shareInAmount = "";

  constructor(data?: PartialMessage<QueryCalcExitPoolCoinsFromSharesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryCalcExitPoolCoinsFromSharesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "share_in_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalcExitPoolCoinsFromSharesRequest {
    return new QueryCalcExitPoolCoinsFromSharesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalcExitPoolCoinsFromSharesRequest {
    return new QueryCalcExitPoolCoinsFromSharesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalcExitPoolCoinsFromSharesRequest {
    return new QueryCalcExitPoolCoinsFromSharesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalcExitPoolCoinsFromSharesRequest | PlainMessage<QueryCalcExitPoolCoinsFromSharesRequest> | undefined, b: QueryCalcExitPoolCoinsFromSharesRequest | PlainMessage<QueryCalcExitPoolCoinsFromSharesRequest> | undefined): boolean {
    return proto3.util.equals(QueryCalcExitPoolCoinsFromSharesRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QueryCalcExitPoolCoinsFromSharesResponse
 */
export class QueryCalcExitPoolCoinsFromSharesResponse extends Message<QueryCalcExitPoolCoinsFromSharesResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin tokens_out = 1;
   */
  tokensOut: Coin[] = [];

  constructor(data?: PartialMessage<QueryCalcExitPoolCoinsFromSharesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryCalcExitPoolCoinsFromSharesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokens_out", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalcExitPoolCoinsFromSharesResponse {
    return new QueryCalcExitPoolCoinsFromSharesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalcExitPoolCoinsFromSharesResponse {
    return new QueryCalcExitPoolCoinsFromSharesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalcExitPoolCoinsFromSharesResponse {
    return new QueryCalcExitPoolCoinsFromSharesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalcExitPoolCoinsFromSharesResponse | PlainMessage<QueryCalcExitPoolCoinsFromSharesResponse> | undefined, b: QueryCalcExitPoolCoinsFromSharesResponse | PlainMessage<QueryCalcExitPoolCoinsFromSharesResponse> | undefined): boolean {
    return proto3.util.equals(QueryCalcExitPoolCoinsFromSharesResponse, a, b);
  }
}

/**
 * =============================== PoolParams
 *
 * @generated from message osmosis.gamm.v1beta1.QueryPoolParamsRequest
 */
export class QueryPoolParamsRequest extends Message<QueryPoolParamsRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPoolParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryPoolParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolParamsRequest {
    return new QueryPoolParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolParamsRequest {
    return new QueryPoolParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolParamsRequest {
    return new QueryPoolParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolParamsRequest | PlainMessage<QueryPoolParamsRequest> | undefined, b: QueryPoolParamsRequest | PlainMessage<QueryPoolParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolParamsRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QueryPoolParamsResponse
 */
export class QueryPoolParamsResponse extends Message<QueryPoolParamsResponse> {
  /**
   * @generated from field: google.protobuf.Any params = 1;
   */
  params?: Any;

  constructor(data?: PartialMessage<QueryPoolParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryPoolParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolParamsResponse {
    return new QueryPoolParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolParamsResponse {
    return new QueryPoolParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolParamsResponse {
    return new QueryPoolParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolParamsResponse | PlainMessage<QueryPoolParamsResponse> | undefined, b: QueryPoolParamsResponse | PlainMessage<QueryPoolParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolParamsResponse, a, b);
  }
}

/**
 * =============================== PoolLiquidity
 * Deprecated: please use the alternative in x/poolmanager
 *
 * @generated from message osmosis.gamm.v1beta1.QueryTotalPoolLiquidityRequest
 * @deprecated
 */
export class QueryTotalPoolLiquidityRequest extends Message<QueryTotalPoolLiquidityRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryTotalPoolLiquidityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryTotalPoolLiquidityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalPoolLiquidityRequest {
    return new QueryTotalPoolLiquidityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalPoolLiquidityRequest {
    return new QueryTotalPoolLiquidityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalPoolLiquidityRequest {
    return new QueryTotalPoolLiquidityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalPoolLiquidityRequest | PlainMessage<QueryTotalPoolLiquidityRequest> | undefined, b: QueryTotalPoolLiquidityRequest | PlainMessage<QueryTotalPoolLiquidityRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalPoolLiquidityRequest, a, b);
  }
}

/**
 * Deprecated: please use the alternative in x/poolmanager
 *
 * @generated from message osmosis.gamm.v1beta1.QueryTotalPoolLiquidityResponse
 * @deprecated
 */
export class QueryTotalPoolLiquidityResponse extends Message<QueryTotalPoolLiquidityResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin liquidity = 1;
   */
  liquidity: Coin[] = [];

  constructor(data?: PartialMessage<QueryTotalPoolLiquidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryTotalPoolLiquidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalPoolLiquidityResponse {
    return new QueryTotalPoolLiquidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalPoolLiquidityResponse {
    return new QueryTotalPoolLiquidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalPoolLiquidityResponse {
    return new QueryTotalPoolLiquidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalPoolLiquidityResponse | PlainMessage<QueryTotalPoolLiquidityResponse> | undefined, b: QueryTotalPoolLiquidityResponse | PlainMessage<QueryTotalPoolLiquidityResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalPoolLiquidityResponse, a, b);
  }
}

/**
 * =============================== TotalShares
 *
 * @generated from message osmosis.gamm.v1beta1.QueryTotalSharesRequest
 */
export class QueryTotalSharesRequest extends Message<QueryTotalSharesRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryTotalSharesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryTotalSharesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalSharesRequest {
    return new QueryTotalSharesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalSharesRequest {
    return new QueryTotalSharesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalSharesRequest {
    return new QueryTotalSharesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalSharesRequest | PlainMessage<QueryTotalSharesRequest> | undefined, b: QueryTotalSharesRequest | PlainMessage<QueryTotalSharesRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalSharesRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QueryTotalSharesResponse
 */
export class QueryTotalSharesResponse extends Message<QueryTotalSharesResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin total_shares = 1;
   */
  totalShares?: Coin;

  constructor(data?: PartialMessage<QueryTotalSharesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryTotalSharesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_shares", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalSharesResponse {
    return new QueryTotalSharesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalSharesResponse {
    return new QueryTotalSharesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalSharesResponse {
    return new QueryTotalSharesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalSharesResponse | PlainMessage<QueryTotalSharesResponse> | undefined, b: QueryTotalSharesResponse | PlainMessage<QueryTotalSharesResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalSharesResponse, a, b);
  }
}

/**
 * =============================== CalcJoinPoolNoSwapShares
 *
 * @generated from message osmosis.gamm.v1beta1.QueryCalcJoinPoolNoSwapSharesRequest
 */
export class QueryCalcJoinPoolNoSwapSharesRequest extends Message<QueryCalcJoinPoolNoSwapSharesRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin tokens_in = 2;
   */
  tokensIn: Coin[] = [];

  constructor(data?: PartialMessage<QueryCalcJoinPoolNoSwapSharesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryCalcJoinPoolNoSwapSharesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "tokens_in", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalcJoinPoolNoSwapSharesRequest {
    return new QueryCalcJoinPoolNoSwapSharesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalcJoinPoolNoSwapSharesRequest {
    return new QueryCalcJoinPoolNoSwapSharesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalcJoinPoolNoSwapSharesRequest {
    return new QueryCalcJoinPoolNoSwapSharesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalcJoinPoolNoSwapSharesRequest | PlainMessage<QueryCalcJoinPoolNoSwapSharesRequest> | undefined, b: QueryCalcJoinPoolNoSwapSharesRequest | PlainMessage<QueryCalcJoinPoolNoSwapSharesRequest> | undefined): boolean {
    return proto3.util.equals(QueryCalcJoinPoolNoSwapSharesRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QueryCalcJoinPoolNoSwapSharesResponse
 */
export class QueryCalcJoinPoolNoSwapSharesResponse extends Message<QueryCalcJoinPoolNoSwapSharesResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin tokens_out = 1;
   */
  tokensOut: Coin[] = [];

  /**
   * @generated from field: string shares_out = 2;
   */
  sharesOut = "";

  constructor(data?: PartialMessage<QueryCalcJoinPoolNoSwapSharesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryCalcJoinPoolNoSwapSharesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokens_out", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "shares_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCalcJoinPoolNoSwapSharesResponse {
    return new QueryCalcJoinPoolNoSwapSharesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCalcJoinPoolNoSwapSharesResponse {
    return new QueryCalcJoinPoolNoSwapSharesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCalcJoinPoolNoSwapSharesResponse {
    return new QueryCalcJoinPoolNoSwapSharesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCalcJoinPoolNoSwapSharesResponse | PlainMessage<QueryCalcJoinPoolNoSwapSharesResponse> | undefined, b: QueryCalcJoinPoolNoSwapSharesResponse | PlainMessage<QueryCalcJoinPoolNoSwapSharesResponse> | undefined): boolean {
    return proto3.util.equals(QueryCalcJoinPoolNoSwapSharesResponse, a, b);
  }
}

/**
 * QuerySpotPriceRequest defines the gRPC request structure for a SpotPrice
 * query.
 *
 * @generated from message osmosis.gamm.v1beta1.QuerySpotPriceRequest
 * @deprecated
 */
export class QuerySpotPriceRequest extends Message<QuerySpotPriceRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string base_asset_denom = 2;
   */
  baseAssetDenom = "";

  /**
   * @generated from field: string quote_asset_denom = 3;
   */
  quoteAssetDenom = "";

  constructor(data?: PartialMessage<QuerySpotPriceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QuerySpotPriceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "base_asset_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quote_asset_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySpotPriceRequest {
    return new QuerySpotPriceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySpotPriceRequest {
    return new QuerySpotPriceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySpotPriceRequest {
    return new QuerySpotPriceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySpotPriceRequest | PlainMessage<QuerySpotPriceRequest> | undefined, b: QuerySpotPriceRequest | PlainMessage<QuerySpotPriceRequest> | undefined): boolean {
    return proto3.util.equals(QuerySpotPriceRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QueryPoolsWithFilterRequest
 */
export class QueryPoolsWithFilterRequest extends Message<QueryPoolsWithFilterRequest> {
  /**
   * String of the coins in single string seperated by comma. Ex)
   * 10uatom,100uosmo
   *
   * @generated from field: string min_liquidity = 1;
   */
  minLiquidity = "";

  /**
   * @generated from field: string pool_type = 2;
   */
  poolType = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPoolsWithFilterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryPoolsWithFilterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min_liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolsWithFilterRequest {
    return new QueryPoolsWithFilterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolsWithFilterRequest {
    return new QueryPoolsWithFilterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolsWithFilterRequest {
    return new QueryPoolsWithFilterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolsWithFilterRequest | PlainMessage<QueryPoolsWithFilterRequest> | undefined, b: QueryPoolsWithFilterRequest | PlainMessage<QueryPoolsWithFilterRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolsWithFilterRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QueryPoolsWithFilterResponse
 */
export class QueryPoolsWithFilterResponse extends Message<QueryPoolsWithFilterResponse> {
  /**
   * @generated from field: repeated google.protobuf.Any pools = 1;
   */
  pools: Any[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryPoolsWithFilterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryPoolsWithFilterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: Any, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolsWithFilterResponse {
    return new QueryPoolsWithFilterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolsWithFilterResponse {
    return new QueryPoolsWithFilterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolsWithFilterResponse {
    return new QueryPoolsWithFilterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolsWithFilterResponse | PlainMessage<QueryPoolsWithFilterResponse> | undefined, b: QueryPoolsWithFilterResponse | PlainMessage<QueryPoolsWithFilterResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolsWithFilterResponse, a, b);
  }
}

/**
 * QuerySpotPriceResponse defines the gRPC response structure for a SpotPrice
 * query.
 *
 * @generated from message osmosis.gamm.v1beta1.QuerySpotPriceResponse
 * @deprecated
 */
export class QuerySpotPriceResponse extends Message<QuerySpotPriceResponse> {
  /**
   * String of the Dec. Ex) 10.203uatom
   *
   * @generated from field: string spot_price = 1;
   */
  spotPrice = "";

  constructor(data?: PartialMessage<QuerySpotPriceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QuerySpotPriceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spot_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySpotPriceResponse {
    return new QuerySpotPriceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySpotPriceResponse {
    return new QuerySpotPriceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySpotPriceResponse {
    return new QuerySpotPriceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySpotPriceResponse | PlainMessage<QuerySpotPriceResponse> | undefined, b: QuerySpotPriceResponse | PlainMessage<QuerySpotPriceResponse> | undefined): boolean {
    return proto3.util.equals(QuerySpotPriceResponse, a, b);
  }
}

/**
 * =============================== EstimateSwapExactAmountIn
 *
 * @generated from message osmosis.gamm.v1beta1.QuerySwapExactAmountInRequest
 * @deprecated
 */
export class QuerySwapExactAmountInRequest extends Message<QuerySwapExactAmountInRequest> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string token_in = 3;
   */
  tokenIn = "";

  /**
   * @generated from field: repeated osmosis.poolmanager.v1beta1.SwapAmountInRoute routes = 4;
   */
  routes: SwapAmountInRoute[] = [];

  constructor(data?: PartialMessage<QuerySwapExactAmountInRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QuerySwapExactAmountInRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "routes", kind: "message", T: SwapAmountInRoute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySwapExactAmountInRequest {
    return new QuerySwapExactAmountInRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySwapExactAmountInRequest {
    return new QuerySwapExactAmountInRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySwapExactAmountInRequest {
    return new QuerySwapExactAmountInRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySwapExactAmountInRequest | PlainMessage<QuerySwapExactAmountInRequest> | undefined, b: QuerySwapExactAmountInRequest | PlainMessage<QuerySwapExactAmountInRequest> | undefined): boolean {
    return proto3.util.equals(QuerySwapExactAmountInRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QuerySwapExactAmountInResponse
 * @deprecated
 */
export class QuerySwapExactAmountInResponse extends Message<QuerySwapExactAmountInResponse> {
  /**
   * @generated from field: string token_out_amount = 1;
   */
  tokenOutAmount = "";

  constructor(data?: PartialMessage<QuerySwapExactAmountInResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QuerySwapExactAmountInResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_out_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySwapExactAmountInResponse {
    return new QuerySwapExactAmountInResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySwapExactAmountInResponse {
    return new QuerySwapExactAmountInResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySwapExactAmountInResponse {
    return new QuerySwapExactAmountInResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySwapExactAmountInResponse | PlainMessage<QuerySwapExactAmountInResponse> | undefined, b: QuerySwapExactAmountInResponse | PlainMessage<QuerySwapExactAmountInResponse> | undefined): boolean {
    return proto3.util.equals(QuerySwapExactAmountInResponse, a, b);
  }
}

/**
 * =============================== EstimateSwapExactAmountOut
 *
 * @generated from message osmosis.gamm.v1beta1.QuerySwapExactAmountOutRequest
 * @deprecated
 */
export class QuerySwapExactAmountOutRequest extends Message<QuerySwapExactAmountOutRequest> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: repeated osmosis.poolmanager.v1beta1.SwapAmountOutRoute routes = 3;
   */
  routes: SwapAmountOutRoute[] = [];

  /**
   * @generated from field: string token_out = 4;
   */
  tokenOut = "";

  constructor(data?: PartialMessage<QuerySwapExactAmountOutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QuerySwapExactAmountOutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "routes", kind: "message", T: SwapAmountOutRoute, repeated: true },
    { no: 4, name: "token_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySwapExactAmountOutRequest {
    return new QuerySwapExactAmountOutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySwapExactAmountOutRequest {
    return new QuerySwapExactAmountOutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySwapExactAmountOutRequest {
    return new QuerySwapExactAmountOutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySwapExactAmountOutRequest | PlainMessage<QuerySwapExactAmountOutRequest> | undefined, b: QuerySwapExactAmountOutRequest | PlainMessage<QuerySwapExactAmountOutRequest> | undefined): boolean {
    return proto3.util.equals(QuerySwapExactAmountOutRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QuerySwapExactAmountOutResponse
 * @deprecated
 */
export class QuerySwapExactAmountOutResponse extends Message<QuerySwapExactAmountOutResponse> {
  /**
   * @generated from field: string token_in_amount = 1;
   */
  tokenInAmount = "";

  constructor(data?: PartialMessage<QuerySwapExactAmountOutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QuerySwapExactAmountOutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_in_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySwapExactAmountOutResponse {
    return new QuerySwapExactAmountOutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySwapExactAmountOutResponse {
    return new QuerySwapExactAmountOutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySwapExactAmountOutResponse {
    return new QuerySwapExactAmountOutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySwapExactAmountOutResponse | PlainMessage<QuerySwapExactAmountOutResponse> | undefined, b: QuerySwapExactAmountOutResponse | PlainMessage<QuerySwapExactAmountOutResponse> | undefined): boolean {
    return proto3.util.equals(QuerySwapExactAmountOutResponse, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QueryTotalLiquidityRequest
 */
export class QueryTotalLiquidityRequest extends Message<QueryTotalLiquidityRequest> {
  constructor(data?: PartialMessage<QueryTotalLiquidityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryTotalLiquidityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalLiquidityRequest {
    return new QueryTotalLiquidityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalLiquidityRequest {
    return new QueryTotalLiquidityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalLiquidityRequest {
    return new QueryTotalLiquidityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalLiquidityRequest | PlainMessage<QueryTotalLiquidityRequest> | undefined, b: QueryTotalLiquidityRequest | PlainMessage<QueryTotalLiquidityRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalLiquidityRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QueryTotalLiquidityResponse
 */
export class QueryTotalLiquidityResponse extends Message<QueryTotalLiquidityResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin liquidity = 1;
   */
  liquidity: Coin[] = [];

  constructor(data?: PartialMessage<QueryTotalLiquidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryTotalLiquidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalLiquidityResponse {
    return new QueryTotalLiquidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalLiquidityResponse {
    return new QueryTotalLiquidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalLiquidityResponse {
    return new QueryTotalLiquidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalLiquidityResponse | PlainMessage<QueryTotalLiquidityResponse> | undefined, b: QueryTotalLiquidityResponse | PlainMessage<QueryTotalLiquidityResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalLiquidityResponse, a, b);
  }
}

/**
 * =============================== QueryConcentratedPoolIdLinkFromCFMM
 *
 * @generated from message osmosis.gamm.v1beta1.QueryConcentratedPoolIdLinkFromCFMMRequest
 */
export class QueryConcentratedPoolIdLinkFromCFMMRequest extends Message<QueryConcentratedPoolIdLinkFromCFMMRequest> {
  /**
   * @generated from field: uint64 cfmm_pool_id = 1;
   */
  cfmmPoolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryConcentratedPoolIdLinkFromCFMMRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryConcentratedPoolIdLinkFromCFMMRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cfmm_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryConcentratedPoolIdLinkFromCFMMRequest {
    return new QueryConcentratedPoolIdLinkFromCFMMRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryConcentratedPoolIdLinkFromCFMMRequest {
    return new QueryConcentratedPoolIdLinkFromCFMMRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryConcentratedPoolIdLinkFromCFMMRequest {
    return new QueryConcentratedPoolIdLinkFromCFMMRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryConcentratedPoolIdLinkFromCFMMRequest | PlainMessage<QueryConcentratedPoolIdLinkFromCFMMRequest> | undefined, b: QueryConcentratedPoolIdLinkFromCFMMRequest | PlainMessage<QueryConcentratedPoolIdLinkFromCFMMRequest> | undefined): boolean {
    return proto3.util.equals(QueryConcentratedPoolIdLinkFromCFMMRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QueryConcentratedPoolIdLinkFromCFMMResponse
 */
export class QueryConcentratedPoolIdLinkFromCFMMResponse extends Message<QueryConcentratedPoolIdLinkFromCFMMResponse> {
  /**
   * @generated from field: uint64 concentrated_pool_id = 1;
   */
  concentratedPoolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryConcentratedPoolIdLinkFromCFMMResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryConcentratedPoolIdLinkFromCFMMResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "concentrated_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryConcentratedPoolIdLinkFromCFMMResponse {
    return new QueryConcentratedPoolIdLinkFromCFMMResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryConcentratedPoolIdLinkFromCFMMResponse {
    return new QueryConcentratedPoolIdLinkFromCFMMResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryConcentratedPoolIdLinkFromCFMMResponse {
    return new QueryConcentratedPoolIdLinkFromCFMMResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryConcentratedPoolIdLinkFromCFMMResponse | PlainMessage<QueryConcentratedPoolIdLinkFromCFMMResponse> | undefined, b: QueryConcentratedPoolIdLinkFromCFMMResponse | PlainMessage<QueryConcentratedPoolIdLinkFromCFMMResponse> | undefined): boolean {
    return proto3.util.equals(QueryConcentratedPoolIdLinkFromCFMMResponse, a, b);
  }
}

/**
 * =============================== QueryCFMMConcentratedPoolLinks
 *
 * @generated from message osmosis.gamm.v1beta1.QueryCFMMConcentratedPoolLinksRequest
 */
export class QueryCFMMConcentratedPoolLinksRequest extends Message<QueryCFMMConcentratedPoolLinksRequest> {
  constructor(data?: PartialMessage<QueryCFMMConcentratedPoolLinksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryCFMMConcentratedPoolLinksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCFMMConcentratedPoolLinksRequest {
    return new QueryCFMMConcentratedPoolLinksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCFMMConcentratedPoolLinksRequest {
    return new QueryCFMMConcentratedPoolLinksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCFMMConcentratedPoolLinksRequest {
    return new QueryCFMMConcentratedPoolLinksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCFMMConcentratedPoolLinksRequest | PlainMessage<QueryCFMMConcentratedPoolLinksRequest> | undefined, b: QueryCFMMConcentratedPoolLinksRequest | PlainMessage<QueryCFMMConcentratedPoolLinksRequest> | undefined): boolean {
    return proto3.util.equals(QueryCFMMConcentratedPoolLinksRequest, a, b);
  }
}

/**
 * @generated from message osmosis.gamm.v1beta1.QueryCFMMConcentratedPoolLinksResponse
 */
export class QueryCFMMConcentratedPoolLinksResponse extends Message<QueryCFMMConcentratedPoolLinksResponse> {
  /**
   * @generated from field: osmosis.gamm.v1beta1.MigrationRecords migration_records = 1;
   */
  migrationRecords?: MigrationRecords;

  constructor(data?: PartialMessage<QueryCFMMConcentratedPoolLinksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.gamm.v1beta1.QueryCFMMConcentratedPoolLinksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "migration_records", kind: "message", T: MigrationRecords },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCFMMConcentratedPoolLinksResponse {
    return new QueryCFMMConcentratedPoolLinksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCFMMConcentratedPoolLinksResponse {
    return new QueryCFMMConcentratedPoolLinksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCFMMConcentratedPoolLinksResponse {
    return new QueryCFMMConcentratedPoolLinksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCFMMConcentratedPoolLinksResponse | PlainMessage<QueryCFMMConcentratedPoolLinksResponse> | undefined, b: QueryCFMMConcentratedPoolLinksResponse | PlainMessage<QueryCFMMConcentratedPoolLinksResponse> | undefined): boolean {
    return proto3.util.equals(QueryCFMMConcentratedPoolLinksResponse, a, b);
  }
}


// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file osmosis/concentrated-liquidity/gov.proto (package osmosis.concentratedliquidity.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * CreateConcentratedLiquidityPoolsProposal is a gov Content type for creating
 * concentrated liquidity pools. If a CreateConcentratedLiquidityPoolsProposal
 * passes, the pools are created via pool manager module account.
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.CreateConcentratedLiquidityPoolsProposal
 */
export class CreateConcentratedLiquidityPoolsProposal extends Message<CreateConcentratedLiquidityPoolsProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.PoolRecord pool_records = 3;
   */
  poolRecords: PoolRecord[] = [];

  constructor(data?: PartialMessage<CreateConcentratedLiquidityPoolsProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.CreateConcentratedLiquidityPoolsProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pool_records", kind: "message", T: PoolRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateConcentratedLiquidityPoolsProposal {
    return new CreateConcentratedLiquidityPoolsProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateConcentratedLiquidityPoolsProposal {
    return new CreateConcentratedLiquidityPoolsProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateConcentratedLiquidityPoolsProposal {
    return new CreateConcentratedLiquidityPoolsProposal().fromJsonString(jsonString, options);
  }

  static equals(a: CreateConcentratedLiquidityPoolsProposal | PlainMessage<CreateConcentratedLiquidityPoolsProposal> | undefined, b: CreateConcentratedLiquidityPoolsProposal | PlainMessage<CreateConcentratedLiquidityPoolsProposal> | undefined): boolean {
    return proto3.util.equals(CreateConcentratedLiquidityPoolsProposal, a, b);
  }
}

/**
 * TickSpacingDecreaseProposal is a gov Content type for proposing a tick
 * spacing decrease for a pool. The proposal will fail if one of the pools do
 * not exist, or if the new tick spacing is not less than the current tick
 * spacing.
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.TickSpacingDecreaseProposal
 */
export class TickSpacingDecreaseProposal extends Message<TickSpacingDecreaseProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated osmosis.concentratedliquidity.v1beta1.PoolIdToTickSpacingRecord pool_id_to_tick_spacing_records = 3;
   */
  poolIdToTickSpacingRecords: PoolIdToTickSpacingRecord[] = [];

  constructor(data?: PartialMessage<TickSpacingDecreaseProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.TickSpacingDecreaseProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pool_id_to_tick_spacing_records", kind: "message", T: PoolIdToTickSpacingRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TickSpacingDecreaseProposal {
    return new TickSpacingDecreaseProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TickSpacingDecreaseProposal {
    return new TickSpacingDecreaseProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TickSpacingDecreaseProposal {
    return new TickSpacingDecreaseProposal().fromJsonString(jsonString, options);
  }

  static equals(a: TickSpacingDecreaseProposal | PlainMessage<TickSpacingDecreaseProposal> | undefined, b: TickSpacingDecreaseProposal | PlainMessage<TickSpacingDecreaseProposal> | undefined): boolean {
    return proto3.util.equals(TickSpacingDecreaseProposal, a, b);
  }
}

/**
 * PoolIdToTickSpacingRecord is a struct that contains a pool id to new tick
 * spacing pair.
 *
 * @generated from message osmosis.concentratedliquidity.v1beta1.PoolIdToTickSpacingRecord
 */
export class PoolIdToTickSpacingRecord extends Message<PoolIdToTickSpacingRecord> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: uint64 new_tick_spacing = 2;
   */
  newTickSpacing = protoInt64.zero;

  constructor(data?: PartialMessage<PoolIdToTickSpacingRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.PoolIdToTickSpacingRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "new_tick_spacing", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolIdToTickSpacingRecord {
    return new PoolIdToTickSpacingRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolIdToTickSpacingRecord {
    return new PoolIdToTickSpacingRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolIdToTickSpacingRecord {
    return new PoolIdToTickSpacingRecord().fromJsonString(jsonString, options);
  }

  static equals(a: PoolIdToTickSpacingRecord | PlainMessage<PoolIdToTickSpacingRecord> | undefined, b: PoolIdToTickSpacingRecord | PlainMessage<PoolIdToTickSpacingRecord> | undefined): boolean {
    return proto3.util.equals(PoolIdToTickSpacingRecord, a, b);
  }
}

/**
 * @generated from message osmosis.concentratedliquidity.v1beta1.PoolRecord
 */
export class PoolRecord extends Message<PoolRecord> {
  /**
   * @generated from field: string denom0 = 1;
   */
  denom0 = "";

  /**
   * @generated from field: string denom1 = 2;
   */
  denom1 = "";

  /**
   * @generated from field: uint64 tick_spacing = 3;
   */
  tickSpacing = protoInt64.zero;

  /**
   * @generated from field: string spread_factor = 5;
   */
  spreadFactor = "";

  constructor(data?: PartialMessage<PoolRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.concentratedliquidity.v1beta1.PoolRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tick_spacing", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "spread_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolRecord {
    return new PoolRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolRecord {
    return new PoolRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolRecord {
    return new PoolRecord().fromJsonString(jsonString, options);
  }

  static equals(a: PoolRecord | PlainMessage<PoolRecord> | undefined, b: PoolRecord | PlainMessage<PoolRecord> | undefined): boolean {
    return proto3.util.equals(PoolRecord, a, b);
  }
}


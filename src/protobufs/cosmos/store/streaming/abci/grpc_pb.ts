// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/store/streaming/abci/grpc.proto (package cosmos.store.streaming.abci, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { RequestFinalizeBlock, ResponseCommit, ResponseFinalizeBlock } from "../../../../tendermint/abci/types_pb.js";
import { StoreKVPair } from "../../v1beta1/listening_pb.js";

/**
 * ListenEndBlockRequest is the request type for the ListenEndBlock RPC method
 *
 * @generated from message cosmos.store.streaming.abci.ListenFinalizeBlockRequest
 */
export class ListenFinalizeBlockRequest extends Message<ListenFinalizeBlockRequest> {
  /**
   * @generated from field: tendermint.abci.RequestFinalizeBlock req = 1;
   */
  req?: RequestFinalizeBlock;

  /**
   * @generated from field: tendermint.abci.ResponseFinalizeBlock res = 2;
   */
  res?: ResponseFinalizeBlock;

  constructor(data?: PartialMessage<ListenFinalizeBlockRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.store.streaming.abci.ListenFinalizeBlockRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "req", kind: "message", T: RequestFinalizeBlock },
    { no: 2, name: "res", kind: "message", T: ResponseFinalizeBlock },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenFinalizeBlockRequest {
    return new ListenFinalizeBlockRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenFinalizeBlockRequest {
    return new ListenFinalizeBlockRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenFinalizeBlockRequest {
    return new ListenFinalizeBlockRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListenFinalizeBlockRequest | PlainMessage<ListenFinalizeBlockRequest> | undefined, b: ListenFinalizeBlockRequest | PlainMessage<ListenFinalizeBlockRequest> | undefined): boolean {
    return proto3.util.equals(ListenFinalizeBlockRequest, a, b);
  }
}

/**
 * ListenEndBlockResponse is the response type for the ListenEndBlock RPC method
 *
 * @generated from message cosmos.store.streaming.abci.ListenFinalizeBlockResponse
 */
export class ListenFinalizeBlockResponse extends Message<ListenFinalizeBlockResponse> {
  constructor(data?: PartialMessage<ListenFinalizeBlockResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.store.streaming.abci.ListenFinalizeBlockResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenFinalizeBlockResponse {
    return new ListenFinalizeBlockResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenFinalizeBlockResponse {
    return new ListenFinalizeBlockResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenFinalizeBlockResponse {
    return new ListenFinalizeBlockResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListenFinalizeBlockResponse | PlainMessage<ListenFinalizeBlockResponse> | undefined, b: ListenFinalizeBlockResponse | PlainMessage<ListenFinalizeBlockResponse> | undefined): boolean {
    return proto3.util.equals(ListenFinalizeBlockResponse, a, b);
  }
}

/**
 * ListenCommitRequest is the request type for the ListenCommit RPC method
 *
 * @generated from message cosmos.store.streaming.abci.ListenCommitRequest
 */
export class ListenCommitRequest extends Message<ListenCommitRequest> {
  /**
   * explicitly pass in block height as ResponseCommit does not contain this info
   *
   * @generated from field: int64 block_height = 1;
   */
  blockHeight = protoInt64.zero;

  /**
   * @generated from field: tendermint.abci.ResponseCommit res = 2;
   */
  res?: ResponseCommit;

  /**
   * @generated from field: repeated cosmos.store.v1beta1.StoreKVPair change_set = 3;
   */
  changeSet: StoreKVPair[] = [];

  constructor(data?: PartialMessage<ListenCommitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.store.streaming.abci.ListenCommitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "res", kind: "message", T: ResponseCommit },
    { no: 3, name: "change_set", kind: "message", T: StoreKVPair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenCommitRequest {
    return new ListenCommitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenCommitRequest {
    return new ListenCommitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenCommitRequest {
    return new ListenCommitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListenCommitRequest | PlainMessage<ListenCommitRequest> | undefined, b: ListenCommitRequest | PlainMessage<ListenCommitRequest> | undefined): boolean {
    return proto3.util.equals(ListenCommitRequest, a, b);
  }
}

/**
 * ListenCommitResponse is the response type for the ListenCommit RPC method
 *
 * @generated from message cosmos.store.streaming.abci.ListenCommitResponse
 */
export class ListenCommitResponse extends Message<ListenCommitResponse> {
  constructor(data?: PartialMessage<ListenCommitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.store.streaming.abci.ListenCommitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenCommitResponse {
    return new ListenCommitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenCommitResponse {
    return new ListenCommitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenCommitResponse {
    return new ListenCommitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListenCommitResponse | PlainMessage<ListenCommitResponse> | undefined, b: ListenCommitResponse | PlainMessage<ListenCommitResponse> | undefined): boolean {
    return proto3.util.equals(ListenCommitResponse, a, b);
  }
}


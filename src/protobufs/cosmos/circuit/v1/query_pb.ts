// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/circuit/v1/query.proto (package cosmos.circuit.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { GenesisAccountPermissions, Permissions } from "./types_pb.js";
import { PageRequest, PageResponse } from "../../base/query/v1beta1/pagination_pb.js";

/**
 * QueryAccountRequest is the request type for the Query/Account RPC method.
 *
 * @generated from message cosmos.circuit.v1.QueryAccountRequest
 */
export class QueryAccountRequest extends Message<QueryAccountRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.circuit.v1.QueryAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountRequest {
    return new QueryAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountRequest {
    return new QueryAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountRequest {
    return new QueryAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountRequest | PlainMessage<QueryAccountRequest> | undefined, b: QueryAccountRequest | PlainMessage<QueryAccountRequest> | undefined): boolean {
    return proto3.util.equals(QueryAccountRequest, a, b);
  }
}

/**
 * AccountResponse is the response type for the Query/Account RPC method.
 *
 * @generated from message cosmos.circuit.v1.AccountResponse
 */
export class AccountResponse extends Message<AccountResponse> {
  /**
   * @generated from field: cosmos.circuit.v1.Permissions permission = 1;
   */
  permission?: Permissions;

  constructor(data?: PartialMessage<AccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.circuit.v1.AccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permission", kind: "message", T: Permissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountResponse {
    return new AccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountResponse {
    return new AccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountResponse {
    return new AccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountResponse | PlainMessage<AccountResponse> | undefined, b: AccountResponse | PlainMessage<AccountResponse> | undefined): boolean {
    return proto3.util.equals(AccountResponse, a, b);
  }
}

/**
 * QueryAccountsRequest is the request type for the Query/Accounts RPC method.
 *
 * @generated from message cosmos.circuit.v1.QueryAccountsRequest
 */
export class QueryAccountsRequest extends Message<QueryAccountsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.circuit.v1.QueryAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountsRequest {
    return new QueryAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountsRequest {
    return new QueryAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountsRequest {
    return new QueryAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountsRequest | PlainMessage<QueryAccountsRequest> | undefined, b: QueryAccountsRequest | PlainMessage<QueryAccountsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAccountsRequest, a, b);
  }
}

/**
 * AccountsResponse is the response type for the Query/Accounts RPC method.
 *
 * @generated from message cosmos.circuit.v1.AccountsResponse
 */
export class AccountsResponse extends Message<AccountsResponse> {
  /**
   * @generated from field: repeated cosmos.circuit.v1.GenesisAccountPermissions accounts = 1;
   */
  accounts: GenesisAccountPermissions[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<AccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.circuit.v1.AccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: GenesisAccountPermissions, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountsResponse {
    return new AccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountsResponse {
    return new AccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountsResponse {
    return new AccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AccountsResponse | PlainMessage<AccountsResponse> | undefined, b: AccountsResponse | PlainMessage<AccountsResponse> | undefined): boolean {
    return proto3.util.equals(AccountsResponse, a, b);
  }
}

/**
 * QueryDisableListRequest is the request type for the Query/DisabledList RPC method.
 *
 * @generated from message cosmos.circuit.v1.QueryDisabledListRequest
 */
export class QueryDisabledListRequest extends Message<QueryDisabledListRequest> {
  constructor(data?: PartialMessage<QueryDisabledListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.circuit.v1.QueryDisabledListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDisabledListRequest {
    return new QueryDisabledListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDisabledListRequest {
    return new QueryDisabledListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDisabledListRequest {
    return new QueryDisabledListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDisabledListRequest | PlainMessage<QueryDisabledListRequest> | undefined, b: QueryDisabledListRequest | PlainMessage<QueryDisabledListRequest> | undefined): boolean {
    return proto3.util.equals(QueryDisabledListRequest, a, b);
  }
}

/**
 * DisabledListResponse is the response type for the Query/DisabledList RPC method.
 *
 * @generated from message cosmos.circuit.v1.DisabledListResponse
 */
export class DisabledListResponse extends Message<DisabledListResponse> {
  /**
   * @generated from field: repeated string disabled_list = 1;
   */
  disabledList: string[] = [];

  constructor(data?: PartialMessage<DisabledListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.circuit.v1.DisabledListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "disabled_list", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisabledListResponse {
    return new DisabledListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisabledListResponse {
    return new DisabledListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisabledListResponse {
    return new DisabledListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DisabledListResponse | PlainMessage<DisabledListResponse> | undefined, b: DisabledListResponse | PlainMessage<DisabledListResponse> | undefined): boolean {
    return proto3.util.equals(DisabledListResponse, a, b);
  }
}


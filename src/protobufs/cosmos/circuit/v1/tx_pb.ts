// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/circuit/v1/tx.proto (package cosmos.circuit.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Permissions } from "./types_pb.js";

/**
 * MsgAuthorizeCircuitBreaker defines the Msg/AuthorizeCircuitBreaker request type.
 *
 * @generated from message cosmos.circuit.v1.MsgAuthorizeCircuitBreaker
 */
export class MsgAuthorizeCircuitBreaker extends Message<MsgAuthorizeCircuitBreaker> {
  /**
   * granter is the granter of the circuit breaker permissions and must have
   * LEVEL_SUPER_ADMIN.
   *
   * @generated from field: string granter = 1;
   */
  granter = "";

  /**
   * grantee is the account authorized with the provided permissions.
   *
   * @generated from field: string grantee = 2;
   */
  grantee = "";

  /**
   * permissions are the circuit breaker permissions that the grantee receives.
   * These will overwrite any existing permissions. LEVEL_NONE_UNSPECIFIED can
   * be specified to revoke all permissions.
   *
   * @generated from field: cosmos.circuit.v1.Permissions permissions = 3;
   */
  permissions?: Permissions;

  constructor(data?: PartialMessage<MsgAuthorizeCircuitBreaker>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.circuit.v1.MsgAuthorizeCircuitBreaker";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "granter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "grantee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "permissions", kind: "message", T: Permissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAuthorizeCircuitBreaker {
    return new MsgAuthorizeCircuitBreaker().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAuthorizeCircuitBreaker {
    return new MsgAuthorizeCircuitBreaker().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAuthorizeCircuitBreaker {
    return new MsgAuthorizeCircuitBreaker().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAuthorizeCircuitBreaker | PlainMessage<MsgAuthorizeCircuitBreaker> | undefined, b: MsgAuthorizeCircuitBreaker | PlainMessage<MsgAuthorizeCircuitBreaker> | undefined): boolean {
    return proto3.util.equals(MsgAuthorizeCircuitBreaker, a, b);
  }
}

/**
 * MsgAuthorizeCircuitBreakerResponse defines the Msg/AuthorizeCircuitBreaker response type.
 *
 * @generated from message cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse
 */
export class MsgAuthorizeCircuitBreakerResponse extends Message<MsgAuthorizeCircuitBreakerResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<MsgAuthorizeCircuitBreakerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAuthorizeCircuitBreakerResponse {
    return new MsgAuthorizeCircuitBreakerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAuthorizeCircuitBreakerResponse {
    return new MsgAuthorizeCircuitBreakerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAuthorizeCircuitBreakerResponse {
    return new MsgAuthorizeCircuitBreakerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAuthorizeCircuitBreakerResponse | PlainMessage<MsgAuthorizeCircuitBreakerResponse> | undefined, b: MsgAuthorizeCircuitBreakerResponse | PlainMessage<MsgAuthorizeCircuitBreakerResponse> | undefined): boolean {
    return proto3.util.equals(MsgAuthorizeCircuitBreakerResponse, a, b);
  }
}

/**
 * MsgTripCircuitBreaker defines the Msg/TripCircuitBreaker request type.
 *
 * @generated from message cosmos.circuit.v1.MsgTripCircuitBreaker
 */
export class MsgTripCircuitBreaker extends Message<MsgTripCircuitBreaker> {
  /**
   * authority is the account authorized to trip the circuit breaker.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * msg_type_urls specifies a list of type URLs to immediately stop processing.
   * IF IT IS LEFT EMPTY, ALL MSG PROCESSING WILL STOP IMMEDIATELY.
   * This value is validated against the authority's permissions and if the
   * authority does not have permissions to trip the specified msg type URLs
   * (or all URLs), the operation will fail.
   *
   * @generated from field: repeated string msg_type_urls = 2;
   */
  msgTypeUrls: string[] = [];

  constructor(data?: PartialMessage<MsgTripCircuitBreaker>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.circuit.v1.MsgTripCircuitBreaker";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msg_type_urls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTripCircuitBreaker {
    return new MsgTripCircuitBreaker().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTripCircuitBreaker {
    return new MsgTripCircuitBreaker().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTripCircuitBreaker {
    return new MsgTripCircuitBreaker().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTripCircuitBreaker | PlainMessage<MsgTripCircuitBreaker> | undefined, b: MsgTripCircuitBreaker | PlainMessage<MsgTripCircuitBreaker> | undefined): boolean {
    return proto3.util.equals(MsgTripCircuitBreaker, a, b);
  }
}

/**
 * MsgTripCircuitBreakerResponse defines the Msg/TripCircuitBreaker response type.
 *
 * @generated from message cosmos.circuit.v1.MsgTripCircuitBreakerResponse
 */
export class MsgTripCircuitBreakerResponse extends Message<MsgTripCircuitBreakerResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<MsgTripCircuitBreakerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.circuit.v1.MsgTripCircuitBreakerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgTripCircuitBreakerResponse {
    return new MsgTripCircuitBreakerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgTripCircuitBreakerResponse {
    return new MsgTripCircuitBreakerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgTripCircuitBreakerResponse {
    return new MsgTripCircuitBreakerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgTripCircuitBreakerResponse | PlainMessage<MsgTripCircuitBreakerResponse> | undefined, b: MsgTripCircuitBreakerResponse | PlainMessage<MsgTripCircuitBreakerResponse> | undefined): boolean {
    return proto3.util.equals(MsgTripCircuitBreakerResponse, a, b);
  }
}

/**
 * MsgResetCircuitBreaker defines the Msg/ResetCircuitBreaker request type.
 *
 * @generated from message cosmos.circuit.v1.MsgResetCircuitBreaker
 */
export class MsgResetCircuitBreaker extends Message<MsgResetCircuitBreaker> {
  /**
   * authority is the account authorized to trip or reset the circuit breaker.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * msg_type_urls specifies a list of Msg type URLs to resume processing. If
   * it is left empty all Msg processing for type URLs that the account is
   * authorized to trip will resume.
   *
   * @generated from field: repeated string msg_type_urls = 3;
   */
  msgTypeUrls: string[] = [];

  constructor(data?: PartialMessage<MsgResetCircuitBreaker>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.circuit.v1.MsgResetCircuitBreaker";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "msg_type_urls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgResetCircuitBreaker {
    return new MsgResetCircuitBreaker().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgResetCircuitBreaker {
    return new MsgResetCircuitBreaker().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgResetCircuitBreaker {
    return new MsgResetCircuitBreaker().fromJsonString(jsonString, options);
  }

  static equals(a: MsgResetCircuitBreaker | PlainMessage<MsgResetCircuitBreaker> | undefined, b: MsgResetCircuitBreaker | PlainMessage<MsgResetCircuitBreaker> | undefined): boolean {
    return proto3.util.equals(MsgResetCircuitBreaker, a, b);
  }
}

/**
 * MsgResetCircuitBreakerResponse defines the Msg/ResetCircuitBreaker response type.
 *
 * @generated from message cosmos.circuit.v1.MsgResetCircuitBreakerResponse
 */
export class MsgResetCircuitBreakerResponse extends Message<MsgResetCircuitBreakerResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<MsgResetCircuitBreakerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.circuit.v1.MsgResetCircuitBreakerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgResetCircuitBreakerResponse {
    return new MsgResetCircuitBreakerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgResetCircuitBreakerResponse {
    return new MsgResetCircuitBreakerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgResetCircuitBreakerResponse {
    return new MsgResetCircuitBreakerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgResetCircuitBreakerResponse | PlainMessage<MsgResetCircuitBreakerResponse> | undefined, b: MsgResetCircuitBreakerResponse | PlainMessage<MsgResetCircuitBreakerResponse> | undefined): boolean {
    return proto3.util.equals(MsgResetCircuitBreakerResponse, a, b);
  }
}


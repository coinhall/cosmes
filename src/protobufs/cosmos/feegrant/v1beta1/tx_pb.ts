// Since: cosmos-sdk 0.43

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cosmos/feegrant/v1beta1/tx.proto (package cosmos.feegrant.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * MsgGrantAllowance adds permission for Grantee to spend up to Allowance
 * of fees from the account of Granter.
 *
 * @generated from message cosmos.feegrant.v1beta1.MsgGrantAllowance
 */
export class MsgGrantAllowance extends Message<MsgGrantAllowance> {
  /**
   * granter is the address of the user granting an allowance of their funds.
   *
   * @generated from field: string granter = 1;
   */
  granter = "";

  /**
   * grantee is the address of the user being granted an allowance of another user's funds.
   *
   * @generated from field: string grantee = 2;
   */
  grantee = "";

  /**
   * allowance can be any of basic, periodic, allowed fee allowance.
   *
   * @generated from field: google.protobuf.Any allowance = 3;
   */
  allowance?: Any;

  constructor(data?: PartialMessage<MsgGrantAllowance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.feegrant.v1beta1.MsgGrantAllowance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "granter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "grantee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "allowance", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgGrantAllowance {
    return new MsgGrantAllowance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgGrantAllowance {
    return new MsgGrantAllowance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgGrantAllowance {
    return new MsgGrantAllowance().fromJsonString(jsonString, options);
  }

  static equals(a: MsgGrantAllowance | PlainMessage<MsgGrantAllowance> | undefined, b: MsgGrantAllowance | PlainMessage<MsgGrantAllowance> | undefined): boolean {
    return proto3.util.equals(MsgGrantAllowance, a, b);
  }
}

/**
 * MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response type.
 *
 * @generated from message cosmos.feegrant.v1beta1.MsgGrantAllowanceResponse
 */
export class MsgGrantAllowanceResponse extends Message<MsgGrantAllowanceResponse> {
  constructor(data?: PartialMessage<MsgGrantAllowanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.feegrant.v1beta1.MsgGrantAllowanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgGrantAllowanceResponse {
    return new MsgGrantAllowanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgGrantAllowanceResponse {
    return new MsgGrantAllowanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgGrantAllowanceResponse {
    return new MsgGrantAllowanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgGrantAllowanceResponse | PlainMessage<MsgGrantAllowanceResponse> | undefined, b: MsgGrantAllowanceResponse | PlainMessage<MsgGrantAllowanceResponse> | undefined): boolean {
    return proto3.util.equals(MsgGrantAllowanceResponse, a, b);
  }
}

/**
 * MsgRevokeAllowance removes any existing Allowance from Granter to Grantee.
 *
 * @generated from message cosmos.feegrant.v1beta1.MsgRevokeAllowance
 */
export class MsgRevokeAllowance extends Message<MsgRevokeAllowance> {
  /**
   * granter is the address of the user granting an allowance of their funds.
   *
   * @generated from field: string granter = 1;
   */
  granter = "";

  /**
   * grantee is the address of the user being granted an allowance of another user's funds.
   *
   * @generated from field: string grantee = 2;
   */
  grantee = "";

  constructor(data?: PartialMessage<MsgRevokeAllowance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.feegrant.v1beta1.MsgRevokeAllowance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "granter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "grantee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRevokeAllowance {
    return new MsgRevokeAllowance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRevokeAllowance {
    return new MsgRevokeAllowance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRevokeAllowance {
    return new MsgRevokeAllowance().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRevokeAllowance | PlainMessage<MsgRevokeAllowance> | undefined, b: MsgRevokeAllowance | PlainMessage<MsgRevokeAllowance> | undefined): boolean {
    return proto3.util.equals(MsgRevokeAllowance, a, b);
  }
}

/**
 * MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse response type.
 *
 * @generated from message cosmos.feegrant.v1beta1.MsgRevokeAllowanceResponse
 */
export class MsgRevokeAllowanceResponse extends Message<MsgRevokeAllowanceResponse> {
  constructor(data?: PartialMessage<MsgRevokeAllowanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.feegrant.v1beta1.MsgRevokeAllowanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRevokeAllowanceResponse {
    return new MsgRevokeAllowanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRevokeAllowanceResponse {
    return new MsgRevokeAllowanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRevokeAllowanceResponse {
    return new MsgRevokeAllowanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRevokeAllowanceResponse | PlainMessage<MsgRevokeAllowanceResponse> | undefined, b: MsgRevokeAllowanceResponse | PlainMessage<MsgRevokeAllowanceResponse> | undefined): boolean {
    return proto3.util.equals(MsgRevokeAllowanceResponse, a, b);
  }
}

/**
 * MsgPruneAllowances prunes expired fee allowances.
 *
 * Since cosmos-sdk 0.50
 *
 * @generated from message cosmos.feegrant.v1beta1.MsgPruneAllowances
 */
export class MsgPruneAllowances extends Message<MsgPruneAllowances> {
  /**
   * pruner is the address of the user pruning expired allowances.
   *
   * @generated from field: string pruner = 1;
   */
  pruner = "";

  constructor(data?: PartialMessage<MsgPruneAllowances>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.feegrant.v1beta1.MsgPruneAllowances";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pruner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPruneAllowances {
    return new MsgPruneAllowances().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPruneAllowances {
    return new MsgPruneAllowances().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPruneAllowances {
    return new MsgPruneAllowances().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPruneAllowances | PlainMessage<MsgPruneAllowances> | undefined, b: MsgPruneAllowances | PlainMessage<MsgPruneAllowances> | undefined): boolean {
    return proto3.util.equals(MsgPruneAllowances, a, b);
  }
}

/**
 * MsgPruneAllowancesResponse defines the Msg/PruneAllowancesResponse response type.
 *
 * Since cosmos-sdk 0.50
 *
 * @generated from message cosmos.feegrant.v1beta1.MsgPruneAllowancesResponse
 */
export class MsgPruneAllowancesResponse extends Message<MsgPruneAllowancesResponse> {
  constructor(data?: PartialMessage<MsgPruneAllowancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.feegrant.v1beta1.MsgPruneAllowancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPruneAllowancesResponse {
    return new MsgPruneAllowancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPruneAllowancesResponse {
    return new MsgPruneAllowancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPruneAllowancesResponse {
    return new MsgPruneAllowancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPruneAllowancesResponse | PlainMessage<MsgPruneAllowancesResponse> | undefined, b: MsgPruneAllowancesResponse | PlainMessage<MsgPruneAllowancesResponse> | undefined): boolean {
    return proto3.util.equals(MsgPruneAllowancesResponse, a, b);
  }
}


// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file market/tx.proto (package pendulumlabs.market.market, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message pendulumlabs.market.market.MsgCreatePool
 */
export class MsgCreatePool extends Message<MsgCreatePool> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string coinA = 2;
   */
  coinA = "";

  /**
   * @generated from field: string coinB = 3;
   */
  coinB = "";

  constructor(data?: PartialMessage<MsgCreatePool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.MsgCreatePool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "coinA", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "coinB", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreatePool {
    return new MsgCreatePool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreatePool {
    return new MsgCreatePool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreatePool {
    return new MsgCreatePool().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreatePool | PlainMessage<MsgCreatePool> | undefined, b: MsgCreatePool | PlainMessage<MsgCreatePool> | undefined): boolean {
    return proto3.util.equals(MsgCreatePool, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.MsgCreatePoolResponse
 */
export class MsgCreatePoolResponse extends Message<MsgCreatePoolResponse> {
  constructor(data?: PartialMessage<MsgCreatePoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.MsgCreatePoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreatePoolResponse {
    return new MsgCreatePoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreatePoolResponse {
    return new MsgCreatePoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreatePoolResponse {
    return new MsgCreatePoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreatePoolResponse | PlainMessage<MsgCreatePoolResponse> | undefined, b: MsgCreatePoolResponse | PlainMessage<MsgCreatePoolResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreatePoolResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.MsgCreateDrop
 */
export class MsgCreateDrop extends Message<MsgCreateDrop> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string pair = 2;
   */
  pair = "";

  /**
   * @generated from field: string drops = 3;
   */
  drops = "";

  constructor(data?: PartialMessage<MsgCreateDrop>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.MsgCreateDrop";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "drops", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateDrop {
    return new MsgCreateDrop().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateDrop {
    return new MsgCreateDrop().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateDrop {
    return new MsgCreateDrop().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateDrop | PlainMessage<MsgCreateDrop> | undefined, b: MsgCreateDrop | PlainMessage<MsgCreateDrop> | undefined): boolean {
    return proto3.util.equals(MsgCreateDrop, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.MsgCreateDropResponse
 */
export class MsgCreateDropResponse extends Message<MsgCreateDropResponse> {
  constructor(data?: PartialMessage<MsgCreateDropResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.MsgCreateDropResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateDropResponse {
    return new MsgCreateDropResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateDropResponse {
    return new MsgCreateDropResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateDropResponse {
    return new MsgCreateDropResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateDropResponse | PlainMessage<MsgCreateDropResponse> | undefined, b: MsgCreateDropResponse | PlainMessage<MsgCreateDropResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateDropResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.MsgRedeemDrop
 */
export class MsgRedeemDrop extends Message<MsgRedeemDrop> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string uid = 2;
   */
  uid = "";

  constructor(data?: PartialMessage<MsgRedeemDrop>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.MsgRedeemDrop";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRedeemDrop {
    return new MsgRedeemDrop().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRedeemDrop {
    return new MsgRedeemDrop().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRedeemDrop {
    return new MsgRedeemDrop().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRedeemDrop | PlainMessage<MsgRedeemDrop> | undefined, b: MsgRedeemDrop | PlainMessage<MsgRedeemDrop> | undefined): boolean {
    return proto3.util.equals(MsgRedeemDrop, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.MsgRedeemDropResponse
 */
export class MsgRedeemDropResponse extends Message<MsgRedeemDropResponse> {
  constructor(data?: PartialMessage<MsgRedeemDropResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.MsgRedeemDropResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRedeemDropResponse {
    return new MsgRedeemDropResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRedeemDropResponse {
    return new MsgRedeemDropResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRedeemDropResponse {
    return new MsgRedeemDropResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRedeemDropResponse | PlainMessage<MsgRedeemDropResponse> | undefined, b: MsgRedeemDropResponse | PlainMessage<MsgRedeemDropResponse> | undefined): boolean {
    return proto3.util.equals(MsgRedeemDropResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.MsgCreateOrder
 */
export class MsgCreateOrder extends Message<MsgCreateOrder> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string denomAsk = 2;
   */
  denomAsk = "";

  /**
   * @generated from field: string denomBid = 3;
   */
  denomBid = "";

  /**
   * @generated from field: string orderType = 4;
   */
  orderType = "";

  /**
   * @generated from field: string amount = 5;
   */
  amount = "";

  /**
   * @generated from field: repeated string rate = 6;
   */
  rate: string[] = [];

  /**
   * @generated from field: string prev = 7;
   */
  prev = "";

  /**
   * @generated from field: string next = 8;
   */
  next = "";

  constructor(data?: PartialMessage<MsgCreateOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.MsgCreateOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denomAsk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denomBid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "orderType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "rate", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "prev", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "next", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateOrder {
    return new MsgCreateOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateOrder {
    return new MsgCreateOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateOrder {
    return new MsgCreateOrder().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateOrder | PlainMessage<MsgCreateOrder> | undefined, b: MsgCreateOrder | PlainMessage<MsgCreateOrder> | undefined): boolean {
    return proto3.util.equals(MsgCreateOrder, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.MsgCreateOrderResponse
 */
export class MsgCreateOrderResponse extends Message<MsgCreateOrderResponse> {
  /**
   * @generated from field: uint64 uid = 1;
   */
  uid = protoInt64.zero;

  constructor(data?: PartialMessage<MsgCreateOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.MsgCreateOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uid", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateOrderResponse {
    return new MsgCreateOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateOrderResponse {
    return new MsgCreateOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateOrderResponse {
    return new MsgCreateOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateOrderResponse | PlainMessage<MsgCreateOrderResponse> | undefined, b: MsgCreateOrderResponse | PlainMessage<MsgCreateOrderResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateOrderResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.MsgCancelOrder
 */
export class MsgCancelOrder extends Message<MsgCancelOrder> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string uid = 2;
   */
  uid = "";

  constructor(data?: PartialMessage<MsgCancelOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.MsgCancelOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelOrder {
    return new MsgCancelOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelOrder {
    return new MsgCancelOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelOrder {
    return new MsgCancelOrder().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelOrder | PlainMessage<MsgCancelOrder> | undefined, b: MsgCancelOrder | PlainMessage<MsgCancelOrder> | undefined): boolean {
    return proto3.util.equals(MsgCancelOrder, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.MsgCancelOrderResponse
 */
export class MsgCancelOrderResponse extends Message<MsgCancelOrderResponse> {
  constructor(data?: PartialMessage<MsgCancelOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.MsgCancelOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelOrderResponse {
    return new MsgCancelOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelOrderResponse {
    return new MsgCancelOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelOrderResponse {
    return new MsgCancelOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelOrderResponse | PlainMessage<MsgCancelOrderResponse> | undefined, b: MsgCancelOrderResponse | PlainMessage<MsgCancelOrderResponse> | undefined): boolean {
    return proto3.util.equals(MsgCancelOrderResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.MsgMarketOrder
 */
export class MsgMarketOrder extends Message<MsgMarketOrder> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string denomAsk = 2;
   */
  denomAsk = "";

  /**
   * @generated from field: string amountAsk = 3;
   */
  amountAsk = "";

  /**
   * @generated from field: string denomBid = 4;
   */
  denomBid = "";

  /**
   * @generated from field: string amountBid = 5;
   */
  amountBid = "";

  /**
   * Slippage is percentage based on (parameter / 10000), 9999 representing as 99.99%
   *
   * @generated from field: string slippage = 6;
   */
  slippage = "";

  constructor(data?: PartialMessage<MsgMarketOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.MsgMarketOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denomAsk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amountAsk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "denomBid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amountBid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "slippage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMarketOrder {
    return new MsgMarketOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMarketOrder {
    return new MsgMarketOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMarketOrder {
    return new MsgMarketOrder().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMarketOrder | PlainMessage<MsgMarketOrder> | undefined, b: MsgMarketOrder | PlainMessage<MsgMarketOrder> | undefined): boolean {
    return proto3.util.equals(MsgMarketOrder, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.MsgMarketOrderResponse
 */
export class MsgMarketOrderResponse extends Message<MsgMarketOrderResponse> {
  /**
   * @generated from field: string amountBid = 1;
   */
  amountBid = "";

  /**
   * @generated from field: string amountAsk = 2;
   */
  amountAsk = "";

  /**
   * @generated from field: string slippage = 3;
   */
  slippage = "";

  constructor(data?: PartialMessage<MsgMarketOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.MsgMarketOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amountBid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amountAsk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slippage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMarketOrderResponse {
    return new MsgMarketOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMarketOrderResponse {
    return new MsgMarketOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMarketOrderResponse {
    return new MsgMarketOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMarketOrderResponse | PlainMessage<MsgMarketOrderResponse> | undefined, b: MsgMarketOrderResponse | PlainMessage<MsgMarketOrderResponse> | undefined): boolean {
    return proto3.util.equals(MsgMarketOrderResponse, a, b);
  }
}


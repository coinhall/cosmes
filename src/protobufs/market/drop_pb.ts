// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file market/drop.proto (package pendulumlabs.market.market, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message pendulumlabs.market.market.Drop
 */
export class Drop extends Message<Drop> {
  /**
   * @generated from field: uint64 uid = 1;
   */
  uid = protoInt64.zero;

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: string pair = 3;
   */
  pair = "";

  /**
   * @generated from field: string drops = 4;
   */
  drops = "";

  /**
   * @generated from field: string product = 5;
   */
  product = "";

  /**
   * @generated from field: bool active = 6;
   */
  active = false;

  constructor(data?: PartialMessage<Drop>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.Drop";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uid", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "drops", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "product", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Drop {
    return new Drop().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Drop {
    return new Drop().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Drop {
    return new Drop().fromJsonString(jsonString, options);
  }

  static equals(a: Drop | PlainMessage<Drop> | undefined, b: Drop | PlainMessage<Drop> | undefined): boolean {
    return proto3.util.equals(Drop, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.Drops
 */
export class Drops extends Message<Drops> {
  /**
   * @generated from field: repeated uint64 uids = 1;
   */
  uids: bigint[] = [];

  /**
   * @generated from field: string sum = 2;
   */
  sum = "";

  constructor(data?: PartialMessage<Drops>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.Drops";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "sum", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Drops {
    return new Drops().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Drops {
    return new Drops().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Drops {
    return new Drops().fromJsonString(jsonString, options);
  }

  static equals(a: Drops | PlainMessage<Drops> | undefined, b: Drops | PlainMessage<Drops> | undefined): boolean {
    return proto3.util.equals(Drops, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.DropPairs
 */
export class DropPairs extends Message<DropPairs> {
  /**
   * @generated from field: repeated string pairs = 1;
   */
  pairs: string[] = [];

  constructor(data?: PartialMessage<DropPairs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.DropPairs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pairs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DropPairs {
    return new DropPairs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DropPairs {
    return new DropPairs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DropPairs {
    return new DropPairs().fromJsonString(jsonString, options);
  }

  static equals(a: DropPairs | PlainMessage<DropPairs> | undefined, b: DropPairs | PlainMessage<DropPairs> | undefined): boolean {
    return proto3.util.equals(DropPairs, a, b);
  }
}


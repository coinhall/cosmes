// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file market/burnings.proto (package pendulumlabs.market.market, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message pendulumlabs.market.market.Burnings
 */
export class Burnings extends Message<Burnings> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<Burnings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.Burnings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Burnings {
    return new Burnings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Burnings {
    return new Burnings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Burnings {
    return new Burnings().fromJsonString(jsonString, options);
  }

  static equals(a: Burnings | PlainMessage<Burnings> | undefined, b: Burnings | PlainMessage<Burnings> | undefined): boolean {
    return proto3.util.equals(Burnings, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.Burned
 */
export class Burned extends Message<Burned> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  constructor(data?: PartialMessage<Burned>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.Burned";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Burned {
    return new Burned().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Burned {
    return new Burned().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Burned {
    return new Burned().fromJsonString(jsonString, options);
  }

  static equals(a: Burned | PlainMessage<Burned> | undefined, b: Burned | PlainMessage<Burned> | undefined): boolean {
    return proto3.util.equals(Burned, a, b);
  }
}


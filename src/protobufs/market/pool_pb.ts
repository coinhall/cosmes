// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file market/pool.proto (package pendulumlabs.market.market, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message pendulumlabs.market.market.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * @generated from field: string pair = 1;
   */
  pair = "";

  /**
   * @generated from field: string denom1 = 2;
   */
  denom1 = "";

  /**
   * @generated from field: string denom2 = 3;
   */
  denom2 = "";

  /**
   * @generated from field: pendulumlabs.market.market.Volume volume1 = 4;
   */
  volume1?: Volume;

  /**
   * @generated from field: pendulumlabs.market.market.Volume volume2 = 5;
   */
  volume2?: Volume;

  /**
   * @generated from field: repeated pendulumlabs.market.market.Leader leaders = 6;
   */
  leaders: Leader[] = [];

  /**
   * @generated from field: string drops = 7;
   */
  drops = "";

  /**
   * @generated from field: uint64 history = 8;
   */
  history = protoInt64.zero;

  constructor(data?: PartialMessage<Pool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.Pool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "volume1", kind: "message", T: Volume },
    { no: 5, name: "volume2", kind: "message", T: Volume },
    { no: 6, name: "leaders", kind: "message", T: Leader, repeated: true },
    { no: 7, name: "drops", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "history", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options);
  }

  static equals(a: Pool | PlainMessage<Pool> | undefined, b: Pool | PlainMessage<Pool> | undefined): boolean {
    return proto3.util.equals(Pool, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.Leader
 */
export class Leader extends Message<Leader> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string drops = 2;
   */
  drops = "";

  constructor(data?: PartialMessage<Leader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.Leader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "drops", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Leader {
    return new Leader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Leader {
    return new Leader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Leader {
    return new Leader().fromJsonString(jsonString, options);
  }

  static equals(a: Leader | PlainMessage<Leader> | undefined, b: Leader | PlainMessage<Leader> | undefined): boolean {
    return proto3.util.equals(Leader, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.Volume
 */
export class Volume extends Message<Volume> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<Volume>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.Volume";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Volume {
    return new Volume().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Volume {
    return new Volume().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Volume {
    return new Volume().fromJsonString(jsonString, options);
  }

  static equals(a: Volume | PlainMessage<Volume> | undefined, b: Volume | PlainMessage<Volume> | undefined): boolean {
    return proto3.util.equals(Volume, a, b);
  }
}


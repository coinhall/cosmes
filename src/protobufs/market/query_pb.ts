// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file market/query.proto (package pendulumlabs.market.market, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Pool, Volume } from "./pool_pb.js";
import { PageRequest, PageResponse } from "../cosmos/base/query/v1beta1/pagination_pb.js";
import { Drop } from "./drop_pb.js";
import { Member } from "./member_pb.js";
import { Burnings } from "./burnings_pb.js";
import { Order, OrderResponse, Orders } from "./order_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message pendulumlabs.market.market.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message pendulumlabs.market.market.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: pendulumlabs.market.market.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryGetPoolRequest
 */
export class QueryGetPoolRequest extends Message<QueryGetPoolRequest> {
  /**
   * @generated from field: string pair = 1;
   */
  pair = "";

  constructor(data?: PartialMessage<QueryGetPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryGetPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPoolRequest | PlainMessage<QueryGetPoolRequest> | undefined, b: QueryGetPoolRequest | PlainMessage<QueryGetPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetPoolRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryGetPoolResponse
 */
export class QueryGetPoolResponse extends Message<QueryGetPoolResponse> {
  /**
   * @generated from field: pendulumlabs.market.market.Pool pool = 1;
   */
  pool?: Pool;

  constructor(data?: PartialMessage<QueryGetPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryGetPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Pool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPoolResponse | PlainMessage<QueryGetPoolResponse> | undefined, b: QueryGetPoolResponse | PlainMessage<QueryGetPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetPoolResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryAllPoolRequest
 */
export class QueryAllPoolRequest extends Message<QueryAllPoolRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryAllPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPoolRequest | PlainMessage<QueryAllPoolRequest> | undefined, b: QueryAllPoolRequest | PlainMessage<QueryAllPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllPoolRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryAllPoolResponse
 */
export class QueryAllPoolResponse extends Message<QueryAllPoolResponse> {
  /**
   * @generated from field: repeated pendulumlabs.market.market.Pool pool = 1;
   */
  pool: Pool[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryAllPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Pool, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPoolResponse | PlainMessage<QueryAllPoolResponse> | undefined, b: QueryAllPoolResponse | PlainMessage<QueryAllPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllPoolResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryVolumeRequest
 */
export class QueryVolumeRequest extends Message<QueryVolumeRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryVolumeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryVolumeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVolumeRequest {
    return new QueryVolumeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVolumeRequest {
    return new QueryVolumeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVolumeRequest {
    return new QueryVolumeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVolumeRequest | PlainMessage<QueryVolumeRequest> | undefined, b: QueryVolumeRequest | PlainMessage<QueryVolumeRequest> | undefined): boolean {
    return proto3.util.equals(QueryVolumeRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryVolumeResponse
 */
export class QueryVolumeResponse extends Message<QueryVolumeResponse> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  constructor(data?: PartialMessage<QueryVolumeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryVolumeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVolumeResponse {
    return new QueryVolumeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVolumeResponse {
    return new QueryVolumeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVolumeResponse {
    return new QueryVolumeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVolumeResponse | PlainMessage<QueryVolumeResponse> | undefined, b: QueryVolumeResponse | PlainMessage<QueryVolumeResponse> | undefined): boolean {
    return proto3.util.equals(QueryVolumeResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryAllVolumeRequest
 */
export class QueryAllVolumeRequest extends Message<QueryAllVolumeRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllVolumeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryAllVolumeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllVolumeRequest {
    return new QueryAllVolumeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllVolumeRequest {
    return new QueryAllVolumeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllVolumeRequest {
    return new QueryAllVolumeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllVolumeRequest | PlainMessage<QueryAllVolumeRequest> | undefined, b: QueryAllVolumeRequest | PlainMessage<QueryAllVolumeRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllVolumeRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryAllVolumeResponse
 */
export class QueryAllVolumeResponse extends Message<QueryAllVolumeResponse> {
  /**
   * @generated from field: repeated pendulumlabs.market.market.Volume volumes = 1;
   */
  volumes: Volume[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllVolumeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryAllVolumeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "volumes", kind: "message", T: Volume, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllVolumeResponse {
    return new QueryAllVolumeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllVolumeResponse {
    return new QueryAllVolumeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllVolumeResponse {
    return new QueryAllVolumeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllVolumeResponse | PlainMessage<QueryAllVolumeResponse> | undefined, b: QueryAllVolumeResponse | PlainMessage<QueryAllVolumeResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllVolumeResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryBurnedRequest
 */
export class QueryBurnedRequest extends Message<QueryBurnedRequest> {
  constructor(data?: PartialMessage<QueryBurnedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryBurnedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBurnedRequest {
    return new QueryBurnedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBurnedRequest {
    return new QueryBurnedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBurnedRequest {
    return new QueryBurnedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBurnedRequest | PlainMessage<QueryBurnedRequest> | undefined, b: QueryBurnedRequest | PlainMessage<QueryBurnedRequest> | undefined): boolean {
    return proto3.util.equals(QueryBurnedRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryBurnedResponse
 */
export class QueryBurnedResponse extends Message<QueryBurnedResponse> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<QueryBurnedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryBurnedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBurnedResponse {
    return new QueryBurnedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBurnedResponse {
    return new QueryBurnedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBurnedResponse {
    return new QueryBurnedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBurnedResponse | PlainMessage<QueryBurnedResponse> | undefined, b: QueryBurnedResponse | PlainMessage<QueryBurnedResponse> | undefined): boolean {
    return proto3.util.equals(QueryBurnedResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropRequest
 */
export class QueryDropRequest extends Message<QueryDropRequest> {
  /**
   * @generated from field: uint64 uid = 1;
   */
  uid = protoInt64.zero;

  constructor(data?: PartialMessage<QueryDropRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uid", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropRequest {
    return new QueryDropRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropRequest {
    return new QueryDropRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropRequest {
    return new QueryDropRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropRequest | PlainMessage<QueryDropRequest> | undefined, b: QueryDropRequest | PlainMessage<QueryDropRequest> | undefined): boolean {
    return proto3.util.equals(QueryDropRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropCoinRequest
 */
export class QueryDropCoinRequest extends Message<QueryDropCoinRequest> {
  /**
   * @generated from field: string denomA = 1;
   */
  denomA = "";

  /**
   * @generated from field: string denomB = 2;
   */
  denomB = "";

  /**
   * @generated from field: string amountA = 3;
   */
  amountA = "";

  constructor(data?: PartialMessage<QueryDropCoinRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropCoinRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denomA", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denomB", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amountA", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropCoinRequest {
    return new QueryDropCoinRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropCoinRequest {
    return new QueryDropCoinRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropCoinRequest {
    return new QueryDropCoinRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropCoinRequest | PlainMessage<QueryDropCoinRequest> | undefined, b: QueryDropCoinRequest | PlainMessage<QueryDropCoinRequest> | undefined): boolean {
    return proto3.util.equals(QueryDropCoinRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropCoinResponse
 */
export class QueryDropCoinResponse extends Message<QueryDropCoinResponse> {
  /**
   * @generated from field: string drops = 1;
   */
  drops = "";

  /**
   * @generated from field: string amountB = 2;
   */
  amountB = "";

  constructor(data?: PartialMessage<QueryDropCoinResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropCoinResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "drops", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amountB", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropCoinResponse {
    return new QueryDropCoinResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropCoinResponse {
    return new QueryDropCoinResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropCoinResponse {
    return new QueryDropCoinResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropCoinResponse | PlainMessage<QueryDropCoinResponse> | undefined, b: QueryDropCoinResponse | PlainMessage<QueryDropCoinResponse> | undefined): boolean {
    return proto3.util.equals(QueryDropCoinResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropResponse
 */
export class QueryDropResponse extends Message<QueryDropResponse> {
  /**
   * @generated from field: pendulumlabs.market.market.Drop drop = 1;
   */
  drop?: Drop;

  constructor(data?: PartialMessage<QueryDropResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "drop", kind: "message", T: Drop },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropResponse {
    return new QueryDropResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropResponse {
    return new QueryDropResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropResponse {
    return new QueryDropResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropResponse | PlainMessage<QueryDropResponse> | undefined, b: QueryDropResponse | PlainMessage<QueryDropResponse> | undefined): boolean {
    return proto3.util.equals(QueryDropResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropAmountsRequest
 */
export class QueryDropAmountsRequest extends Message<QueryDropAmountsRequest> {
  /**
   * @generated from field: uint64 uid = 1;
   */
  uid = protoInt64.zero;

  constructor(data?: PartialMessage<QueryDropAmountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropAmountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uid", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropAmountsRequest {
    return new QueryDropAmountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropAmountsRequest {
    return new QueryDropAmountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropAmountsRequest {
    return new QueryDropAmountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropAmountsRequest | PlainMessage<QueryDropAmountsRequest> | undefined, b: QueryDropAmountsRequest | PlainMessage<QueryDropAmountsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDropAmountsRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropAmountsResponse
 */
export class QueryDropAmountsResponse extends Message<QueryDropAmountsResponse> {
  /**
   * @generated from field: string denom1 = 1;
   */
  denom1 = "";

  /**
   * @generated from field: string denom2 = 2;
   */
  denom2 = "";

  /**
   * @generated from field: string amount1 = 3;
   */
  amount1 = "";

  /**
   * @generated from field: string amount2 = 4;
   */
  amount2 = "";

  constructor(data?: PartialMessage<QueryDropAmountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropAmountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropAmountsResponse {
    return new QueryDropAmountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropAmountsResponse {
    return new QueryDropAmountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropAmountsResponse {
    return new QueryDropAmountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropAmountsResponse | PlainMessage<QueryDropAmountsResponse> | undefined, b: QueryDropAmountsResponse | PlainMessage<QueryDropAmountsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDropAmountsResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropsToCoinsRequest
 */
export class QueryDropsToCoinsRequest extends Message<QueryDropsToCoinsRequest> {
  /**
   * @generated from field: string denom1 = 1;
   */
  denom1 = "";

  /**
   * @generated from field: string denom2 = 2;
   */
  denom2 = "";

  /**
   * @generated from field: string drops = 3;
   */
  drops = "";

  constructor(data?: PartialMessage<QueryDropsToCoinsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropsToCoinsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "drops", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropsToCoinsRequest {
    return new QueryDropsToCoinsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropsToCoinsRequest {
    return new QueryDropsToCoinsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropsToCoinsRequest {
    return new QueryDropsToCoinsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropsToCoinsRequest | PlainMessage<QueryDropsToCoinsRequest> | undefined, b: QueryDropsToCoinsRequest | PlainMessage<QueryDropsToCoinsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDropsToCoinsRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropsToCoinsResponse
 */
export class QueryDropsToCoinsResponse extends Message<QueryDropsToCoinsResponse> {
  /**
   * @generated from field: string denom1 = 1;
   */
  denom1 = "";

  /**
   * @generated from field: string amount1 = 2;
   */
  amount1 = "";

  /**
   * @generated from field: string denom2 = 3;
   */
  denom2 = "";

  /**
   * @generated from field: string amount2 = 4;
   */
  amount2 = "";

  constructor(data?: PartialMessage<QueryDropsToCoinsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropsToCoinsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropsToCoinsResponse {
    return new QueryDropsToCoinsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropsToCoinsResponse {
    return new QueryDropsToCoinsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropsToCoinsResponse {
    return new QueryDropsToCoinsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropsToCoinsResponse | PlainMessage<QueryDropsToCoinsResponse> | undefined, b: QueryDropsToCoinsResponse | PlainMessage<QueryDropsToCoinsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDropsToCoinsResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropPairsRequest
 */
export class QueryDropPairsRequest extends Message<QueryDropPairsRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryDropPairsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropPairsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropPairsRequest {
    return new QueryDropPairsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropPairsRequest {
    return new QueryDropPairsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropPairsRequest {
    return new QueryDropPairsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropPairsRequest | PlainMessage<QueryDropPairsRequest> | undefined, b: QueryDropPairsRequest | PlainMessage<QueryDropPairsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDropPairsRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropPairsResponse
 */
export class QueryDropPairsResponse extends Message<QueryDropPairsResponse> {
  /**
   * @generated from field: repeated string pairs = 1;
   */
  pairs: string[] = [];

  constructor(data?: PartialMessage<QueryDropPairsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropPairsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pairs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropPairsResponse {
    return new QueryDropPairsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropPairsResponse {
    return new QueryDropPairsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropPairsResponse {
    return new QueryDropPairsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropPairsResponse | PlainMessage<QueryDropPairsResponse> | undefined, b: QueryDropPairsResponse | PlainMessage<QueryDropPairsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDropPairsResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropOwnerPairRequest
 */
export class QueryDropOwnerPairRequest extends Message<QueryDropOwnerPairRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string pair = 2;
   */
  pair = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDropOwnerPairRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropOwnerPairRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropOwnerPairRequest {
    return new QueryDropOwnerPairRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropOwnerPairRequest {
    return new QueryDropOwnerPairRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropOwnerPairRequest {
    return new QueryDropOwnerPairRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropOwnerPairRequest | PlainMessage<QueryDropOwnerPairRequest> | undefined, b: QueryDropOwnerPairRequest | PlainMessage<QueryDropOwnerPairRequest> | undefined): boolean {
    return proto3.util.equals(QueryDropOwnerPairRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropOwnerPairSumRequest
 */
export class QueryDropOwnerPairSumRequest extends Message<QueryDropOwnerPairSumRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string pair = 2;
   */
  pair = "";

  constructor(data?: PartialMessage<QueryDropOwnerPairSumRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropOwnerPairSumRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropOwnerPairSumRequest {
    return new QueryDropOwnerPairSumRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropOwnerPairSumRequest {
    return new QueryDropOwnerPairSumRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropOwnerPairSumRequest {
    return new QueryDropOwnerPairSumRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropOwnerPairSumRequest | PlainMessage<QueryDropOwnerPairSumRequest> | undefined, b: QueryDropOwnerPairSumRequest | PlainMessage<QueryDropOwnerPairSumRequest> | undefined): boolean {
    return proto3.util.equals(QueryDropOwnerPairSumRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropOwnerPairSumResponse
 */
export class QueryDropOwnerPairSumResponse extends Message<QueryDropOwnerPairSumResponse> {
  /**
   * @generated from field: string sum = 1;
   */
  sum = "";

  constructor(data?: PartialMessage<QueryDropOwnerPairSumResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropOwnerPairSumResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sum", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropOwnerPairSumResponse {
    return new QueryDropOwnerPairSumResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropOwnerPairSumResponse {
    return new QueryDropOwnerPairSumResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropOwnerPairSumResponse {
    return new QueryDropOwnerPairSumResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropOwnerPairSumResponse | PlainMessage<QueryDropOwnerPairSumResponse> | undefined, b: QueryDropOwnerPairSumResponse | PlainMessage<QueryDropOwnerPairSumResponse> | undefined): boolean {
    return proto3.util.equals(QueryDropOwnerPairSumResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropOwnerPairUidsRequest
 */
export class QueryDropOwnerPairUidsRequest extends Message<QueryDropOwnerPairUidsRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string pair = 2;
   */
  pair = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDropOwnerPairUidsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropOwnerPairUidsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropOwnerPairUidsRequest {
    return new QueryDropOwnerPairUidsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropOwnerPairUidsRequest {
    return new QueryDropOwnerPairUidsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropOwnerPairUidsRequest {
    return new QueryDropOwnerPairUidsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropOwnerPairUidsRequest | PlainMessage<QueryDropOwnerPairUidsRequest> | undefined, b: QueryDropOwnerPairUidsRequest | PlainMessage<QueryDropOwnerPairUidsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDropOwnerPairUidsRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryUidsResponse
 */
export class QueryUidsResponse extends Message<QueryUidsResponse> {
  /**
   * @generated from field: repeated uint64 uids = 1;
   */
  uids: bigint[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryUidsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryUidsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUidsResponse {
    return new QueryUidsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUidsResponse {
    return new QueryUidsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUidsResponse {
    return new QueryUidsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUidsResponse | PlainMessage<QueryUidsResponse> | undefined, b: QueryUidsResponse | PlainMessage<QueryUidsResponse> | undefined): boolean {
    return proto3.util.equals(QueryUidsResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropOwnerPairDetailRequest
 */
export class QueryDropOwnerPairDetailRequest extends Message<QueryDropOwnerPairDetailRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string pair = 2;
   */
  pair = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDropOwnerPairDetailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropOwnerPairDetailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropOwnerPairDetailRequest {
    return new QueryDropOwnerPairDetailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropOwnerPairDetailRequest {
    return new QueryDropOwnerPairDetailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropOwnerPairDetailRequest {
    return new QueryDropOwnerPairDetailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropOwnerPairDetailRequest | PlainMessage<QueryDropOwnerPairDetailRequest> | undefined, b: QueryDropOwnerPairDetailRequest | PlainMessage<QueryDropOwnerPairDetailRequest> | undefined): boolean {
    return proto3.util.equals(QueryDropOwnerPairDetailRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryAllDropRequest
 */
export class QueryAllDropRequest extends Message<QueryAllDropRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllDropRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryAllDropRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllDropRequest {
    return new QueryAllDropRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllDropRequest {
    return new QueryAllDropRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllDropRequest {
    return new QueryAllDropRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllDropRequest | PlainMessage<QueryAllDropRequest> | undefined, b: QueryAllDropRequest | PlainMessage<QueryAllDropRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllDropRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryDropsResponse
 */
export class QueryDropsResponse extends Message<QueryDropsResponse> {
  /**
   * @generated from field: repeated pendulumlabs.market.market.Drop drops = 1;
   */
  drops: Drop[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDropsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryDropsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "drops", kind: "message", T: Drop, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDropsResponse {
    return new QueryDropsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDropsResponse {
    return new QueryDropsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDropsResponse {
    return new QueryDropsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDropsResponse | PlainMessage<QueryDropsResponse> | undefined, b: QueryDropsResponse | PlainMessage<QueryDropsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDropsResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryGetMemberRequest
 */
export class QueryGetMemberRequest extends Message<QueryGetMemberRequest> {
  /**
   * @generated from field: string denomA = 2;
   */
  denomA = "";

  /**
   * @generated from field: string denomB = 3;
   */
  denomB = "";

  constructor(data?: PartialMessage<QueryGetMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryGetMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "denomA", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denomB", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetMemberRequest {
    return new QueryGetMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetMemberRequest {
    return new QueryGetMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetMemberRequest {
    return new QueryGetMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetMemberRequest | PlainMessage<QueryGetMemberRequest> | undefined, b: QueryGetMemberRequest | PlainMessage<QueryGetMemberRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetMemberRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryGetMemberResponse
 */
export class QueryGetMemberResponse extends Message<QueryGetMemberResponse> {
  /**
   * @generated from field: pendulumlabs.market.market.Member member = 1;
   */
  member?: Member;

  constructor(data?: PartialMessage<QueryGetMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryGetMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "member", kind: "message", T: Member },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetMemberResponse {
    return new QueryGetMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetMemberResponse {
    return new QueryGetMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetMemberResponse {
    return new QueryGetMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetMemberResponse | PlainMessage<QueryGetMemberResponse> | undefined, b: QueryGetMemberResponse | PlainMessage<QueryGetMemberResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetMemberResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryAllMemberRequest
 */
export class QueryAllMemberRequest extends Message<QueryAllMemberRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryAllMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllMemberRequest {
    return new QueryAllMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllMemberRequest {
    return new QueryAllMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllMemberRequest {
    return new QueryAllMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllMemberRequest | PlainMessage<QueryAllMemberRequest> | undefined, b: QueryAllMemberRequest | PlainMessage<QueryAllMemberRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllMemberRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryAllMemberResponse
 */
export class QueryAllMemberResponse extends Message<QueryAllMemberResponse> {
  /**
   * @generated from field: repeated pendulumlabs.market.market.Member member = 1;
   */
  member: Member[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryAllMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "member", kind: "message", T: Member, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllMemberResponse {
    return new QueryAllMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllMemberResponse {
    return new QueryAllMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllMemberResponse {
    return new QueryAllMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllMemberResponse | PlainMessage<QueryAllMemberResponse> | undefined, b: QueryAllMemberResponse | PlainMessage<QueryAllMemberResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllMemberResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryGetBurningsRequest
 */
export class QueryGetBurningsRequest extends Message<QueryGetBurningsRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryGetBurningsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryGetBurningsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetBurningsRequest {
    return new QueryGetBurningsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetBurningsRequest {
    return new QueryGetBurningsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetBurningsRequest {
    return new QueryGetBurningsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetBurningsRequest | PlainMessage<QueryGetBurningsRequest> | undefined, b: QueryGetBurningsRequest | PlainMessage<QueryGetBurningsRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetBurningsRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryGetBurningsResponse
 */
export class QueryGetBurningsResponse extends Message<QueryGetBurningsResponse> {
  /**
   * @generated from field: pendulumlabs.market.market.Burnings burnings = 1;
   */
  burnings?: Burnings;

  constructor(data?: PartialMessage<QueryGetBurningsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryGetBurningsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "burnings", kind: "message", T: Burnings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetBurningsResponse {
    return new QueryGetBurningsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetBurningsResponse {
    return new QueryGetBurningsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetBurningsResponse {
    return new QueryGetBurningsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetBurningsResponse | PlainMessage<QueryGetBurningsResponse> | undefined, b: QueryGetBurningsResponse | PlainMessage<QueryGetBurningsResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetBurningsResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryAllBurningsRequest
 */
export class QueryAllBurningsRequest extends Message<QueryAllBurningsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllBurningsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryAllBurningsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllBurningsRequest {
    return new QueryAllBurningsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllBurningsRequest {
    return new QueryAllBurningsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllBurningsRequest {
    return new QueryAllBurningsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllBurningsRequest | PlainMessage<QueryAllBurningsRequest> | undefined, b: QueryAllBurningsRequest | PlainMessage<QueryAllBurningsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllBurningsRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryAllBurningsResponse
 */
export class QueryAllBurningsResponse extends Message<QueryAllBurningsResponse> {
  /**
   * @generated from field: repeated pendulumlabs.market.market.Burnings burnings = 1;
   */
  burnings: Burnings[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllBurningsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryAllBurningsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "burnings", kind: "message", T: Burnings, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllBurningsResponse {
    return new QueryAllBurningsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllBurningsResponse {
    return new QueryAllBurningsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllBurningsResponse {
    return new QueryAllBurningsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllBurningsResponse | PlainMessage<QueryAllBurningsResponse> | undefined, b: QueryAllBurningsResponse | PlainMessage<QueryAllBurningsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllBurningsResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryOrderRequest
 */
export class QueryOrderRequest extends Message<QueryOrderRequest> {
  /**
   * @generated from field: uint64 uid = 1;
   */
  uid = protoInt64.zero;

  constructor(data?: PartialMessage<QueryOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uid", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOrderRequest {
    return new QueryOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOrderRequest {
    return new QueryOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOrderRequest {
    return new QueryOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOrderRequest | PlainMessage<QueryOrderRequest> | undefined, b: QueryOrderRequest | PlainMessage<QueryOrderRequest> | undefined): boolean {
    return proto3.util.equals(QueryOrderRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryOrderResponse
 */
export class QueryOrderResponse extends Message<QueryOrderResponse> {
  /**
   * @generated from field: pendulumlabs.market.market.Order order = 1;
   */
  order?: Order;

  constructor(data?: PartialMessage<QueryOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Order },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOrderResponse {
    return new QueryOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOrderResponse {
    return new QueryOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOrderResponse {
    return new QueryOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOrderResponse | PlainMessage<QueryOrderResponse> | undefined, b: QueryOrderResponse | PlainMessage<QueryOrderResponse> | undefined): boolean {
    return proto3.util.equals(QueryOrderResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryOrdersResponse
 */
export class QueryOrdersResponse extends Message<QueryOrdersResponse> {
  /**
   * @generated from field: repeated pendulumlabs.market.market.Order orders = 1;
   */
  orders: Order[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryOrdersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryOrdersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "orders", kind: "message", T: Order, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOrdersResponse {
    return new QueryOrdersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOrdersResponse {
    return new QueryOrdersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOrdersResponse {
    return new QueryOrdersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOrdersResponse | PlainMessage<QueryOrdersResponse> | undefined, b: QueryOrdersResponse | PlainMessage<QueryOrdersResponse> | undefined): boolean {
    return proto3.util.equals(QueryOrdersResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryAllOrderRequest
 */
export class QueryAllOrderRequest extends Message<QueryAllOrderRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryAllOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllOrderRequest {
    return new QueryAllOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllOrderRequest {
    return new QueryAllOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllOrderRequest {
    return new QueryAllOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllOrderRequest | PlainMessage<QueryAllOrderRequest> | undefined, b: QueryAllOrderRequest | PlainMessage<QueryAllOrderRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllOrderRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryOrderOwnerRequest
 */
export class QueryOrderOwnerRequest extends Message<QueryOrderOwnerRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryOrderOwnerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryOrderOwnerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOrderOwnerRequest {
    return new QueryOrderOwnerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOrderOwnerRequest {
    return new QueryOrderOwnerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOrderOwnerRequest {
    return new QueryOrderOwnerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOrderOwnerRequest | PlainMessage<QueryOrderOwnerRequest> | undefined, b: QueryOrderOwnerRequest | PlainMessage<QueryOrderOwnerRequest> | undefined): boolean {
    return proto3.util.equals(QueryOrderOwnerRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryOrderOwnerUidsResponse
 */
export class QueryOrderOwnerUidsResponse extends Message<QueryOrderOwnerUidsResponse> {
  /**
   * @generated from field: pendulumlabs.market.market.Orders orders = 1;
   */
  orders?: Orders;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryOrderOwnerUidsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryOrderOwnerUidsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "orders", kind: "message", T: Orders },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOrderOwnerUidsResponse {
    return new QueryOrderOwnerUidsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOrderOwnerUidsResponse {
    return new QueryOrderOwnerUidsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOrderOwnerUidsResponse {
    return new QueryOrderOwnerUidsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOrderOwnerUidsResponse | PlainMessage<QueryOrderOwnerUidsResponse> | undefined, b: QueryOrderOwnerUidsResponse | PlainMessage<QueryOrderOwnerUidsResponse> | undefined): boolean {
    return proto3.util.equals(QueryOrderOwnerUidsResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryOrderOwnerPairRequest
 */
export class QueryOrderOwnerPairRequest extends Message<QueryOrderOwnerPairRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string pair = 2;
   */
  pair = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryOrderOwnerPairRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryOrderOwnerPairRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOrderOwnerPairRequest {
    return new QueryOrderOwnerPairRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOrderOwnerPairRequest {
    return new QueryOrderOwnerPairRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOrderOwnerPairRequest {
    return new QueryOrderOwnerPairRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOrderOwnerPairRequest | PlainMessage<QueryOrderOwnerPairRequest> | undefined, b: QueryOrderOwnerPairRequest | PlainMessage<QueryOrderOwnerPairRequest> | undefined): boolean {
    return proto3.util.equals(QueryOrderOwnerPairRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryOrderOwnerPairResponse
 */
export class QueryOrderOwnerPairResponse extends Message<QueryOrderOwnerPairResponse> {
  /**
   * @generated from field: repeated pendulumlabs.market.market.Order order = 1;
   */
  order: Order[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryOrderOwnerPairResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryOrderOwnerPairResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Order, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOrderOwnerPairResponse {
    return new QueryOrderOwnerPairResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOrderOwnerPairResponse {
    return new QueryOrderOwnerPairResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOrderOwnerPairResponse {
    return new QueryOrderOwnerPairResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOrderOwnerPairResponse | PlainMessage<QueryOrderOwnerPairResponse> | undefined, b: QueryOrderOwnerPairResponse | PlainMessage<QueryOrderOwnerPairResponse> | undefined): boolean {
    return proto3.util.equals(QueryOrderOwnerPairResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryBookRequest
 */
export class QueryBookRequest extends Message<QueryBookRequest> {
  /**
   * @generated from field: string denomA = 1;
   */
  denomA = "";

  /**
   * @generated from field: string denomB = 2;
   */
  denomB = "";

  /**
   * @generated from field: string orderType = 3;
   */
  orderType = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 4;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryBookRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryBookRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denomA", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denomB", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "orderType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBookRequest {
    return new QueryBookRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBookRequest {
    return new QueryBookRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBookRequest {
    return new QueryBookRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBookRequest | PlainMessage<QueryBookRequest> | undefined, b: QueryBookRequest | PlainMessage<QueryBookRequest> | undefined): boolean {
    return proto3.util.equals(QueryBookRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryBookResponse
 */
export class QueryBookResponse extends Message<QueryBookResponse> {
  /**
   * @generated from field: repeated pendulumlabs.market.market.OrderResponse book = 1;
   */
  book: OrderResponse[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryBookResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryBookResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "book", kind: "message", T: OrderResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBookResponse {
    return new QueryBookResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBookResponse {
    return new QueryBookResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBookResponse {
    return new QueryBookResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBookResponse | PlainMessage<QueryBookResponse> | undefined, b: QueryBookResponse | PlainMessage<QueryBookResponse> | undefined): boolean {
    return proto3.util.equals(QueryBookResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryBookendsRequest
 */
export class QueryBookendsRequest extends Message<QueryBookendsRequest> {
  /**
   * @generated from field: string coinA = 1;
   */
  coinA = "";

  /**
   * @generated from field: string coinB = 2;
   */
  coinB = "";

  /**
   * @generated from field: string orderType = 3;
   */
  orderType = "";

  /**
   * @generated from field: repeated string rate = 4;
   */
  rate: string[] = [];

  constructor(data?: PartialMessage<QueryBookendsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryBookendsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coinA", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "coinB", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "orderType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "rate", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBookendsRequest {
    return new QueryBookendsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBookendsRequest {
    return new QueryBookendsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBookendsRequest {
    return new QueryBookendsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBookendsRequest | PlainMessage<QueryBookendsRequest> | undefined, b: QueryBookendsRequest | PlainMessage<QueryBookendsRequest> | undefined): boolean {
    return proto3.util.equals(QueryBookendsRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryBookendsResponse
 */
export class QueryBookendsResponse extends Message<QueryBookendsResponse> {
  /**
   * @generated from field: string coinA = 1;
   */
  coinA = "";

  /**
   * @generated from field: string coinB = 2;
   */
  coinB = "";

  /**
   * @generated from field: string orderType = 3;
   */
  orderType = "";

  /**
   * @generated from field: repeated string rate = 4;
   */
  rate: string[] = [];

  /**
   * @generated from field: uint64 prev = 5;
   */
  prev = protoInt64.zero;

  /**
   * @generated from field: uint64 next = 6;
   */
  next = protoInt64.zero;

  constructor(data?: PartialMessage<QueryBookendsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryBookendsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coinA", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "coinB", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "orderType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "rate", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "prev", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "next", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBookendsResponse {
    return new QueryBookendsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBookendsResponse {
    return new QueryBookendsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBookendsResponse {
    return new QueryBookendsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBookendsResponse | PlainMessage<QueryBookendsResponse> | undefined, b: QueryBookendsResponse | PlainMessage<QueryBookendsResponse> | undefined): boolean {
    return proto3.util.equals(QueryBookendsResponse, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryHistoryRequest
 */
export class QueryHistoryRequest extends Message<QueryHistoryRequest> {
  /**
   * @generated from field: string pair = 1;
   */
  pair = "";

  /**
   * @generated from field: string length = 2;
   */
  length = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "length", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryHistoryRequest {
    return new QueryHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryHistoryRequest {
    return new QueryHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryHistoryRequest {
    return new QueryHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryHistoryRequest | PlainMessage<QueryHistoryRequest> | undefined, b: QueryHistoryRequest | PlainMessage<QueryHistoryRequest> | undefined): boolean {
    return proto3.util.equals(QueryHistoryRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryHistoryResponse
 */
export class QueryHistoryResponse extends Message<QueryHistoryResponse> {
  /**
   * @generated from field: repeated pendulumlabs.market.market.OrderResponse history = 1;
   */
  history: OrderResponse[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "history", kind: "message", T: OrderResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryHistoryResponse {
    return new QueryHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryHistoryResponse {
    return new QueryHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryHistoryResponse {
    return new QueryHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryHistoryResponse | PlainMessage<QueryHistoryResponse> | undefined, b: QueryHistoryResponse | PlainMessage<QueryHistoryResponse> | undefined): boolean {
    return proto3.util.equals(QueryHistoryResponse, a, b);
  }
}

/**
 * Market Quote: denom is the denom that is input for quote
 *
 * @generated from message pendulumlabs.market.market.QueryQuoteRequest
 */
export class QueryQuoteRequest extends Message<QueryQuoteRequest> {
  /**
   * @generated from field: string denomAsk = 1;
   */
  denomAsk = "";

  /**
   * @generated from field: string denomBid = 2;
   */
  denomBid = "";

  /**
   * @generated from field: string denomAmount = 3;
   */
  denomAmount = "";

  /**
   * @generated from field: string amount = 4;
   */
  amount = "";

  constructor(data?: PartialMessage<QueryQuoteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryQuoteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denomAsk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denomBid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denomAmount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryQuoteRequest {
    return new QueryQuoteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryQuoteRequest {
    return new QueryQuoteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryQuoteRequest {
    return new QueryQuoteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryQuoteRequest | PlainMessage<QueryQuoteRequest> | undefined, b: QueryQuoteRequest | PlainMessage<QueryQuoteRequest> | undefined): boolean {
    return proto3.util.equals(QueryQuoteRequest, a, b);
  }
}

/**
 * @generated from message pendulumlabs.market.market.QueryQuoteResponse
 */
export class QueryQuoteResponse extends Message<QueryQuoteResponse> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<QueryQuoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.QueryQuoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryQuoteResponse {
    return new QueryQuoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryQuoteResponse {
    return new QueryQuoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryQuoteResponse {
    return new QueryQuoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryQuoteResponse | PlainMessage<QueryQuoteResponse> | undefined, b: QueryQuoteResponse | PlainMessage<QueryQuoteResponse> | undefined): boolean {
    return proto3.util.equals(QueryQuoteResponse, a, b);
  }
}


// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file market/genesis.proto (package pendulumlabs.market.market, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Pool } from "./pool_pb.js";
import { Drop } from "./drop_pb.js";
import { Member } from "./member_pb.js";
import { Burnings } from "./burnings_pb.js";
import { Order } from "./order_pb.js";

/**
 * GenesisState defines the market module's genesis state.
 *
 * @generated from message pendulumlabs.market.market.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: pendulumlabs.market.market.Params params = 1;
   */
  params?: Params;

  /**
   * @generated from field: repeated pendulumlabs.market.market.Pool poolList = 2;
   */
  poolList: Pool[] = [];

  /**
   * @generated from field: repeated pendulumlabs.market.market.Drop dropList = 3;
   */
  dropList: Drop[] = [];

  /**
   * @generated from field: repeated pendulumlabs.market.market.Member memberList = 4;
   */
  memberList: Member[] = [];

  /**
   * @generated from field: repeated pendulumlabs.market.market.Burnings burningsList = 5;
   */
  burningsList: Burnings[] = [];

  /**
   * this line is used by starport scaffolding # genesis/proto/state
   *
   * @generated from field: repeated pendulumlabs.market.market.Order orderList = 6;
   */
  orderList: Order[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pendulumlabs.market.market.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "poolList", kind: "message", T: Pool, repeated: true },
    { no: 3, name: "dropList", kind: "message", T: Drop, repeated: true },
    { no: 4, name: "memberList", kind: "message", T: Member, repeated: true },
    { no: 5, name: "burningsList", kind: "message", T: Burnings, repeated: true },
    { no: 6, name: "orderList", kind: "message", T: Order, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}


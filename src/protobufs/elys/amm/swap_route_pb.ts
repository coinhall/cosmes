// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/amm/swap_route.proto (package elys.amm, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message elys.amm.SwapAmountInRoute
 */
export class SwapAmountInRoute extends Message<SwapAmountInRoute> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string token_out_denom = 2;
   */
  tokenOutDenom = "";

  constructor(data?: PartialMessage<SwapAmountInRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.SwapAmountInRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_out_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SwapAmountInRoute {
    return new SwapAmountInRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SwapAmountInRoute {
    return new SwapAmountInRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SwapAmountInRoute {
    return new SwapAmountInRoute().fromJsonString(jsonString, options);
  }

  static equals(a: SwapAmountInRoute | PlainMessage<SwapAmountInRoute> | undefined, b: SwapAmountInRoute | PlainMessage<SwapAmountInRoute> | undefined): boolean {
    return proto3.util.equals(SwapAmountInRoute, a, b);
  }
}

/**
 * @generated from message elys.amm.SwapAmountOutRoute
 */
export class SwapAmountOutRoute extends Message<SwapAmountOutRoute> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string token_in_denom = 2;
   */
  tokenInDenom = "";

  constructor(data?: PartialMessage<SwapAmountOutRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.SwapAmountOutRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_in_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SwapAmountOutRoute {
    return new SwapAmountOutRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SwapAmountOutRoute {
    return new SwapAmountOutRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SwapAmountOutRoute {
    return new SwapAmountOutRoute().fromJsonString(jsonString, options);
  }

  static equals(a: SwapAmountOutRoute | PlainMessage<SwapAmountOutRoute> | undefined, b: SwapAmountOutRoute | PlainMessage<SwapAmountOutRoute> | undefined): boolean {
    return proto3.util.equals(SwapAmountOutRoute, a, b);
  }
}


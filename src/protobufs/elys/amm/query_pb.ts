// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/amm/query.proto (package elys.amm, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { OraclePoolSlippageTrack, Pool, PoolExtraInfo } from "./pool_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { DenomLiquidity } from "./denom_liquidity_pb.js";
import { SwapAmountInRoute, SwapAmountOutRoute } from "./swap_route_pb.js";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message elys.amm.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message elys.amm.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: elys.amm.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryGetPoolRequest
 */
export class QueryGetPoolRequest extends Message<QueryGetPoolRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGetPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryGetPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPoolRequest {
    return new QueryGetPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPoolRequest | PlainMessage<QueryGetPoolRequest> | undefined, b: QueryGetPoolRequest | PlainMessage<QueryGetPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetPoolRequest, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryGetPoolResponse
 */
export class QueryGetPoolResponse extends Message<QueryGetPoolResponse> {
  /**
   * @generated from field: elys.amm.Pool pool = 1;
   */
  pool?: Pool;

  /**
   * @generated from field: elys.amm.PoolExtraInfo extra_info = 2;
   */
  extraInfo?: PoolExtraInfo;

  constructor(data?: PartialMessage<QueryGetPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryGetPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Pool },
    { no: 2, name: "extra_info", kind: "message", T: PoolExtraInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPoolResponse {
    return new QueryGetPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPoolResponse | PlainMessage<QueryGetPoolResponse> | undefined, b: QueryGetPoolResponse | PlainMessage<QueryGetPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryAllPoolRequest
 */
export class QueryAllPoolRequest extends Message<QueryAllPoolRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryAllPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPoolRequest {
    return new QueryAllPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPoolRequest | PlainMessage<QueryAllPoolRequest> | undefined, b: QueryAllPoolRequest | PlainMessage<QueryAllPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllPoolRequest, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryAllPoolResponse
 */
export class QueryAllPoolResponse extends Message<QueryAllPoolResponse> {
  /**
   * @generated from field: repeated elys.amm.Pool pool = 1;
   */
  pool: Pool[] = [];

  /**
   * @generated from field: repeated elys.amm.PoolExtraInfo extra_infos = 2;
   */
  extraInfos: PoolExtraInfo[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 3;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryAllPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Pool, repeated: true },
    { no: 2, name: "extra_infos", kind: "message", T: PoolExtraInfo, repeated: true },
    { no: 3, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPoolResponse {
    return new QueryAllPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPoolResponse | PlainMessage<QueryAllPoolResponse> | undefined, b: QueryAllPoolResponse | PlainMessage<QueryAllPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllPoolResponse, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryGetDenomLiquidityRequest
 */
export class QueryGetDenomLiquidityRequest extends Message<QueryGetDenomLiquidityRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryGetDenomLiquidityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryGetDenomLiquidityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetDenomLiquidityRequest {
    return new QueryGetDenomLiquidityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetDenomLiquidityRequest {
    return new QueryGetDenomLiquidityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetDenomLiquidityRequest {
    return new QueryGetDenomLiquidityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetDenomLiquidityRequest | PlainMessage<QueryGetDenomLiquidityRequest> | undefined, b: QueryGetDenomLiquidityRequest | PlainMessage<QueryGetDenomLiquidityRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetDenomLiquidityRequest, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryGetDenomLiquidityResponse
 */
export class QueryGetDenomLiquidityResponse extends Message<QueryGetDenomLiquidityResponse> {
  /**
   * @generated from field: elys.amm.DenomLiquidity denom_liquidity = 1;
   */
  denomLiquidity?: DenomLiquidity;

  constructor(data?: PartialMessage<QueryGetDenomLiquidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryGetDenomLiquidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom_liquidity", kind: "message", T: DenomLiquidity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetDenomLiquidityResponse {
    return new QueryGetDenomLiquidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetDenomLiquidityResponse {
    return new QueryGetDenomLiquidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetDenomLiquidityResponse {
    return new QueryGetDenomLiquidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetDenomLiquidityResponse | PlainMessage<QueryGetDenomLiquidityResponse> | undefined, b: QueryGetDenomLiquidityResponse | PlainMessage<QueryGetDenomLiquidityResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetDenomLiquidityResponse, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryAllDenomLiquidityRequest
 */
export class QueryAllDenomLiquidityRequest extends Message<QueryAllDenomLiquidityRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllDenomLiquidityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryAllDenomLiquidityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllDenomLiquidityRequest {
    return new QueryAllDenomLiquidityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllDenomLiquidityRequest {
    return new QueryAllDenomLiquidityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllDenomLiquidityRequest {
    return new QueryAllDenomLiquidityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllDenomLiquidityRequest | PlainMessage<QueryAllDenomLiquidityRequest> | undefined, b: QueryAllDenomLiquidityRequest | PlainMessage<QueryAllDenomLiquidityRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllDenomLiquidityRequest, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryAllDenomLiquidityResponse
 */
export class QueryAllDenomLiquidityResponse extends Message<QueryAllDenomLiquidityResponse> {
  /**
   * @generated from field: repeated elys.amm.DenomLiquidity denom_liquidity = 1;
   */
  denomLiquidity: DenomLiquidity[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllDenomLiquidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryAllDenomLiquidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom_liquidity", kind: "message", T: DenomLiquidity, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllDenomLiquidityResponse {
    return new QueryAllDenomLiquidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllDenomLiquidityResponse {
    return new QueryAllDenomLiquidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllDenomLiquidityResponse {
    return new QueryAllDenomLiquidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllDenomLiquidityResponse | PlainMessage<QueryAllDenomLiquidityResponse> | undefined, b: QueryAllDenomLiquidityResponse | PlainMessage<QueryAllDenomLiquidityResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllDenomLiquidityResponse, a, b);
  }
}

/**
 * @generated from message elys.amm.QuerySwapEstimationRequest
 */
export class QuerySwapEstimationRequest extends Message<QuerySwapEstimationRequest> {
  /**
   * @generated from field: repeated elys.amm.SwapAmountInRoute routes = 1;
   */
  routes: SwapAmountInRoute[] = [];

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_in = 2;
   */
  tokenIn?: Coin;

  /**
   * @generated from field: string discount = 3;
   */
  discount = "";

  constructor(data?: PartialMessage<QuerySwapEstimationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QuerySwapEstimationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "routes", kind: "message", T: SwapAmountInRoute, repeated: true },
    { no: 2, name: "token_in", kind: "message", T: Coin },
    { no: 3, name: "discount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySwapEstimationRequest {
    return new QuerySwapEstimationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySwapEstimationRequest {
    return new QuerySwapEstimationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySwapEstimationRequest {
    return new QuerySwapEstimationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySwapEstimationRequest | PlainMessage<QuerySwapEstimationRequest> | undefined, b: QuerySwapEstimationRequest | PlainMessage<QuerySwapEstimationRequest> | undefined): boolean {
    return proto3.util.equals(QuerySwapEstimationRequest, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryJoinPoolEstimationRequest
 */
export class QueryJoinPoolEstimationRequest extends Message<QueryJoinPoolEstimationRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amounts_in = 2;
   */
  amountsIn: Coin[] = [];

  constructor(data?: PartialMessage<QueryJoinPoolEstimationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryJoinPoolEstimationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "amounts_in", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryJoinPoolEstimationRequest {
    return new QueryJoinPoolEstimationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryJoinPoolEstimationRequest {
    return new QueryJoinPoolEstimationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryJoinPoolEstimationRequest {
    return new QueryJoinPoolEstimationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryJoinPoolEstimationRequest | PlainMessage<QueryJoinPoolEstimationRequest> | undefined, b: QueryJoinPoolEstimationRequest | PlainMessage<QueryJoinPoolEstimationRequest> | undefined): boolean {
    return proto3.util.equals(QueryJoinPoolEstimationRequest, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryJoinPoolEstimationResponse
 */
export class QueryJoinPoolEstimationResponse extends Message<QueryJoinPoolEstimationResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin share_amount_out = 1;
   */
  shareAmountOut?: Coin;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amounts_in = 2;
   */
  amountsIn: Coin[] = [];

  /**
   * @generated from field: string slippage = 3;
   */
  slippage = "";

  /**
   * @generated from field: string weight_balance_ratio = 4;
   */
  weightBalanceRatio = "";

  constructor(data?: PartialMessage<QueryJoinPoolEstimationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryJoinPoolEstimationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "share_amount_out", kind: "message", T: Coin },
    { no: 2, name: "amounts_in", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "slippage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "weight_balance_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryJoinPoolEstimationResponse {
    return new QueryJoinPoolEstimationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryJoinPoolEstimationResponse {
    return new QueryJoinPoolEstimationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryJoinPoolEstimationResponse {
    return new QueryJoinPoolEstimationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryJoinPoolEstimationResponse | PlainMessage<QueryJoinPoolEstimationResponse> | undefined, b: QueryJoinPoolEstimationResponse | PlainMessage<QueryJoinPoolEstimationResponse> | undefined): boolean {
    return proto3.util.equals(QueryJoinPoolEstimationResponse, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryExitPoolEstimationRequest
 */
export class QueryExitPoolEstimationRequest extends Message<QueryExitPoolEstimationRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: string share_amount_in = 2;
   */
  shareAmountIn = "";

  /**
   * @generated from field: string token_out_denom = 3;
   */
  tokenOutDenom = "";

  constructor(data?: PartialMessage<QueryExitPoolEstimationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryExitPoolEstimationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "share_amount_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_out_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryExitPoolEstimationRequest {
    return new QueryExitPoolEstimationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryExitPoolEstimationRequest {
    return new QueryExitPoolEstimationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryExitPoolEstimationRequest {
    return new QueryExitPoolEstimationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryExitPoolEstimationRequest | PlainMessage<QueryExitPoolEstimationRequest> | undefined, b: QueryExitPoolEstimationRequest | PlainMessage<QueryExitPoolEstimationRequest> | undefined): boolean {
    return proto3.util.equals(QueryExitPoolEstimationRequest, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryExitPoolEstimationResponse
 */
export class QueryExitPoolEstimationResponse extends Message<QueryExitPoolEstimationResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amounts_out = 1;
   */
  amountsOut: Coin[] = [];

  constructor(data?: PartialMessage<QueryExitPoolEstimationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryExitPoolEstimationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amounts_out", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryExitPoolEstimationResponse {
    return new QueryExitPoolEstimationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryExitPoolEstimationResponse {
    return new QueryExitPoolEstimationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryExitPoolEstimationResponse {
    return new QueryExitPoolEstimationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryExitPoolEstimationResponse | PlainMessage<QueryExitPoolEstimationResponse> | undefined, b: QueryExitPoolEstimationResponse | PlainMessage<QueryExitPoolEstimationResponse> | undefined): boolean {
    return proto3.util.equals(QueryExitPoolEstimationResponse, a, b);
  }
}

/**
 * @generated from message elys.amm.QuerySwapEstimationResponse
 */
export class QuerySwapEstimationResponse extends Message<QuerySwapEstimationResponse> {
  /**
   * @generated from field: string spot_price = 1;
   */
  spotPrice = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_out = 2;
   */
  tokenOut?: Coin;

  /**
   * @generated from field: string swap_fee = 3;
   */
  swapFee = "";

  /**
   * @generated from field: string discount = 4;
   */
  discount = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin available_liquidity = 5;
   */
  availableLiquidity?: Coin;

  /**
   * @generated from field: string slippage = 6;
   */
  slippage = "";

  /**
   * @generated from field: string weight_balance_ratio = 7;
   */
  weightBalanceRatio = "";

  constructor(data?: PartialMessage<QuerySwapEstimationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QuerySwapEstimationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spot_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token_out", kind: "message", T: Coin },
    { no: 3, name: "swap_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "discount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "available_liquidity", kind: "message", T: Coin },
    { no: 6, name: "slippage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "weight_balance_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySwapEstimationResponse {
    return new QuerySwapEstimationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySwapEstimationResponse {
    return new QuerySwapEstimationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySwapEstimationResponse {
    return new QuerySwapEstimationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySwapEstimationResponse | PlainMessage<QuerySwapEstimationResponse> | undefined, b: QuerySwapEstimationResponse | PlainMessage<QuerySwapEstimationResponse> | undefined): boolean {
    return proto3.util.equals(QuerySwapEstimationResponse, a, b);
  }
}

/**
 * @generated from message elys.amm.QuerySlippageTrackRequest
 */
export class QuerySlippageTrackRequest extends Message<QuerySlippageTrackRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QuerySlippageTrackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QuerySlippageTrackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySlippageTrackRequest {
    return new QuerySlippageTrackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySlippageTrackRequest {
    return new QuerySlippageTrackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySlippageTrackRequest {
    return new QuerySlippageTrackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySlippageTrackRequest | PlainMessage<QuerySlippageTrackRequest> | undefined, b: QuerySlippageTrackRequest | PlainMessage<QuerySlippageTrackRequest> | undefined): boolean {
    return proto3.util.equals(QuerySlippageTrackRequest, a, b);
  }
}

/**
 * @generated from message elys.amm.QuerySlippageTrackResponse
 */
export class QuerySlippageTrackResponse extends Message<QuerySlippageTrackResponse> {
  /**
   * @generated from field: elys.amm.OraclePoolSlippageTrack track = 1;
   */
  track?: OraclePoolSlippageTrack;

  constructor(data?: PartialMessage<QuerySlippageTrackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QuerySlippageTrackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "track", kind: "message", T: OraclePoolSlippageTrack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySlippageTrackResponse {
    return new QuerySlippageTrackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySlippageTrackResponse {
    return new QuerySlippageTrackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySlippageTrackResponse {
    return new QuerySlippageTrackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySlippageTrackResponse | PlainMessage<QuerySlippageTrackResponse> | undefined, b: QuerySlippageTrackResponse | PlainMessage<QuerySlippageTrackResponse> | undefined): boolean {
    return proto3.util.equals(QuerySlippageTrackResponse, a, b);
  }
}

/**
 * @generated from message elys.amm.QuerySlippageTrackAllRequest
 */
export class QuerySlippageTrackAllRequest extends Message<QuerySlippageTrackAllRequest> {
  constructor(data?: PartialMessage<QuerySlippageTrackAllRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QuerySlippageTrackAllRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySlippageTrackAllRequest {
    return new QuerySlippageTrackAllRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySlippageTrackAllRequest {
    return new QuerySlippageTrackAllRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySlippageTrackAllRequest {
    return new QuerySlippageTrackAllRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySlippageTrackAllRequest | PlainMessage<QuerySlippageTrackAllRequest> | undefined, b: QuerySlippageTrackAllRequest | PlainMessage<QuerySlippageTrackAllRequest> | undefined): boolean {
    return proto3.util.equals(QuerySlippageTrackAllRequest, a, b);
  }
}

/**
 * @generated from message elys.amm.QuerySlippageTrackAllResponse
 */
export class QuerySlippageTrackAllResponse extends Message<QuerySlippageTrackAllResponse> {
  /**
   * @generated from field: repeated elys.amm.OraclePoolSlippageTrack tracks = 1;
   */
  tracks: OraclePoolSlippageTrack[] = [];

  constructor(data?: PartialMessage<QuerySlippageTrackAllResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QuerySlippageTrackAllResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tracks", kind: "message", T: OraclePoolSlippageTrack, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySlippageTrackAllResponse {
    return new QuerySlippageTrackAllResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySlippageTrackAllResponse {
    return new QuerySlippageTrackAllResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySlippageTrackAllResponse {
    return new QuerySlippageTrackAllResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySlippageTrackAllResponse | PlainMessage<QuerySlippageTrackAllResponse> | undefined, b: QuerySlippageTrackAllResponse | PlainMessage<QuerySlippageTrackAllResponse> | undefined): boolean {
    return proto3.util.equals(QuerySlippageTrackAllResponse, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryBalanceRequest
 */
export class QueryBalanceRequest extends Message<QueryBalanceRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryBalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBalanceRequest {
    return new QueryBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBalanceRequest {
    return new QueryBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBalanceRequest {
    return new QueryBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBalanceRequest | PlainMessage<QueryBalanceRequest> | undefined, b: QueryBalanceRequest | PlainMessage<QueryBalanceRequest> | undefined): boolean {
    return proto3.util.equals(QueryBalanceRequest, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryBalanceResponse
 */
export class QueryBalanceResponse extends Message<QueryBalanceResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin balance = 1;
   */
  balance?: Coin;

  constructor(data?: PartialMessage<QueryBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryBalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "balance", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBalanceResponse {
    return new QueryBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBalanceResponse {
    return new QueryBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBalanceResponse {
    return new QueryBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBalanceResponse | PlainMessage<QueryBalanceResponse> | undefined, b: QueryBalanceResponse | PlainMessage<QueryBalanceResponse> | undefined): boolean {
    return proto3.util.equals(QueryBalanceResponse, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryInRouteByDenomRequest
 */
export class QueryInRouteByDenomRequest extends Message<QueryInRouteByDenomRequest> {
  /**
   * @generated from field: string denom_in = 1;
   */
  denomIn = "";

  /**
   * @generated from field: string denom_out = 2;
   */
  denomOut = "";

  constructor(data?: PartialMessage<QueryInRouteByDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryInRouteByDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryInRouteByDenomRequest {
    return new QueryInRouteByDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryInRouteByDenomRequest {
    return new QueryInRouteByDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryInRouteByDenomRequest {
    return new QueryInRouteByDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryInRouteByDenomRequest | PlainMessage<QueryInRouteByDenomRequest> | undefined, b: QueryInRouteByDenomRequest | PlainMessage<QueryInRouteByDenomRequest> | undefined): boolean {
    return proto3.util.equals(QueryInRouteByDenomRequest, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryInRouteByDenomResponse
 */
export class QueryInRouteByDenomResponse extends Message<QueryInRouteByDenomResponse> {
  /**
   * @generated from field: repeated elys.amm.SwapAmountInRoute in_route = 1;
   */
  inRoute: SwapAmountInRoute[] = [];

  constructor(data?: PartialMessage<QueryInRouteByDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryInRouteByDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "in_route", kind: "message", T: SwapAmountInRoute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryInRouteByDenomResponse {
    return new QueryInRouteByDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryInRouteByDenomResponse {
    return new QueryInRouteByDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryInRouteByDenomResponse {
    return new QueryInRouteByDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryInRouteByDenomResponse | PlainMessage<QueryInRouteByDenomResponse> | undefined, b: QueryInRouteByDenomResponse | PlainMessage<QueryInRouteByDenomResponse> | undefined): boolean {
    return proto3.util.equals(QueryInRouteByDenomResponse, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryOutRouteByDenomRequest
 */
export class QueryOutRouteByDenomRequest extends Message<QueryOutRouteByDenomRequest> {
  /**
   * @generated from field: string denom_out = 1;
   */
  denomOut = "";

  /**
   * @generated from field: string denom_in = 2;
   */
  denomIn = "";

  constructor(data?: PartialMessage<QueryOutRouteByDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryOutRouteByDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOutRouteByDenomRequest {
    return new QueryOutRouteByDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOutRouteByDenomRequest {
    return new QueryOutRouteByDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOutRouteByDenomRequest {
    return new QueryOutRouteByDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOutRouteByDenomRequest | PlainMessage<QueryOutRouteByDenomRequest> | undefined, b: QueryOutRouteByDenomRequest | PlainMessage<QueryOutRouteByDenomRequest> | undefined): boolean {
    return proto3.util.equals(QueryOutRouteByDenomRequest, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryOutRouteByDenomResponse
 */
export class QueryOutRouteByDenomResponse extends Message<QueryOutRouteByDenomResponse> {
  /**
   * @generated from field: repeated elys.amm.SwapAmountOutRoute out_route = 1;
   */
  outRoute: SwapAmountOutRoute[] = [];

  constructor(data?: PartialMessage<QueryOutRouteByDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryOutRouteByDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "out_route", kind: "message", T: SwapAmountOutRoute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryOutRouteByDenomResponse {
    return new QueryOutRouteByDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryOutRouteByDenomResponse {
    return new QueryOutRouteByDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryOutRouteByDenomResponse {
    return new QueryOutRouteByDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryOutRouteByDenomResponse | PlainMessage<QueryOutRouteByDenomResponse> | undefined, b: QueryOutRouteByDenomResponse | PlainMessage<QueryOutRouteByDenomResponse> | undefined): boolean {
    return proto3.util.equals(QueryOutRouteByDenomResponse, a, b);
  }
}

/**
 * @generated from message elys.amm.QuerySwapEstimationByDenomRequest
 */
export class QuerySwapEstimationByDenomRequest extends Message<QuerySwapEstimationByDenomRequest> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 1;
   */
  amount?: Coin;

  /**
   * @generated from field: string denom_in = 2;
   */
  denomIn = "";

  /**
   * @generated from field: string denom_out = 3;
   */
  denomOut = "";

  /**
   * @generated from field: string discount = 4;
   */
  discount = "";

  constructor(data?: PartialMessage<QuerySwapEstimationByDenomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QuerySwapEstimationByDenomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "message", T: Coin },
    { no: 2, name: "denom_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "discount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySwapEstimationByDenomRequest {
    return new QuerySwapEstimationByDenomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySwapEstimationByDenomRequest {
    return new QuerySwapEstimationByDenomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySwapEstimationByDenomRequest {
    return new QuerySwapEstimationByDenomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySwapEstimationByDenomRequest | PlainMessage<QuerySwapEstimationByDenomRequest> | undefined, b: QuerySwapEstimationByDenomRequest | PlainMessage<QuerySwapEstimationByDenomRequest> | undefined): boolean {
    return proto3.util.equals(QuerySwapEstimationByDenomRequest, a, b);
  }
}

/**
 * @generated from message elys.amm.QuerySwapEstimationByDenomResponse
 */
export class QuerySwapEstimationByDenomResponse extends Message<QuerySwapEstimationByDenomResponse> {
  /**
   * @generated from field: repeated elys.amm.SwapAmountInRoute in_route = 1;
   */
  inRoute: SwapAmountInRoute[] = [];

  /**
   * @generated from field: repeated elys.amm.SwapAmountOutRoute out_route = 2;
   */
  outRoute: SwapAmountOutRoute[] = [];

  /**
   * @generated from field: string spot_price = 3;
   */
  spotPrice = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 4;
   */
  amount?: Coin;

  /**
   * @generated from field: string swap_fee = 5;
   */
  swapFee = "";

  /**
   * @generated from field: string discount = 6;
   */
  discount = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin available_liquidity = 7;
   */
  availableLiquidity?: Coin;

  /**
   * @generated from field: string weight_balance_ratio = 8;
   */
  weightBalanceRatio = "";

  /**
   * @generated from field: string slippage = 9;
   */
  slippage = "";

  /**
   * @generated from field: string price_impact = 10;
   */
  priceImpact = "";

  constructor(data?: PartialMessage<QuerySwapEstimationByDenomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QuerySwapEstimationByDenomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "in_route", kind: "message", T: SwapAmountInRoute, repeated: true },
    { no: 2, name: "out_route", kind: "message", T: SwapAmountOutRoute, repeated: true },
    { no: 3, name: "spot_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "amount", kind: "message", T: Coin },
    { no: 5, name: "swap_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "discount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "available_liquidity", kind: "message", T: Coin },
    { no: 8, name: "weight_balance_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "slippage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "price_impact", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySwapEstimationByDenomResponse {
    return new QuerySwapEstimationByDenomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySwapEstimationByDenomResponse {
    return new QuerySwapEstimationByDenomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySwapEstimationByDenomResponse {
    return new QuerySwapEstimationByDenomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySwapEstimationByDenomResponse | PlainMessage<QuerySwapEstimationByDenomResponse> | undefined, b: QuerySwapEstimationByDenomResponse | PlainMessage<QuerySwapEstimationByDenomResponse> | undefined): boolean {
    return proto3.util.equals(QuerySwapEstimationByDenomResponse, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryAMMPriceRequest
 */
export class QueryAMMPriceRequest extends Message<QueryAMMPriceRequest> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_in = 1;
   */
  tokenIn?: Coin;

  /**
   * @generated from field: string discount = 2;
   */
  discount = "";

  constructor(data?: PartialMessage<QueryAMMPriceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryAMMPriceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_in", kind: "message", T: Coin },
    { no: 2, name: "discount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAMMPriceRequest {
    return new QueryAMMPriceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAMMPriceRequest {
    return new QueryAMMPriceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAMMPriceRequest {
    return new QueryAMMPriceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAMMPriceRequest | PlainMessage<QueryAMMPriceRequest> | undefined, b: QueryAMMPriceRequest | PlainMessage<QueryAMMPriceRequest> | undefined): boolean {
    return proto3.util.equals(QueryAMMPriceRequest, a, b);
  }
}


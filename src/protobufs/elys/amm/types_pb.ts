// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/amm/types.proto (package elys.amm, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PageRequest } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { PoolAsset } from "./pool_asset_pb.js";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from enum elys.amm.FilterType
 */
export enum FilterType {
  /**
   * @generated from enum value: FilterAll = 0;
   */
  FilterAll = 0,

  /**
   * @generated from enum value: FilterPerpetual = 1;
   */
  FilterPerpetual = 1,

  /**
   * @generated from enum value: FilterFixedWeight = 2;
   */
  FilterFixedWeight = 2,

  /**
   * @generated from enum value: FilterDynamicWeight = 3;
   */
  FilterDynamicWeight = 3,

  /**
   * @generated from enum value: FilterLeverage = 4;
   */
  FilterLeverage = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(FilterType)
proto3.util.setEnumType(FilterType, "elys.amm.FilterType", [
  { no: 0, name: "FilterAll" },
  { no: 1, name: "FilterPerpetual" },
  { no: 2, name: "FilterFixedWeight" },
  { no: 3, name: "FilterDynamicWeight" },
  { no: 4, name: "FilterLeverage" },
]);

/**
 * @generated from message elys.amm.QueryEarnPoolRequest
 */
export class QueryEarnPoolRequest extends Message<QueryEarnPoolRequest> {
  /**
   * @generated from field: repeated uint64 pool_ids = 1;
   */
  poolIds: bigint[] = [];

  /**
   * @generated from field: elys.amm.FilterType filter_type = 2;
   */
  filterType = FilterType.FilterAll;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryEarnPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryEarnPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 2, name: "filter_type", kind: "enum", T: proto3.getEnumType(FilterType) },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEarnPoolRequest {
    return new QueryEarnPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEarnPoolRequest {
    return new QueryEarnPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEarnPoolRequest {
    return new QueryEarnPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEarnPoolRequest | PlainMessage<QueryEarnPoolRequest> | undefined, b: QueryEarnPoolRequest | PlainMessage<QueryEarnPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryEarnPoolRequest, a, b);
  }
}

/**
 * @generated from message elys.amm.EarnPool
 */
export class EarnPool extends Message<EarnPool> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  /**
   * @generated from field: repeated elys.amm.PoolAsset assets = 2;
   */
  assets: PoolAsset[] = [];

  /**
   * @generated from field: string pool_ratio = 3;
   */
  poolRatio = "";

  /**
   * @generated from field: string rewards_apr = 4;
   */
  rewardsApr = "";

  /**
   * @generated from field: string borrow_apr = 5;
   */
  borrowApr = "";

  /**
   * @generated from field: string leverage_lp = 6;
   */
  leverageLp = "";

  /**
   * @generated from field: string perpetual = 7;
   */
  perpetual = "";

  /**
   * @generated from field: string tvl = 8;
   */
  tvl = "";

  /**
   * @generated from field: string lp_token_price = 9;
   */
  lpTokenPrice = "";

  /**
   * @generated from field: string rewards_usd = 10;
   */
  rewardsUsd = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin reward_coins = 11;
   */
  rewardCoins: Coin[] = [];

  /**
   * @generated from field: cosmos.base.v1beta1.Coin total_shares = 12;
   */
  totalShares?: Coin;

  /**
   * @generated from field: string swap_fee = 13;
   */
  swapFee = "";

  /**
   * @generated from field: string fee_denom = 14;
   */
  feeDenom = "";

  /**
   * @generated from field: bool use_oracle = 15;
   */
  useOracle = false;

  constructor(data?: PartialMessage<EarnPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.EarnPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "assets", kind: "message", T: PoolAsset, repeated: true },
    { no: 3, name: "pool_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "rewards_apr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "borrow_apr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "leverage_lp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "perpetual", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "tvl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "lp_token_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "rewards_usd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "reward_coins", kind: "message", T: Coin, repeated: true },
    { no: 12, name: "total_shares", kind: "message", T: Coin },
    { no: 13, name: "swap_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "fee_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "use_oracle", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EarnPool {
    return new EarnPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EarnPool {
    return new EarnPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EarnPool {
    return new EarnPool().fromJsonString(jsonString, options);
  }

  static equals(a: EarnPool | PlainMessage<EarnPool> | undefined, b: EarnPool | PlainMessage<EarnPool> | undefined): boolean {
    return proto3.util.equals(EarnPool, a, b);
  }
}

/**
 * @generated from message elys.amm.QueryEarnPoolResponse
 */
export class QueryEarnPoolResponse extends Message<QueryEarnPoolResponse> {
  /**
   * @generated from field: repeated elys.amm.EarnPool pools = 1;
   */
  pools: EarnPool[] = [];

  constructor(data?: PartialMessage<QueryEarnPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.QueryEarnPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: EarnPool, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEarnPoolResponse {
    return new QueryEarnPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEarnPoolResponse {
    return new QueryEarnPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEarnPoolResponse {
    return new QueryEarnPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEarnPoolResponse | PlainMessage<QueryEarnPoolResponse> | undefined, b: QueryEarnPoolResponse | PlainMessage<QueryEarnPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryEarnPoolResponse, a, b);
  }
}


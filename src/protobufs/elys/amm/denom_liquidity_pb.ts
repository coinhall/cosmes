// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/amm/denom_liquidity.proto (package elys.amm, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message elys.amm.DenomLiquidity
 */
export class DenomLiquidity extends Message<DenomLiquidity> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string liquidity = 2;
   */
  liquidity = "";

  constructor(data?: PartialMessage<DenomLiquidity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.DenomLiquidity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "liquidity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DenomLiquidity {
    return new DenomLiquidity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DenomLiquidity {
    return new DenomLiquidity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DenomLiquidity {
    return new DenomLiquidity().fromJsonString(jsonString, options);
  }

  static equals(a: DenomLiquidity | PlainMessage<DenomLiquidity> | undefined, b: DenomLiquidity | PlainMessage<DenomLiquidity> | undefined): boolean {
    return proto3.util.equals(DenomLiquidity, a, b);
  }
}


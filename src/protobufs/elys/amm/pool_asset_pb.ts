// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/amm/pool_asset.proto (package elys.amm, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message elys.amm.PoolAsset
 */
export class PoolAsset extends Message<PoolAsset> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin token = 1;
   */
  token?: Coin;

  /**
   * @generated from field: string weight = 2;
   */
  weight = "";

  constructor(data?: PartialMessage<PoolAsset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.amm.PoolAsset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: Coin },
    { no: 2, name: "weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolAsset {
    return new PoolAsset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolAsset {
    return new PoolAsset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolAsset {
    return new PoolAsset().fromJsonString(jsonString, options);
  }

  static equals(a: PoolAsset | PlainMessage<PoolAsset> | undefined, b: PoolAsset | PlainMessage<PoolAsset> | undefined): boolean {
    return proto3.util.equals(PoolAsset, a, b);
  }
}


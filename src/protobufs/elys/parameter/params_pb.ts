// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/parameter/params.proto (package elys.parameter, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Params defines the parameters for the module.
 *
 * @generated from message elys.parameter.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: string min_commission_rate = 1;
   */
  minCommissionRate = "";

  /**
   * @generated from field: string max_voting_power = 2;
   */
  maxVotingPower = "";

  /**
   * @generated from field: string min_self_delegation = 3;
   */
  minSelfDelegation = "";

  /**
   * @generated from field: string broker_address = 4;
   */
  brokerAddress = "";

  /**
   * @generated from field: int64 total_blocks_per_year = 5;
   */
  totalBlocksPerYear = protoInt64.zero;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.parameter.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min_commission_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "max_voting_power", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "min_self_delegation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "broker_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "total_blocks_per_year", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * @generated from message elys.parameter.LegacyParams
 */
export class LegacyParams extends Message<LegacyParams> {
  /**
   * @generated from field: string min_commission_rate = 1;
   */
  minCommissionRate = "";

  /**
   * @generated from field: string max_voting_power = 2;
   */
  maxVotingPower = "";

  /**
   * @generated from field: string min_self_delegation = 3;
   */
  minSelfDelegation = "";

  /**
   * @generated from field: string broker_address = 4;
   */
  brokerAddress = "";

  constructor(data?: PartialMessage<LegacyParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.parameter.LegacyParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min_commission_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "max_voting_power", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "min_self_delegation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "broker_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LegacyParams {
    return new LegacyParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LegacyParams {
    return new LegacyParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LegacyParams {
    return new LegacyParams().fromJsonString(jsonString, options);
  }

  static equals(a: LegacyParams | PlainMessage<LegacyParams> | undefined, b: LegacyParams | PlainMessage<LegacyParams> | undefined): boolean {
    return proto3.util.equals(LegacyParams, a, b);
  }
}


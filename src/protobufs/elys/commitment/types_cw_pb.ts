// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/commitment/types_cw.proto (package elys.commitment, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { Lockup } from "./commitments_pb.js";

/**
 * @generated from message elys.commitment.QueryBorrowAmountRequest
 */
export class QueryBorrowAmountRequest extends Message<QueryBorrowAmountRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryBorrowAmountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryBorrowAmountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBorrowAmountRequest {
    return new QueryBorrowAmountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBorrowAmountRequest {
    return new QueryBorrowAmountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBorrowAmountRequest {
    return new QueryBorrowAmountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBorrowAmountRequest | PlainMessage<QueryBorrowAmountRequest> | undefined, b: QueryBorrowAmountRequest | PlainMessage<QueryBorrowAmountRequest> | undefined): boolean {
    return proto3.util.equals(QueryBorrowAmountRequest, a, b);
  }
}

/**
 * @generated from message elys.commitment.QueryDelegatorDelegationsRequest
 */
export class QueryDelegatorDelegationsRequest extends Message<QueryDelegatorDelegationsRequest> {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<QueryDelegatorDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryDelegatorDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorDelegationsRequest {
    return new QueryDelegatorDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorDelegationsRequest {
    return new QueryDelegatorDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorDelegationsRequest {
    return new QueryDelegatorDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorDelegationsRequest | PlainMessage<QueryDelegatorDelegationsRequest> | undefined, b: QueryDelegatorDelegationsRequest | PlainMessage<QueryDelegatorDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorDelegationsRequest, a, b);
  }
}

/**
 * Delegation represents the bond with tokens held by an account. It is
 * owned by one delegator, and is associated with the voting power of one
 * validator.
 *
 * @generated from message elys.commitment.Delegation
 */
export class Delegation extends Message<Delegation> {
  /**
   * delegator_address is the bech32-encoded address of the delegator.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * validator_address is the bech32-encoded address of the validator.
   *
   * @generated from field: string validator_address = 2;
   */
  validatorAddress = "";

  /**
   * shares define the delegation shares received.
   *
   * @generated from field: string shares = 3;
   */
  shares = "";

  constructor(data?: PartialMessage<Delegation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.Delegation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Delegation {
    return new Delegation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Delegation {
    return new Delegation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Delegation {
    return new Delegation().fromJsonString(jsonString, options);
  }

  static equals(a: Delegation | PlainMessage<Delegation> | undefined, b: Delegation | PlainMessage<Delegation> | undefined): boolean {
    return proto3.util.equals(Delegation, a, b);
  }
}

/**
 * DelegationResponse is equivalent to Delegation except that it contains a
 * balance in addition to shares which is more suitable for client responses.
 *
 * @generated from message elys.commitment.DelegationResponse
 */
export class DelegationResponse extends Message<DelegationResponse> {
  /**
   * @generated from field: elys.commitment.Delegation delegation = 1;
   */
  delegation?: Delegation;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin balance = 2;
   */
  balance?: Coin;

  constructor(data?: PartialMessage<DelegationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.DelegationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation", kind: "message", T: Delegation },
    { no: 2, name: "balance", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DelegationResponse {
    return new DelegationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DelegationResponse {
    return new DelegationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DelegationResponse {
    return new DelegationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DelegationResponse | PlainMessage<DelegationResponse> | undefined, b: DelegationResponse | PlainMessage<DelegationResponse> | undefined): boolean {
    return proto3.util.equals(DelegationResponse, a, b);
  }
}

/**
 * QueryDelegatorDelegationsResponse is response message for the
 * Query/DelegatorDelegations RPC method.
 *
 * @generated from message elys.commitment.QueryDelegatorDelegationsResponse
 */
export class QueryDelegatorDelegationsResponse extends Message<QueryDelegatorDelegationsResponse> {
  /**
   * delegation_responses defines all the delegations' info of a delegator.
   *
   * @generated from field: repeated elys.commitment.DelegationResponse delegation_responses = 1;
   */
  delegationResponses: DelegationResponse[] = [];

  constructor(data?: PartialMessage<QueryDelegatorDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryDelegatorDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegation_responses", kind: "message", T: DelegationResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorDelegationsResponse {
    return new QueryDelegatorDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorDelegationsResponse {
    return new QueryDelegatorDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorDelegationsResponse {
    return new QueryDelegatorDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorDelegationsResponse | PlainMessage<QueryDelegatorDelegationsResponse> | undefined, b: QueryDelegatorDelegationsResponse | PlainMessage<QueryDelegatorDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorDelegationsResponse, a, b);
  }
}

/**
 * UnbondingDelegationEntry defines an unbonding object with relevant metadata.
 *
 * @generated from message elys.commitment.UnbondingDelegationEntry
 */
export class UnbondingDelegationEntry extends Message<UnbondingDelegationEntry> {
  /**
   * creation_height is the height which the unbonding took place.
   *
   * @generated from field: int64 creation_height = 1;
   */
  creationHeight = protoInt64.zero;

  /**
   * completion_time is the unix time for unbonding completion.
   *
   * @generated from field: int64 completion_time = 2;
   */
  completionTime = protoInt64.zero;

  /**
   * initial_balance defines the tokens initially scheduled to receive at completion.
   *
   * @generated from field: string initial_balance = 3;
   */
  initialBalance = "";

  /**
   * balance defines the tokens to receive at completion.
   *
   * @generated from field: string balance = 4;
   */
  balance = "";

  /**
   * Incrementing id that uniquely identifies this entry
   *
   * @generated from field: uint64 unbonding_id = 5;
   */
  unbondingId = protoInt64.zero;

  constructor(data?: PartialMessage<UnbondingDelegationEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.UnbondingDelegationEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creation_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "completion_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "initial_balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "unbonding_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnbondingDelegationEntry {
    return new UnbondingDelegationEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnbondingDelegationEntry {
    return new UnbondingDelegationEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnbondingDelegationEntry {
    return new UnbondingDelegationEntry().fromJsonString(jsonString, options);
  }

  static equals(a: UnbondingDelegationEntry | PlainMessage<UnbondingDelegationEntry> | undefined, b: UnbondingDelegationEntry | PlainMessage<UnbondingDelegationEntry> | undefined): boolean {
    return proto3.util.equals(UnbondingDelegationEntry, a, b);
  }
}

/**
 * QueryDelegatorUnbondingDelegationsRequest is request message for the
 *
 * @generated from message elys.commitment.QueryDelegatorUnbondingDelegationsRequest
 */
export class QueryDelegatorUnbondingDelegationsRequest extends Message<QueryDelegatorUnbondingDelegationsRequest> {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<QueryDelegatorUnbondingDelegationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryDelegatorUnbondingDelegationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorUnbondingDelegationsRequest {
    return new QueryDelegatorUnbondingDelegationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorUnbondingDelegationsRequest {
    return new QueryDelegatorUnbondingDelegationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorUnbondingDelegationsRequest {
    return new QueryDelegatorUnbondingDelegationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorUnbondingDelegationsRequest | PlainMessage<QueryDelegatorUnbondingDelegationsRequest> | undefined, b: QueryDelegatorUnbondingDelegationsRequest | PlainMessage<QueryDelegatorUnbondingDelegationsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorUnbondingDelegationsRequest, a, b);
  }
}

/**
 * @generated from message elys.commitment.UnbondingDelegation
 */
export class UnbondingDelegation extends Message<UnbondingDelegation> {
  /**
   * delegator_address is the bech32-encoded address of the delegator.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  /**
   * validator_address is the bech32-encoded address of the validator.
   *
   * @generated from field: string validator_address = 2;
   */
  validatorAddress = "";

  /**
   * entries are the unbonding delegation entries.
   *
   * unbonding delegation entries
   *
   * @generated from field: repeated elys.commitment.UnbondingDelegationEntry entries = 3;
   */
  entries: UnbondingDelegationEntry[] = [];

  constructor(data?: PartialMessage<UnbondingDelegation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.UnbondingDelegation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "entries", kind: "message", T: UnbondingDelegationEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnbondingDelegation {
    return new UnbondingDelegation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnbondingDelegation {
    return new UnbondingDelegation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnbondingDelegation {
    return new UnbondingDelegation().fromJsonString(jsonString, options);
  }

  static equals(a: UnbondingDelegation | PlainMessage<UnbondingDelegation> | undefined, b: UnbondingDelegation | PlainMessage<UnbondingDelegation> | undefined): boolean {
    return proto3.util.equals(UnbondingDelegation, a, b);
  }
}

/**
 * QueryUnbondingDelegatorDelegationsResponse is response message for the
 * Query/UnbondingDelegatorDelegations RPC method.
 *
 * @generated from message elys.commitment.QueryDelegatorUnbondingDelegationsResponse
 */
export class QueryDelegatorUnbondingDelegationsResponse extends Message<QueryDelegatorUnbondingDelegationsResponse> {
  /**
   * @generated from field: repeated elys.commitment.UnbondingDelegation unbonding_responses = 1;
   */
  unbondingResponses: UnbondingDelegation[] = [];

  constructor(data?: PartialMessage<QueryDelegatorUnbondingDelegationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryDelegatorUnbondingDelegationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unbonding_responses", kind: "message", T: UnbondingDelegation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorUnbondingDelegationsResponse {
    return new QueryDelegatorUnbondingDelegationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorUnbondingDelegationsResponse {
    return new QueryDelegatorUnbondingDelegationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorUnbondingDelegationsResponse {
    return new QueryDelegatorUnbondingDelegationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorUnbondingDelegationsResponse | PlainMessage<QueryDelegatorUnbondingDelegationsResponse> | undefined, b: QueryDelegatorUnbondingDelegationsResponse | PlainMessage<QueryDelegatorUnbondingDelegationsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorUnbondingDelegationsResponse, a, b);
  }
}

/**
 * QueryValidatorsRequest is request message for Query/Validators RPC method.
 *
 * @generated from message elys.commitment.QueryValidatorsRequest
 */
export class QueryValidatorsRequest extends Message<QueryValidatorsRequest> {
  /**
   * status enables to query for validators matching a given status.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress = "";

  constructor(data?: PartialMessage<QueryValidatorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryValidatorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryValidatorsRequest {
    return new QueryValidatorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryValidatorsRequest {
    return new QueryValidatorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryValidatorsRequest {
    return new QueryValidatorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryValidatorsRequest | PlainMessage<QueryValidatorsRequest> | undefined, b: QueryValidatorsRequest | PlainMessage<QueryValidatorsRequest> | undefined): boolean {
    return proto3.util.equals(QueryValidatorsRequest, a, b);
  }
}

/**
 * QueryDelegatorValidatorsResponse is response message for the
 * Query/DelegatorValidators RPC method.
 *
 * @generated from message elys.commitment.QueryDelegatorValidatorsResponse
 */
export class QueryDelegatorValidatorsResponse extends Message<QueryDelegatorValidatorsResponse> {
  /**
   * validators defines the validators' info of a delegator.
   *
   * @generated from field: repeated elys.commitment.ValidatorDetail validators = 1;
   */
  validators: ValidatorDetail[] = [];

  constructor(data?: PartialMessage<QueryDelegatorValidatorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryDelegatorValidatorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validators", kind: "message", T: ValidatorDetail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatorValidatorsResponse {
    return new QueryDelegatorValidatorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatorValidatorsResponse {
    return new QueryDelegatorValidatorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatorValidatorsResponse {
    return new QueryDelegatorValidatorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatorValidatorsResponse | PlainMessage<QueryDelegatorValidatorsResponse> | undefined, b: QueryDelegatorValidatorsResponse | PlainMessage<QueryDelegatorValidatorsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatorValidatorsResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.BalanceAvailable
 */
export class BalanceAvailable extends Message<BalanceAvailable> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  /**
   * @generated from field: string usd_amount = 2;
   */
  usdAmount = "";

  constructor(data?: PartialMessage<BalanceAvailable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.BalanceAvailable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usd_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BalanceAvailable {
    return new BalanceAvailable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BalanceAvailable {
    return new BalanceAvailable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BalanceAvailable {
    return new BalanceAvailable().fromJsonString(jsonString, options);
  }

  static equals(a: BalanceAvailable | PlainMessage<BalanceAvailable> | undefined, b: BalanceAvailable | PlainMessage<BalanceAvailable> | undefined): boolean {
    return proto3.util.equals(BalanceAvailable, a, b);
  }
}

/**
 * @generated from message elys.commitment.StakedAvailable
 */
export class StakedAvailable extends Message<StakedAvailable> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  /**
   * @generated from field: string usd_amount = 2;
   */
  usdAmount = "";

  /**
   * @generated from field: repeated elys.commitment.Lockup lockups = 3;
   */
  lockups: Lockup[] = [];

  constructor(data?: PartialMessage<StakedAvailable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.StakedAvailable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usd_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lockups", kind: "message", T: Lockup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakedAvailable {
    return new StakedAvailable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakedAvailable {
    return new StakedAvailable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakedAvailable {
    return new StakedAvailable().fromJsonString(jsonString, options);
  }

  static equals(a: StakedAvailable | PlainMessage<StakedAvailable> | undefined, b: StakedAvailable | PlainMessage<StakedAvailable> | undefined): boolean {
    return proto3.util.equals(StakedAvailable, a, b);
  }
}

/**
 * @generated from message elys.commitment.ValidatorDetail
 */
export class ValidatorDetail extends Message<ValidatorDetail> {
  /**
   * Validator Identity
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The validator address.
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * The validator name.
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * Voting power percentage for this validator.
   *
   * @generated from field: string voting_power = 4;
   */
  votingPower = "";

  /**
   * Comission percentage for the validator.
   *
   * @generated from field: string commission = 5;
   */
  commission = "";

  /**
   * The staked amount the user has w/ this validator
   * Only available if there's some and if address.
   * is sent in request object.
   *
   * @generated from field: elys.commitment.BalanceAvailable staked = 6;
   */
  staked?: BalanceAvailable;

  /**
   * Is jailed
   *
   * @generated from field: string jailed = 7;
   */
  jailed = "";

  /**
   * The validator status
   *
   * @generated from field: string inactive = 8;
   */
  inactive = "";

  constructor(data?: PartialMessage<ValidatorDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.ValidatorDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "voting_power", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "commission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "staked", kind: "message", T: BalanceAvailable },
    { no: 7, name: "jailed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "inactive", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidatorDetail {
    return new ValidatorDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidatorDetail {
    return new ValidatorDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidatorDetail {
    return new ValidatorDetail().fromJsonString(jsonString, options);
  }

  static equals(a: ValidatorDetail | PlainMessage<ValidatorDetail> | undefined, b: ValidatorDetail | PlainMessage<ValidatorDetail> | undefined): boolean {
    return proto3.util.equals(ValidatorDetail, a, b);
  }
}

/**
 * @generated from message elys.commitment.StakingValidator
 */
export class StakingValidator extends Message<StakingValidator> {
  /**
   * Validator Identity
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The validator address.
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * The validator name.
   *
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * Voting power percentage for this validator.
   *
   * @generated from field: string voting_power = 4;
   */
  votingPower = "";

  /**
   * Comission percentage for the validator.
   *
   * @generated from field: string commission = 5;
   */
  commission = "";

  constructor(data?: PartialMessage<StakingValidator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.StakingValidator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "voting_power", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "commission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakingValidator {
    return new StakingValidator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakingValidator {
    return new StakingValidator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakingValidator {
    return new StakingValidator().fromJsonString(jsonString, options);
  }

  static equals(a: StakingValidator | PlainMessage<StakingValidator> | undefined, b: StakingValidator | PlainMessage<StakingValidator> | undefined): boolean {
    return proto3.util.equals(StakingValidator, a, b);
  }
}

/**
 * @generated from message elys.commitment.StakedPosition
 */
export class StakedPosition extends Message<StakedPosition> {
  /**
   * The position ID.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The validator that's being unstaked from.
   *
   * @generated from field: elys.commitment.StakingValidator validator = 2;
   */
  validator?: StakingValidator;

  /**
   * The amount that's being staked.
   *
   * @generated from field: elys.commitment.BalanceAvailable staked = 3;
   */
  staked?: BalanceAvailable;

  constructor(data?: PartialMessage<StakedPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.StakedPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator", kind: "message", T: StakingValidator },
    { no: 3, name: "staked", kind: "message", T: BalanceAvailable },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakedPosition {
    return new StakedPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakedPosition {
    return new StakedPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakedPosition {
    return new StakedPosition().fromJsonString(jsonString, options);
  }

  static equals(a: StakedPosition | PlainMessage<StakedPosition> | undefined, b: StakedPosition | PlainMessage<StakedPosition> | undefined): boolean {
    return proto3.util.equals(StakedPosition, a, b);
  }
}

/**
 * @generated from message elys.commitment.QueryStakedPositionResponse
 */
export class QueryStakedPositionResponse extends Message<QueryStakedPositionResponse> {
  /**
   * @generated from field: repeated elys.commitment.StakedPosition staked_position = 1;
   */
  stakedPosition: StakedPosition[] = [];

  constructor(data?: PartialMessage<QueryStakedPositionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryStakedPositionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "staked_position", kind: "message", T: StakedPosition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStakedPositionResponse {
    return new QueryStakedPositionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStakedPositionResponse {
    return new QueryStakedPositionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStakedPositionResponse {
    return new QueryStakedPositionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStakedPositionResponse | PlainMessage<QueryStakedPositionResponse> | undefined, b: QueryStakedPositionResponse | PlainMessage<QueryStakedPositionResponse> | undefined): boolean {
    return proto3.util.equals(QueryStakedPositionResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.UnstakedPosition
 */
export class UnstakedPosition extends Message<UnstakedPosition> {
  /**
   * The position ID.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The validator that's being unstaked from.
   *
   * @generated from field: elys.commitment.StakingValidator validator = 2;
   */
  validator?: StakingValidator;

  /**
   * Remaining time to unstake in days.
   *
   * @generated from field: uint64 remaining_time = 3;
   */
  remainingTime = protoInt64.zero;

  /**
   * The amount that's being staked.
   *
   * @generated from field: elys.commitment.BalanceAvailable unstaked = 4;
   */
  unstaked?: BalanceAvailable;

  constructor(data?: PartialMessage<UnstakedPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.UnstakedPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator", kind: "message", T: StakingValidator },
    { no: 3, name: "remaining_time", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "unstaked", kind: "message", T: BalanceAvailable },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnstakedPosition {
    return new UnstakedPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnstakedPosition {
    return new UnstakedPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnstakedPosition {
    return new UnstakedPosition().fromJsonString(jsonString, options);
  }

  static equals(a: UnstakedPosition | PlainMessage<UnstakedPosition> | undefined, b: UnstakedPosition | PlainMessage<UnstakedPosition> | undefined): boolean {
    return proto3.util.equals(UnstakedPosition, a, b);
  }
}

/**
 * @generated from message elys.commitment.QueryUnstakedPositionResponse
 */
export class QueryUnstakedPositionResponse extends Message<QueryUnstakedPositionResponse> {
  /**
   * @generated from field: repeated elys.commitment.UnstakedPosition unstaked_position = 1;
   */
  unstakedPosition: UnstakedPosition[] = [];

  constructor(data?: PartialMessage<QueryUnstakedPositionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryUnstakedPositionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unstaked_position", kind: "message", T: UnstakedPosition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnstakedPositionResponse {
    return new QueryUnstakedPositionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnstakedPositionResponse {
    return new QueryUnstakedPositionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnstakedPositionResponse {
    return new QueryUnstakedPositionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnstakedPositionResponse | PlainMessage<QueryUnstakedPositionResponse> | undefined, b: QueryUnstakedPositionResponse | PlainMessage<QueryUnstakedPositionResponse> | undefined): boolean {
    return proto3.util.equals(QueryUnstakedPositionResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.QueryVestingInfoRequest
 */
export class QueryVestingInfoRequest extends Message<QueryVestingInfoRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryVestingInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryVestingInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVestingInfoRequest {
    return new QueryVestingInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVestingInfoRequest {
    return new QueryVestingInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVestingInfoRequest {
    return new QueryVestingInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVestingInfoRequest | PlainMessage<QueryVestingInfoRequest> | undefined, b: QueryVestingInfoRequest | PlainMessage<QueryVestingInfoRequest> | undefined): boolean {
    return proto3.util.equals(QueryVestingInfoRequest, a, b);
  }
}

/**
 * @generated from message elys.commitment.VestingDetail
 */
export class VestingDetail extends Message<VestingDetail> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The total vest for the current vest
   *
   * @generated from field: elys.commitment.BalanceAvailable total_vesting = 2;
   */
  totalVesting?: BalanceAvailable;

  /**
   * The balance that's already vested
   *
   * @generated from field: elys.commitment.BalanceAvailable claimed = 3;
   */
  claimed?: BalanceAvailable;

  /**
   * The amount vested so far
   *
   * @generated from field: elys.commitment.BalanceAvailable vested_so_far = 4;
   */
  vestedSoFar?: BalanceAvailable;

  /**
   * Remaining blocks
   *
   * @generated from field: int64 remaining_blocks = 5;
   */
  remainingBlocks = protoInt64.zero;

  constructor(data?: PartialMessage<VestingDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.VestingDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_vesting", kind: "message", T: BalanceAvailable },
    { no: 3, name: "claimed", kind: "message", T: BalanceAvailable },
    { no: 4, name: "vested_so_far", kind: "message", T: BalanceAvailable },
    { no: 5, name: "remaining_blocks", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VestingDetail {
    return new VestingDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VestingDetail {
    return new VestingDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VestingDetail {
    return new VestingDetail().fromJsonString(jsonString, options);
  }

  static equals(a: VestingDetail | PlainMessage<VestingDetail> | undefined, b: VestingDetail | PlainMessage<VestingDetail> | undefined): boolean {
    return proto3.util.equals(VestingDetail, a, b);
  }
}

/**
 * @generated from message elys.commitment.QueryVestingInfoResponse
 */
export class QueryVestingInfoResponse extends Message<QueryVestingInfoResponse> {
  /**
   * @generated from field: elys.commitment.BalanceAvailable vesting = 1;
   */
  vesting?: BalanceAvailable;

  /**
   * @generated from field: repeated elys.commitment.VestingDetail vesting_details = 2;
   */
  vestingDetails: VestingDetail[] = [];

  constructor(data?: PartialMessage<QueryVestingInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryVestingInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vesting", kind: "message", T: BalanceAvailable },
    { no: 2, name: "vesting_details", kind: "message", T: VestingDetail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVestingInfoResponse {
    return new QueryVestingInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVestingInfoResponse {
    return new QueryVestingInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVestingInfoResponse {
    return new QueryVestingInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVestingInfoResponse | PlainMessage<QueryVestingInfoResponse> | undefined, b: QueryVestingInfoResponse | PlainMessage<QueryVestingInfoResponse> | undefined): boolean {
    return proto3.util.equals(QueryVestingInfoResponse, a, b);
  }
}


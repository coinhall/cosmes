// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/commitment/query.proto (package elys.commitment, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Commitments } from "./commitments_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message elys.commitment.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message elys.commitment.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: elys.commitment.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.QueryShowCommitmentsRequest
 */
export class QueryShowCommitmentsRequest extends Message<QueryShowCommitmentsRequest> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  constructor(data?: PartialMessage<QueryShowCommitmentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryShowCommitmentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryShowCommitmentsRequest {
    return new QueryShowCommitmentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryShowCommitmentsRequest {
    return new QueryShowCommitmentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryShowCommitmentsRequest {
    return new QueryShowCommitmentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryShowCommitmentsRequest | PlainMessage<QueryShowCommitmentsRequest> | undefined, b: QueryShowCommitmentsRequest | PlainMessage<QueryShowCommitmentsRequest> | undefined): boolean {
    return proto3.util.equals(QueryShowCommitmentsRequest, a, b);
  }
}

/**
 * @generated from message elys.commitment.QueryShowCommitmentsResponse
 */
export class QueryShowCommitmentsResponse extends Message<QueryShowCommitmentsResponse> {
  /**
   * @generated from field: elys.commitment.Commitments commitments = 1;
   */
  commitments?: Commitments;

  constructor(data?: PartialMessage<QueryShowCommitmentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryShowCommitmentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commitments", kind: "message", T: Commitments },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryShowCommitmentsResponse {
    return new QueryShowCommitmentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryShowCommitmentsResponse {
    return new QueryShowCommitmentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryShowCommitmentsResponse {
    return new QueryShowCommitmentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryShowCommitmentsResponse | PlainMessage<QueryShowCommitmentsResponse> | undefined, b: QueryShowCommitmentsResponse | PlainMessage<QueryShowCommitmentsResponse> | undefined): boolean {
    return proto3.util.equals(QueryShowCommitmentsResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.QueryNumberOfCommitmentsRequest
 */
export class QueryNumberOfCommitmentsRequest extends Message<QueryNumberOfCommitmentsRequest> {
  constructor(data?: PartialMessage<QueryNumberOfCommitmentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryNumberOfCommitmentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNumberOfCommitmentsRequest {
    return new QueryNumberOfCommitmentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNumberOfCommitmentsRequest {
    return new QueryNumberOfCommitmentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNumberOfCommitmentsRequest {
    return new QueryNumberOfCommitmentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNumberOfCommitmentsRequest | PlainMessage<QueryNumberOfCommitmentsRequest> | undefined, b: QueryNumberOfCommitmentsRequest | PlainMessage<QueryNumberOfCommitmentsRequest> | undefined): boolean {
    return proto3.util.equals(QueryNumberOfCommitmentsRequest, a, b);
  }
}

/**
 * @generated from message elys.commitment.QueryNumberOfCommitmentsResponse
 */
export class QueryNumberOfCommitmentsResponse extends Message<QueryNumberOfCommitmentsResponse> {
  /**
   * @generated from field: int64 number = 1;
   */
  number = protoInt64.zero;

  constructor(data?: PartialMessage<QueryNumberOfCommitmentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.QueryNumberOfCommitmentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNumberOfCommitmentsResponse {
    return new QueryNumberOfCommitmentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNumberOfCommitmentsResponse {
    return new QueryNumberOfCommitmentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNumberOfCommitmentsResponse {
    return new QueryNumberOfCommitmentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNumberOfCommitmentsResponse | PlainMessage<QueryNumberOfCommitmentsResponse> | undefined, b: QueryNumberOfCommitmentsResponse | PlainMessage<QueryNumberOfCommitmentsResponse> | undefined): boolean {
    return proto3.util.equals(QueryNumberOfCommitmentsResponse, a, b);
  }
}


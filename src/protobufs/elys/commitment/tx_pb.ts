// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/commitment/tx.proto (package elys.commitment, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message elys.commitment.MsgCommitClaimedRewards
 */
export class MsgCommitClaimedRewards extends Message<MsgCommitClaimedRewards> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: string denom = 3;
   */
  denom = "";

  constructor(data?: PartialMessage<MsgCommitClaimedRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgCommitClaimedRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCommitClaimedRewards {
    return new MsgCommitClaimedRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCommitClaimedRewards {
    return new MsgCommitClaimedRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCommitClaimedRewards {
    return new MsgCommitClaimedRewards().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCommitClaimedRewards | PlainMessage<MsgCommitClaimedRewards> | undefined, b: MsgCommitClaimedRewards | PlainMessage<MsgCommitClaimedRewards> | undefined): boolean {
    return proto3.util.equals(MsgCommitClaimedRewards, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgCommitClaimedRewardsResponse
 */
export class MsgCommitClaimedRewardsResponse extends Message<MsgCommitClaimedRewardsResponse> {
  constructor(data?: PartialMessage<MsgCommitClaimedRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgCommitClaimedRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCommitClaimedRewardsResponse {
    return new MsgCommitClaimedRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCommitClaimedRewardsResponse {
    return new MsgCommitClaimedRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCommitClaimedRewardsResponse {
    return new MsgCommitClaimedRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCommitClaimedRewardsResponse | PlainMessage<MsgCommitClaimedRewardsResponse> | undefined, b: MsgCommitClaimedRewardsResponse | PlainMessage<MsgCommitClaimedRewardsResponse> | undefined): boolean {
    return proto3.util.equals(MsgCommitClaimedRewardsResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgUncommitTokens
 */
export class MsgUncommitTokens extends Message<MsgUncommitTokens> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: string denom = 3;
   */
  denom = "";

  constructor(data?: PartialMessage<MsgUncommitTokens>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgUncommitTokens";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUncommitTokens {
    return new MsgUncommitTokens().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUncommitTokens {
    return new MsgUncommitTokens().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUncommitTokens {
    return new MsgUncommitTokens().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUncommitTokens | PlainMessage<MsgUncommitTokens> | undefined, b: MsgUncommitTokens | PlainMessage<MsgUncommitTokens> | undefined): boolean {
    return proto3.util.equals(MsgUncommitTokens, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgUncommitTokensResponse
 */
export class MsgUncommitTokensResponse extends Message<MsgUncommitTokensResponse> {
  constructor(data?: PartialMessage<MsgUncommitTokensResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgUncommitTokensResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUncommitTokensResponse {
    return new MsgUncommitTokensResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUncommitTokensResponse {
    return new MsgUncommitTokensResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUncommitTokensResponse {
    return new MsgUncommitTokensResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUncommitTokensResponse | PlainMessage<MsgUncommitTokensResponse> | undefined, b: MsgUncommitTokensResponse | PlainMessage<MsgUncommitTokensResponse> | undefined): boolean {
    return proto3.util.equals(MsgUncommitTokensResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgClaimReward
 */
export class MsgClaimReward extends Message<MsgClaimReward> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: string denom = 3;
   */
  denom = "";

  constructor(data?: PartialMessage<MsgClaimReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgClaimReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimReward {
    return new MsgClaimReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimReward {
    return new MsgClaimReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimReward {
    return new MsgClaimReward().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimReward | PlainMessage<MsgClaimReward> | undefined, b: MsgClaimReward | PlainMessage<MsgClaimReward> | undefined): boolean {
    return proto3.util.equals(MsgClaimReward, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgClaimRewardResponse
 */
export class MsgClaimRewardResponse extends Message<MsgClaimRewardResponse> {
  constructor(data?: PartialMessage<MsgClaimRewardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgClaimRewardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimRewardResponse {
    return new MsgClaimRewardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimRewardResponse {
    return new MsgClaimRewardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimRewardResponse {
    return new MsgClaimRewardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimRewardResponse | PlainMessage<MsgClaimRewardResponse> | undefined, b: MsgClaimRewardResponse | PlainMessage<MsgClaimRewardResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimRewardResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgVest
 */
export class MsgVest extends Message<MsgVest> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: string denom = 3;
   */
  denom = "";

  constructor(data?: PartialMessage<MsgVest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgVest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVest {
    return new MsgVest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVest {
    return new MsgVest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVest {
    return new MsgVest().fromJsonString(jsonString, options);
  }

  static equals(a: MsgVest | PlainMessage<MsgVest> | undefined, b: MsgVest | PlainMessage<MsgVest> | undefined): boolean {
    return proto3.util.equals(MsgVest, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgVestResponse
 */
export class MsgVestResponse extends Message<MsgVestResponse> {
  constructor(data?: PartialMessage<MsgVestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgVestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVestResponse {
    return new MsgVestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVestResponse {
    return new MsgVestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVestResponse {
    return new MsgVestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgVestResponse | PlainMessage<MsgVestResponse> | undefined, b: MsgVestResponse | PlainMessage<MsgVestResponse> | undefined): boolean {
    return proto3.util.equals(MsgVestResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgCancelVest
 */
export class MsgCancelVest extends Message<MsgCancelVest> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: string denom = 3;
   */
  denom = "";

  constructor(data?: PartialMessage<MsgCancelVest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgCancelVest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelVest {
    return new MsgCancelVest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelVest {
    return new MsgCancelVest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelVest {
    return new MsgCancelVest().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelVest | PlainMessage<MsgCancelVest> | undefined, b: MsgCancelVest | PlainMessage<MsgCancelVest> | undefined): boolean {
    return proto3.util.equals(MsgCancelVest, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgCancelVestResponse
 */
export class MsgCancelVestResponse extends Message<MsgCancelVestResponse> {
  constructor(data?: PartialMessage<MsgCancelVestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgCancelVestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelVestResponse {
    return new MsgCancelVestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelVestResponse {
    return new MsgCancelVestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelVestResponse {
    return new MsgCancelVestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelVestResponse | PlainMessage<MsgCancelVestResponse> | undefined, b: MsgCancelVestResponse | PlainMessage<MsgCancelVestResponse> | undefined): boolean {
    return proto3.util.equals(MsgCancelVestResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgClaimVesting
 */
export class MsgClaimVesting extends Message<MsgClaimVesting> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  constructor(data?: PartialMessage<MsgClaimVesting>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgClaimVesting";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimVesting {
    return new MsgClaimVesting().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimVesting {
    return new MsgClaimVesting().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimVesting {
    return new MsgClaimVesting().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimVesting | PlainMessage<MsgClaimVesting> | undefined, b: MsgClaimVesting | PlainMessage<MsgClaimVesting> | undefined): boolean {
    return proto3.util.equals(MsgClaimVesting, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgClaimVestingResponse
 */
export class MsgClaimVestingResponse extends Message<MsgClaimVestingResponse> {
  constructor(data?: PartialMessage<MsgClaimVestingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgClaimVestingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimVestingResponse {
    return new MsgClaimVestingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimVestingResponse {
    return new MsgClaimVestingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimVestingResponse {
    return new MsgClaimVestingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimVestingResponse | PlainMessage<MsgClaimVestingResponse> | undefined, b: MsgClaimVestingResponse | PlainMessage<MsgClaimVestingResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimVestingResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgVestNow
 */
export class MsgVestNow extends Message<MsgVestNow> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: string denom = 3;
   */
  denom = "";

  constructor(data?: PartialMessage<MsgVestNow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgVestNow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVestNow {
    return new MsgVestNow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVestNow {
    return new MsgVestNow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVestNow {
    return new MsgVestNow().fromJsonString(jsonString, options);
  }

  static equals(a: MsgVestNow | PlainMessage<MsgVestNow> | undefined, b: MsgVestNow | PlainMessage<MsgVestNow> | undefined): boolean {
    return proto3.util.equals(MsgVestNow, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgVestNowResponse
 */
export class MsgVestNowResponse extends Message<MsgVestNowResponse> {
  constructor(data?: PartialMessage<MsgVestNowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgVestNowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVestNowResponse {
    return new MsgVestNowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVestNowResponse {
    return new MsgVestNowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVestNowResponse {
    return new MsgVestNowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgVestNowResponse | PlainMessage<MsgVestNowResponse> | undefined, b: MsgVestNowResponse | PlainMessage<MsgVestNowResponse> | undefined): boolean {
    return proto3.util.equals(MsgVestNowResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgUpdateVestingInfo
 */
export class MsgUpdateVestingInfo extends Message<MsgUpdateVestingInfo> {
  /**
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * @generated from field: string base_denom = 2;
   */
  baseDenom = "";

  /**
   * @generated from field: string vesting_denom = 3;
   */
  vestingDenom = "";

  /**
   * @generated from field: int64 num_blocks = 4;
   */
  numBlocks = protoInt64.zero;

  /**
   * @generated from field: int64 vest_now_factor = 5;
   */
  vestNowFactor = protoInt64.zero;

  /**
   * @generated from field: int64 num_max_vestings = 6;
   */
  numMaxVestings = protoInt64.zero;

  constructor(data?: PartialMessage<MsgUpdateVestingInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgUpdateVestingInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "base_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "vesting_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "num_blocks", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "vest_now_factor", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "num_max_vestings", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateVestingInfo {
    return new MsgUpdateVestingInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateVestingInfo {
    return new MsgUpdateVestingInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateVestingInfo {
    return new MsgUpdateVestingInfo().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateVestingInfo | PlainMessage<MsgUpdateVestingInfo> | undefined, b: MsgUpdateVestingInfo | PlainMessage<MsgUpdateVestingInfo> | undefined): boolean {
    return proto3.util.equals(MsgUpdateVestingInfo, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgUpdateVestingInfoResponse
 */
export class MsgUpdateVestingInfoResponse extends Message<MsgUpdateVestingInfoResponse> {
  constructor(data?: PartialMessage<MsgUpdateVestingInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgUpdateVestingInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateVestingInfoResponse {
    return new MsgUpdateVestingInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateVestingInfoResponse {
    return new MsgUpdateVestingInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateVestingInfoResponse {
    return new MsgUpdateVestingInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateVestingInfoResponse | PlainMessage<MsgUpdateVestingInfoResponse> | undefined, b: MsgUpdateVestingInfoResponse | PlainMessage<MsgUpdateVestingInfoResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateVestingInfoResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgVestLiquid
 */
export class MsgVestLiquid extends Message<MsgVestLiquid> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: string denom = 3;
   */
  denom = "";

  constructor(data?: PartialMessage<MsgVestLiquid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgVestLiquid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVestLiquid {
    return new MsgVestLiquid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVestLiquid {
    return new MsgVestLiquid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVestLiquid {
    return new MsgVestLiquid().fromJsonString(jsonString, options);
  }

  static equals(a: MsgVestLiquid | PlainMessage<MsgVestLiquid> | undefined, b: MsgVestLiquid | PlainMessage<MsgVestLiquid> | undefined): boolean {
    return proto3.util.equals(MsgVestLiquid, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgVestLiquidResponse
 */
export class MsgVestLiquidResponse extends Message<MsgVestLiquidResponse> {
  constructor(data?: PartialMessage<MsgVestLiquidResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgVestLiquidResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgVestLiquidResponse {
    return new MsgVestLiquidResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgVestLiquidResponse {
    return new MsgVestLiquidResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgVestLiquidResponse {
    return new MsgVestLiquidResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgVestLiquidResponse | PlainMessage<MsgVestLiquidResponse> | undefined, b: MsgVestLiquidResponse | PlainMessage<MsgVestLiquidResponse> | undefined): boolean {
    return proto3.util.equals(MsgVestLiquidResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgClaimRewards
 */
export class MsgClaimRewards extends Message<MsgClaimRewards> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  constructor(data?: PartialMessage<MsgClaimRewards>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgClaimRewards";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimRewards {
    return new MsgClaimRewards().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimRewards {
    return new MsgClaimRewards().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimRewards {
    return new MsgClaimRewards().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimRewards | PlainMessage<MsgClaimRewards> | undefined, b: MsgClaimRewards | PlainMessage<MsgClaimRewards> | undefined): boolean {
    return proto3.util.equals(MsgClaimRewards, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgClaimRewardsResponse
 */
export class MsgClaimRewardsResponse extends Message<MsgClaimRewardsResponse> {
  constructor(data?: PartialMessage<MsgClaimRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgClaimRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimRewardsResponse {
    return new MsgClaimRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimRewardsResponse {
    return new MsgClaimRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimRewardsResponse {
    return new MsgClaimRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimRewardsResponse | PlainMessage<MsgClaimRewardsResponse> | undefined, b: MsgClaimRewardsResponse | PlainMessage<MsgClaimRewardsResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimRewardsResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgStake
 */
export class MsgStake extends Message<MsgStake> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: string asset = 3;
   */
  asset = "";

  /**
   * @generated from field: string validator_address = 4;
   */
  validatorAddress = "";

  constructor(data?: PartialMessage<MsgStake>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgStake";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgStake {
    return new MsgStake().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgStake {
    return new MsgStake().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgStake {
    return new MsgStake().fromJsonString(jsonString, options);
  }

  static equals(a: MsgStake | PlainMessage<MsgStake> | undefined, b: MsgStake | PlainMessage<MsgStake> | undefined): boolean {
    return proto3.util.equals(MsgStake, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgStakeResponse
 */
export class MsgStakeResponse extends Message<MsgStakeResponse> {
  /**
   * @generated from field: uint64 code = 1;
   */
  code = protoInt64.zero;

  /**
   * @generated from field: string result = 2;
   */
  result = "";

  constructor(data?: PartialMessage<MsgStakeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgStakeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "result", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgStakeResponse {
    return new MsgStakeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgStakeResponse {
    return new MsgStakeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgStakeResponse {
    return new MsgStakeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgStakeResponse | PlainMessage<MsgStakeResponse> | undefined, b: MsgStakeResponse | PlainMessage<MsgStakeResponse> | undefined): boolean {
    return proto3.util.equals(MsgStakeResponse, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgUnstake
 */
export class MsgUnstake extends Message<MsgUnstake> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: string asset = 3;
   */
  asset = "";

  /**
   * @generated from field: string validator_address = 4;
   */
  validatorAddress = "";

  constructor(data?: PartialMessage<MsgUnstake>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgUnstake";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnstake {
    return new MsgUnstake().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnstake {
    return new MsgUnstake().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnstake {
    return new MsgUnstake().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnstake | PlainMessage<MsgUnstake> | undefined, b: MsgUnstake | PlainMessage<MsgUnstake> | undefined): boolean {
    return proto3.util.equals(MsgUnstake, a, b);
  }
}

/**
 * @generated from message elys.commitment.MsgUnstakeResponse
 */
export class MsgUnstakeResponse extends Message<MsgUnstakeResponse> {
  /**
   * @generated from field: uint64 code = 1;
   */
  code = protoInt64.zero;

  /**
   * @generated from field: string result = 2;
   */
  result = "";

  constructor(data?: PartialMessage<MsgUnstakeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.MsgUnstakeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "result", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnstakeResponse {
    return new MsgUnstakeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnstakeResponse {
    return new MsgUnstakeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnstakeResponse {
    return new MsgUnstakeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnstakeResponse | PlainMessage<MsgUnstakeResponse> | undefined, b: MsgUnstakeResponse | PlainMessage<MsgUnstakeResponse> | undefined): boolean {
    return proto3.util.equals(MsgUnstakeResponse, a, b);
  }
}


// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/commitment/params.proto (package elys.commitment, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from enum elys.commitment.EarnType
 */
export enum EarnType {
  /**
   * @generated from enum value: ALL_PROGRAM = 0;
   */
  ALL_PROGRAM = 0,

  /**
   * @generated from enum value: USDC_PROGRAM = 1;
   */
  USDC_PROGRAM = 1,

  /**
   * @generated from enum value: ELYS_PROGRAM = 2;
   */
  ELYS_PROGRAM = 2,

  /**
   * @generated from enum value: EDEN_PROGRAM = 3;
   */
  EDEN_PROGRAM = 3,

  /**
   * @generated from enum value: EDENB_PROGRAM = 4;
   */
  EDENB_PROGRAM = 4,

  /**
   * @generated from enum value: LP_MINING_PROGRAM = 5;
   */
  LP_MINING_PROGRAM = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(EarnType)
proto3.util.setEnumType(EarnType, "elys.commitment.EarnType", [
  { no: 0, name: "ALL_PROGRAM" },
  { no: 1, name: "USDC_PROGRAM" },
  { no: 2, name: "ELYS_PROGRAM" },
  { no: 3, name: "EDEN_PROGRAM" },
  { no: 4, name: "EDENB_PROGRAM" },
  { no: 5, name: "LP_MINING_PROGRAM" },
]);

/**
 * Params defines the parameters for the module.
 *
 * @generated from message elys.commitment.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: repeated elys.commitment.VestingInfo vesting_infos = 1;
   */
  vestingInfos: VestingInfo[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_committed = 2;
   */
  totalCommitted: Coin[] = [];

  /**
   * @generated from field: uint64 number_of_commitments = 3;
   */
  numberOfCommitments = protoInt64.zero;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vesting_infos", kind: "message", T: VestingInfo, repeated: true },
    { no: 2, name: "total_committed", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "number_of_commitments", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * @generated from message elys.commitment.LegacyParams
 */
export class LegacyParams extends Message<LegacyParams> {
  /**
   * @generated from field: repeated elys.commitment.VestingInfo vesting_infos = 1;
   */
  vestingInfos: VestingInfo[] = [];

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_committed = 2;
   */
  totalCommitted: Coin[] = [];

  constructor(data?: PartialMessage<LegacyParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.LegacyParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vesting_infos", kind: "message", T: VestingInfo, repeated: true },
    { no: 2, name: "total_committed", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LegacyParams {
    return new LegacyParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LegacyParams {
    return new LegacyParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LegacyParams {
    return new LegacyParams().fromJsonString(jsonString, options);
  }

  static equals(a: LegacyParams | PlainMessage<LegacyParams> | undefined, b: LegacyParams | PlainMessage<LegacyParams> | undefined): boolean {
    return proto3.util.equals(LegacyParams, a, b);
  }
}

/**
 * @generated from message elys.commitment.VestingInfo
 */
export class VestingInfo extends Message<VestingInfo> {
  /**
   * @generated from field: string base_denom = 1;
   */
  baseDenom = "";

  /**
   * @generated from field: string vesting_denom = 2;
   */
  vestingDenom = "";

  /**
   * @generated from field: int64 num_blocks = 3;
   */
  numBlocks = protoInt64.zero;

  /**
   * @generated from field: string vest_now_factor = 4;
   */
  vestNowFactor = "";

  /**
   * @generated from field: int64 num_max_vestings = 5;
   */
  numMaxVestings = protoInt64.zero;

  constructor(data?: PartialMessage<VestingInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.commitment.VestingInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vesting_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "num_blocks", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "vest_now_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "num_max_vestings", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VestingInfo {
    return new VestingInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VestingInfo {
    return new VestingInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VestingInfo {
    return new VestingInfo().fromJsonString(jsonString, options);
  }

  static equals(a: VestingInfo | PlainMessage<VestingInfo> | undefined, b: VestingInfo | PlainMessage<VestingInfo> | undefined): boolean {
    return proto3.util.equals(VestingInfo, a, b);
  }
}


// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file elys/commitment/tx.proto (package elys.commitment, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MsgCancelVest, MsgCancelVestResponse, MsgClaimVesting, MsgClaimVestingResponse, MsgCommitClaimedRewards, MsgCommitClaimedRewardsResponse, MsgStake, MsgStakeResponse, MsgUncommitTokens, MsgUncommitTokensResponse, MsgUnstake, MsgUnstakeResponse, MsgUpdateVestingInfo, MsgUpdateVestingInfoResponse, MsgVest, MsgVestLiquid, MsgVestLiquidResponse, MsgVestNow, MsgVestNowResponse, MsgVestResponse } from "./tx_pb.js";

const TYPE_NAME = "elys.commitment.Msg";

/**
 * CommitClaimedRewards commit the tokens on claimed store to committed
 *
 * @generated from rpc elys.commitment.Msg.CommitClaimedRewards
 */
export const MsgCommitClaimedRewardsService = {
  typeName: TYPE_NAME,
  method: "CommitClaimedRewards",
  Request: MsgCommitClaimedRewards,
  Response: MsgCommitClaimedRewardsResponse,
} as const;

/**
 * UncommitTokens uncommits the tokens from committed store and make it liquid immediately
 *
 * @generated from rpc elys.commitment.Msg.UncommitTokens
 */
export const MsgUncommitTokensService = {
  typeName: TYPE_NAME,
  method: "UncommitTokens",
  Request: MsgUncommitTokens,
  Response: MsgUncommitTokensResponse,
} as const;

/**
 * Vest converts user's commitment to vesting - start with unclaimed rewards and if it's not enough deduct from committed bucket
 * mainly utilized for Eden
 *
 * @generated from rpc elys.commitment.Msg.Vest
 */
export const MsgVestService = {
  typeName: TYPE_NAME,
  method: "Vest",
  Request: MsgVest,
  Response: MsgVestResponse,
} as const;

/**
 * VestNow provides functionality to get the token immediately but lower amount than original
 * e.g. user can burn 1000 ueden and get 800 uelys when the ratio is 80%
 *
 * @generated from rpc elys.commitment.Msg.VestNow
 */
export const MsgVestNowService = {
  typeName: TYPE_NAME,
  method: "VestNow",
  Request: MsgVestNow,
  Response: MsgVestNowResponse,
} as const;

/**
 * VestLiquid converts user's balance to vesting to be utilized for normal tokens vesting like ATOM vesting
 *
 * @generated from rpc elys.commitment.Msg.VestLiquid
 */
export const MsgVestLiquidService = {
  typeName: TYPE_NAME,
  method: "VestLiquid",
  Request: MsgVestLiquid,
  Response: MsgVestLiquidResponse,
} as const;

/**
 * CancelVest cancel the user's vesting and the user reject to get vested tokens
 *
 * @generated from rpc elys.commitment.Msg.CancelVest
 */
export const MsgCancelVestService = {
  typeName: TYPE_NAME,
  method: "CancelVest",
  Request: MsgCancelVest,
  Response: MsgCancelVestResponse,
} as const;

/**
 * ClaimVesting claims already vested amount
 *
 * @generated from rpc elys.commitment.Msg.ClaimVesting
 */
export const MsgClaimVestingService = {
  typeName: TYPE_NAME,
  method: "ClaimVesting",
  Request: MsgClaimVesting,
  Response: MsgClaimVestingResponse,
} as const;

/**
 * UpdateVestingInfo add/update specific vesting info by denom on Params
 *
 * @generated from rpc elys.commitment.Msg.UpdateVestingInfo
 */
export const MsgUpdateVestingInfoService = {
  typeName: TYPE_NAME,
  method: "UpdateVestingInfo",
  Request: MsgUpdateVestingInfo,
  Response: MsgUpdateVestingInfoResponse,
} as const;

/**
 * @generated from rpc elys.commitment.Msg.Stake
 */
export const MsgStakeService = {
  typeName: TYPE_NAME,
  method: "Stake",
  Request: MsgStake,
  Response: MsgStakeResponse,
} as const;

/**
 * @generated from rpc elys.commitment.Msg.Unstake
 */
export const MsgUnstakeService = {
  typeName: TYPE_NAME,
  method: "Unstake",
  Request: MsgUnstake,
  Response: MsgUnstakeResponse,
} as const;


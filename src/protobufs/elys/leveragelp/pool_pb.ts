// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/leveragelp/pool.proto (package elys.leveragelp, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message elys.leveragelp.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * @generated from field: uint64 amm_pool_id = 1;
   */
  ammPoolId = protoInt64.zero;

  /**
   * @generated from field: string health = 2;
   */
  health = "";

  /**
   * @generated from field: bool enabled = 3;
   */
  enabled = false;

  /**
   * @generated from field: bool closed = 4;
   */
  closed = false;

  /**
   * @generated from field: string leveraged_lp_amount = 5;
   */
  leveragedLpAmount = "";

  /**
   * @generated from field: string leverage_max = 6;
   */
  leverageMax = "";

  constructor(data?: PartialMessage<Pool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.leveragelp.Pool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amm_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "health", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "closed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "leveraged_lp_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "leverage_max", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options);
  }

  static equals(a: Pool | PlainMessage<Pool> | undefined, b: Pool | PlainMessage<Pool> | undefined): boolean {
    return proto3.util.equals(Pool, a, b);
  }
}


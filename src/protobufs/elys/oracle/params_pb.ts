// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/oracle/params.proto (package elys.oracle, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Params defines the parameters for the module.
 *
 * @generated from message elys.oracle.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: string band_channel_source = 1;
   */
  bandChannelSource = "";

  /**
   * @generated from field: uint64 oracle_script_id = 2;
   */
  oracleScriptId = protoInt64.zero;

  /**
   * @generated from field: uint64 multiplier = 3;
   */
  multiplier = protoInt64.zero;

  /**
   * @generated from field: uint64 ask_count = 4;
   */
  askCount = protoInt64.zero;

  /**
   * @generated from field: uint64 min_count = 5;
   */
  minCount = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin fee_limit = 6;
   */
  feeLimit: Coin[] = [];

  /**
   * @generated from field: uint64 prepare_gas = 7;
   */
  prepareGas = protoInt64.zero;

  /**
   * @generated from field: uint64 execute_gas = 8;
   */
  executeGas = protoInt64.zero;

  /**
   * @generated from field: string client_id = 9;
   */
  clientId = "";

  /**
   * @generated from field: string band_epoch = 10;
   */
  bandEpoch = "";

  /**
   * @generated from field: uint64 price_expiry_time = 11;
   */
  priceExpiryTime = protoInt64.zero;

  /**
   * @generated from field: uint64 life_time_in_blocks = 12;
   */
  lifeTimeInBlocks = protoInt64.zero;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.oracle.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "band_channel_source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "oracle_script_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "multiplier", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "ask_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "min_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "fee_limit", kind: "message", T: Coin, repeated: true },
    { no: 7, name: "prepare_gas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "execute_gas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "band_epoch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "price_expiry_time", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "life_time_in_blocks", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}


// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/masterchef/params.proto (package elys.masterchef, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { IncentiveInfo } from "./incentive_pb.js";
import { DexRewardsTracker } from "./dex_rewards_traker_pb.js";

/**
 * Params defines the parameters for the module.
 *
 * @generated from message elys.masterchef.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: elys.masterchef.IncentiveInfo lp_incentives = 1;
   */
  lpIncentives?: IncentiveInfo;

  /**
   * gas fees and swap fees portion for lps, `100 - reward_portion_for_lps - reward_portion_for_stakers = revenue percent for protocol`.
   *
   * @generated from field: string reward_portion_for_lps = 2;
   */
  rewardPortionForLps = "";

  /**
   * gas fees and swap fees portion for stakers, `100 - reward_portion_for_lps - reward_portion_for_stakers = revenue percent for protocol`.
   *
   * @generated from field: string reward_portion_for_stakers = 3;
   */
  rewardPortionForStakers = "";

  /**
   * Tracking dex rewards given to LPs
   *
   * @generated from field: elys.masterchef.DexRewardsTracker dex_rewards_lps = 4;
   */
  dexRewardsLps?: DexRewardsTracker;

  /**
   * Maximum eden reward apr for lps - [0 - 0.3]
   *
   * @generated from field: string max_eden_reward_apr_lps = 5;
   */
  maxEdenRewardAprLps = "";

  /**
   * @generated from field: repeated elys.masterchef.SupportedRewardDenom supported_reward_denoms = 6;
   */
  supportedRewardDenoms: SupportedRewardDenom[] = [];

  /**
   * @generated from field: string protocol_revenue_address = 7;
   */
  protocolRevenueAddress = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lp_incentives", kind: "message", T: IncentiveInfo },
    { no: 2, name: "reward_portion_for_lps", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reward_portion_for_stakers", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "dex_rewards_lps", kind: "message", T: DexRewardsTracker },
    { no: 5, name: "max_eden_reward_apr_lps", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "supported_reward_denoms", kind: "message", T: SupportedRewardDenom, repeated: true },
    { no: 7, name: "protocol_revenue_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * @generated from message elys.masterchef.SupportedRewardDenom
 */
export class SupportedRewardDenom extends Message<SupportedRewardDenom> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string min_amount = 2;
   */
  minAmount = "";

  constructor(data?: PartialMessage<SupportedRewardDenom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.masterchef.SupportedRewardDenom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SupportedRewardDenom {
    return new SupportedRewardDenom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SupportedRewardDenom {
    return new SupportedRewardDenom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SupportedRewardDenom {
    return new SupportedRewardDenom().fromJsonString(jsonString, options);
  }

  static equals(a: SupportedRewardDenom | PlainMessage<SupportedRewardDenom> | undefined, b: SupportedRewardDenom | PlainMessage<SupportedRewardDenom> | undefined): boolean {
    return proto3.util.equals(SupportedRewardDenom, a, b);
  }
}


// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/stablestake/debt.proto (package elys.stablestake, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message elys.stablestake.Debt
 */
export class Debt extends Message<Debt> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string borrowed = 2;
   */
  borrowed = "";

  /**
   * @generated from field: string interest_paid = 3;
   */
  interestPaid = "";

  /**
   * @generated from field: string interest_stacked = 4;
   */
  interestStacked = "";

  /**
   * @generated from field: uint64 borrow_time = 5;
   */
  borrowTime = protoInt64.zero;

  /**
   * @generated from field: uint64 last_interest_calc_time = 6;
   */
  lastInterestCalcTime = protoInt64.zero;

  constructor(data?: PartialMessage<Debt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.stablestake.Debt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "borrowed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "interest_paid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "interest_stacked", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "borrow_time", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "last_interest_calc_time", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Debt {
    return new Debt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Debt {
    return new Debt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Debt {
    return new Debt().fromJsonString(jsonString, options);
  }

  static equals(a: Debt | PlainMessage<Debt> | undefined, b: Debt | PlainMessage<Debt> | undefined): boolean {
    return proto3.util.equals(Debt, a, b);
  }
}


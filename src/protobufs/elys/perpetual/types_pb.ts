// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/perpetual/types.proto (package elys.perpetual, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum elys.perpetual.Position
 */
export enum Position {
  /**
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LONG = 1;
   */
  LONG = 1,

  /**
   * @generated from enum value: SHORT = 2;
   */
  SHORT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Position)
proto3.util.setEnumType(Position, "elys.perpetual.Position", [
  { no: 0, name: "UNSPECIFIED" },
  { no: 1, name: "LONG" },
  { no: 2, name: "SHORT" },
]);

/**
 * @generated from message elys.perpetual.MTP
 */
export class MTP extends Message<MTP> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string collateral_asset = 2;
   */
  collateralAsset = "";

  /**
   * @generated from field: string trading_asset = 3;
   */
  tradingAsset = "";

  /**
   * @generated from field: string liabilities_asset = 4;
   */
  liabilitiesAsset = "";

  /**
   * @generated from field: string custody_asset = 5;
   */
  custodyAsset = "";

  /**
   * @generated from field: string collateral = 6;
   */
  collateral = "";

  /**
   * @generated from field: string liabilities = 7;
   */
  liabilities = "";

  /**
   * @generated from field: string borrow_interest_paid_collateral = 8;
   */
  borrowInterestPaidCollateral = "";

  /**
   * @generated from field: string borrow_interest_paid_custody = 9;
   */
  borrowInterestPaidCustody = "";

  /**
   * @generated from field: string borrow_interest_unpaid_collateral = 10;
   */
  borrowInterestUnpaidCollateral = "";

  /**
   * @generated from field: string custody = 11;
   */
  custody = "";

  /**
   * @generated from field: string take_profit_liabilities = 12;
   */
  takeProfitLiabilities = "";

  /**
   * @generated from field: string take_profit_custody = 13;
   */
  takeProfitCustody = "";

  /**
   * @generated from field: string leverage = 14;
   */
  leverage = "";

  /**
   * @generated from field: string mtp_health = 15;
   */
  mtpHealth = "";

  /**
   * @generated from field: elys.perpetual.Position position = 16;
   */
  position = Position.UNSPECIFIED;

  /**
   * @generated from field: uint64 id = 17;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: uint64 amm_pool_id = 18;
   */
  ammPoolId = protoInt64.zero;

  /**
   * @generated from field: string consolidate_leverage = 19;
   */
  consolidateLeverage = "";

  /**
   * @generated from field: string sum_collateral = 20;
   */
  sumCollateral = "";

  /**
   * @generated from field: string take_profit_price = 21;
   */
  takeProfitPrice = "";

  /**
   * @generated from field: string take_profit_borrow_rate = 22;
   */
  takeProfitBorrowRate = "";

  /**
   * funding fee paid
   *
   * @generated from field: string funding_fee_paid_collateral = 23;
   */
  fundingFeePaidCollateral = "";

  /**
   * @generated from field: string funding_fee_paid_custody = 24;
   */
  fundingFeePaidCustody = "";

  /**
   * funding fee received
   *
   * @generated from field: string funding_fee_received_collateral = 25;
   */
  fundingFeeReceivedCollateral = "";

  /**
   * @generated from field: string funding_fee_received_custody = 26;
   */
  fundingFeeReceivedCustody = "";

  /**
   * @generated from field: string open_price = 27;
   */
  openPrice = "";

  constructor(data?: PartialMessage<MTP>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.MTP";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "collateral_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "trading_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "liabilities_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "custody_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "collateral", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "liabilities", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "borrow_interest_paid_collateral", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "borrow_interest_paid_custody", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "borrow_interest_unpaid_collateral", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "custody", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "take_profit_liabilities", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "take_profit_custody", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "leverage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "mtp_health", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "position", kind: "enum", T: proto3.getEnumType(Position) },
    { no: 17, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "amm_pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "consolidate_leverage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "sum_collateral", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "take_profit_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "take_profit_borrow_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "funding_fee_paid_collateral", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "funding_fee_paid_custody", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "funding_fee_received_collateral", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 26, name: "funding_fee_received_custody", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 27, name: "open_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MTP {
    return new MTP().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MTP {
    return new MTP().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MTP {
    return new MTP().fromJsonString(jsonString, options);
  }

  static equals(a: MTP | PlainMessage<MTP> | undefined, b: MTP | PlainMessage<MTP> | undefined): boolean {
    return proto3.util.equals(MTP, a, b);
  }
}

/**
 * @generated from message elys.perpetual.WhiteList
 */
export class WhiteList extends Message<WhiteList> {
  /**
   * @generated from field: repeated string validator_list = 1;
   */
  validatorList: string[] = [];

  constructor(data?: PartialMessage<WhiteList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.perpetual.WhiteList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_list", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhiteList {
    return new WhiteList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhiteList {
    return new WhiteList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhiteList {
    return new WhiteList().fromJsonString(jsonString, options);
  }

  static equals(a: WhiteList | PlainMessage<WhiteList> | undefined, b: WhiteList | PlainMessage<WhiteList> | undefined): boolean {
    return proto3.util.equals(WhiteList, a, b);
  }
}


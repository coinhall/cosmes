// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file elys/tokenomics/inflation_entry.proto (package elys.tokenomics, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message elys.tokenomics.InflationEntry
 */
export class InflationEntry extends Message<InflationEntry> {
  /**
   * @generated from field: uint64 lm_rewards = 1;
   */
  lmRewards = protoInt64.zero;

  /**
   * @generated from field: uint64 ics_staking_rewards = 2;
   */
  icsStakingRewards = protoInt64.zero;

  /**
   * @generated from field: uint64 community_fund = 3;
   */
  communityFund = protoInt64.zero;

  /**
   * @generated from field: uint64 strategic_reserve = 4;
   */
  strategicReserve = protoInt64.zero;

  /**
   * @generated from field: uint64 team_tokens_vested = 5;
   */
  teamTokensVested = protoInt64.zero;

  constructor(data?: PartialMessage<InflationEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "elys.tokenomics.InflationEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lm_rewards", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "ics_staking_rewards", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "community_fund", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "strategic_reserve", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "team_tokens_vested", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InflationEntry {
    return new InflationEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InflationEntry {
    return new InflationEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InflationEntry {
    return new InflationEntry().fromJsonString(jsonString, options);
  }

  static equals(a: InflationEntry | PlainMessage<InflationEntry> | undefined, b: InflationEntry | PlainMessage<InflationEntry> | undefined): boolean {
    return proto3.util.equals(InflationEntry, a, b);
  }
}


// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/router/v1beta1/tx.proto (package kava.router.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgMintDeposit converts a delegation into staking derivatives and deposits it all into an earn vault.
 *
 * @generated from message kava.router.v1beta1.MsgMintDeposit
 */
export class MsgMintDeposit extends Message<MsgMintDeposit> {
  /**
   * depositor represents the owner of the delegation to convert
   *
   * @generated from field: string depositor = 1;
   */
  depositor = "";

  /**
   * validator is the validator for the depositor's delegation
   *
   * @generated from field: string validator = 2;
   */
  validator = "";

  /**
   * amount is the delegation balance to convert
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgMintDeposit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.router.v1beta1.MsgMintDeposit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMintDeposit {
    return new MsgMintDeposit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMintDeposit {
    return new MsgMintDeposit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMintDeposit {
    return new MsgMintDeposit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMintDeposit | PlainMessage<MsgMintDeposit> | undefined, b: MsgMintDeposit | PlainMessage<MsgMintDeposit> | undefined): boolean {
    return proto3.util.equals(MsgMintDeposit, a, b);
  }
}

/**
 * MsgMintDepositResponse defines the Msg/MsgMintDeposit response type.
 *
 * @generated from message kava.router.v1beta1.MsgMintDepositResponse
 */
export class MsgMintDepositResponse extends Message<MsgMintDepositResponse> {
  constructor(data?: PartialMessage<MsgMintDepositResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.router.v1beta1.MsgMintDepositResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMintDepositResponse {
    return new MsgMintDepositResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMintDepositResponse {
    return new MsgMintDepositResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMintDepositResponse {
    return new MsgMintDepositResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMintDepositResponse | PlainMessage<MsgMintDepositResponse> | undefined, b: MsgMintDepositResponse | PlainMessage<MsgMintDepositResponse> | undefined): boolean {
    return proto3.util.equals(MsgMintDepositResponse, a, b);
  }
}

/**
 * MsgDelegateMintDeposit delegates tokens to a validator, then converts them into staking derivatives,
 * then deposits to an earn vault.
 *
 * @generated from message kava.router.v1beta1.MsgDelegateMintDeposit
 */
export class MsgDelegateMintDeposit extends Message<MsgDelegateMintDeposit> {
  /**
   * depositor represents the owner of the tokens to delegate
   *
   * @generated from field: string depositor = 1;
   */
  depositor = "";

  /**
   * validator is the address of the validator to delegate to
   *
   * @generated from field: string validator = 2;
   */
  validator = "";

  /**
   * amount is the tokens to delegate
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgDelegateMintDeposit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.router.v1beta1.MsgDelegateMintDeposit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelegateMintDeposit {
    return new MsgDelegateMintDeposit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelegateMintDeposit {
    return new MsgDelegateMintDeposit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelegateMintDeposit {
    return new MsgDelegateMintDeposit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelegateMintDeposit | PlainMessage<MsgDelegateMintDeposit> | undefined, b: MsgDelegateMintDeposit | PlainMessage<MsgDelegateMintDeposit> | undefined): boolean {
    return proto3.util.equals(MsgDelegateMintDeposit, a, b);
  }
}

/**
 * MsgDelegateMintDepositResponse defines the Msg/MsgDelegateMintDeposit response type.
 *
 * @generated from message kava.router.v1beta1.MsgDelegateMintDepositResponse
 */
export class MsgDelegateMintDepositResponse extends Message<MsgDelegateMintDepositResponse> {
  constructor(data?: PartialMessage<MsgDelegateMintDepositResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.router.v1beta1.MsgDelegateMintDepositResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDelegateMintDepositResponse {
    return new MsgDelegateMintDepositResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDelegateMintDepositResponse {
    return new MsgDelegateMintDepositResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDelegateMintDepositResponse {
    return new MsgDelegateMintDepositResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDelegateMintDepositResponse | PlainMessage<MsgDelegateMintDepositResponse> | undefined, b: MsgDelegateMintDepositResponse | PlainMessage<MsgDelegateMintDepositResponse> | undefined): boolean {
    return proto3.util.equals(MsgDelegateMintDepositResponse, a, b);
  }
}

/**
 * MsgWithdrawBurn removes staking derivatives from an earn vault and converts them back to a staking delegation.
 *
 * @generated from message kava.router.v1beta1.MsgWithdrawBurn
 */
export class MsgWithdrawBurn extends Message<MsgWithdrawBurn> {
  /**
   * from is the owner of the earn vault to withdraw from
   *
   * @generated from field: string from = 1;
   */
  from = "";

  /**
   * validator is the address to select the derivative denom to withdraw
   *
   * @generated from field: string validator = 2;
   */
  validator = "";

  /**
   * amount is the staked token equivalent to withdraw
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgWithdrawBurn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.router.v1beta1.MsgWithdrawBurn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawBurn {
    return new MsgWithdrawBurn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawBurn {
    return new MsgWithdrawBurn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawBurn {
    return new MsgWithdrawBurn().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawBurn | PlainMessage<MsgWithdrawBurn> | undefined, b: MsgWithdrawBurn | PlainMessage<MsgWithdrawBurn> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawBurn, a, b);
  }
}

/**
 * MsgWithdrawBurnResponse defines the Msg/MsgWithdrawBurn response type.
 *
 * @generated from message kava.router.v1beta1.MsgWithdrawBurnResponse
 */
export class MsgWithdrawBurnResponse extends Message<MsgWithdrawBurnResponse> {
  constructor(data?: PartialMessage<MsgWithdrawBurnResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.router.v1beta1.MsgWithdrawBurnResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawBurnResponse {
    return new MsgWithdrawBurnResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawBurnResponse {
    return new MsgWithdrawBurnResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawBurnResponse {
    return new MsgWithdrawBurnResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawBurnResponse | PlainMessage<MsgWithdrawBurnResponse> | undefined, b: MsgWithdrawBurnResponse | PlainMessage<MsgWithdrawBurnResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawBurnResponse, a, b);
  }
}

/**
 * MsgWithdrawBurnUndelegate removes staking derivatives from an earn vault, converts them to a staking delegation,
 * then undelegates them from their validator.
 *
 * @generated from message kava.router.v1beta1.MsgWithdrawBurnUndelegate
 */
export class MsgWithdrawBurnUndelegate extends Message<MsgWithdrawBurnUndelegate> {
  /**
   * from is the owner of the earn vault to withdraw from
   *
   * @generated from field: string from = 1;
   */
  from = "";

  /**
   * validator is the address to select the derivative denom to withdraw
   *
   * @generated from field: string validator = 2;
   */
  validator = "";

  /**
   * amount is the staked token equivalent to withdraw
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgWithdrawBurnUndelegate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.router.v1beta1.MsgWithdrawBurnUndelegate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawBurnUndelegate {
    return new MsgWithdrawBurnUndelegate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawBurnUndelegate {
    return new MsgWithdrawBurnUndelegate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawBurnUndelegate {
    return new MsgWithdrawBurnUndelegate().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawBurnUndelegate | PlainMessage<MsgWithdrawBurnUndelegate> | undefined, b: MsgWithdrawBurnUndelegate | PlainMessage<MsgWithdrawBurnUndelegate> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawBurnUndelegate, a, b);
  }
}

/**
 * MsgWithdrawBurnUndelegateResponse defines the Msg/MsgWithdrawBurnUndelegate response type.
 *
 * @generated from message kava.router.v1beta1.MsgWithdrawBurnUndelegateResponse
 */
export class MsgWithdrawBurnUndelegateResponse extends Message<MsgWithdrawBurnUndelegateResponse> {
  constructor(data?: PartialMessage<MsgWithdrawBurnUndelegateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.router.v1beta1.MsgWithdrawBurnUndelegateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawBurnUndelegateResponse {
    return new MsgWithdrawBurnUndelegateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawBurnUndelegateResponse {
    return new MsgWithdrawBurnUndelegateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawBurnUndelegateResponse {
    return new MsgWithdrawBurnUndelegateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawBurnUndelegateResponse | PlainMessage<MsgWithdrawBurnUndelegateResponse> | undefined, b: MsgWithdrawBurnUndelegateResponse | PlainMessage<MsgWithdrawBurnUndelegateResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawBurnUndelegateResponse, a, b);
  }
}


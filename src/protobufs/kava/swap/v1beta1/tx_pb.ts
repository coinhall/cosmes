// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/swap/v1beta1/tx.proto (package kava.swap.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgDeposit represents a message for depositing liquidity into a pool
 *
 * @generated from message kava.swap.v1beta1.MsgDeposit
 */
export class MsgDeposit extends Message<MsgDeposit> {
  /**
   * depositor represents the address to deposit funds from
   *
   * @generated from field: string depositor = 1;
   */
  depositor = "";

  /**
   * token_a represents one token of deposit pair
   *
   * @generated from field: cosmos.base.v1beta1.Coin token_a = 2;
   */
  tokenA?: Coin;

  /**
   * token_b represents one token of deposit pair
   *
   * @generated from field: cosmos.base.v1beta1.Coin token_b = 3;
   */
  tokenB?: Coin;

  /**
   * slippage represents the max decimal percentage price change
   *
   * @generated from field: string slippage = 4;
   */
  slippage = "";

  /**
   * deadline represents the unix timestamp to complete the deposit by
   *
   * @generated from field: int64 deadline = 5;
   */
  deadline = protoInt64.zero;

  constructor(data?: PartialMessage<MsgDeposit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.MsgDeposit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token_a", kind: "message", T: Coin },
    { no: 3, name: "token_b", kind: "message", T: Coin },
    { no: 4, name: "slippage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "deadline", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeposit {
    return new MsgDeposit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeposit {
    return new MsgDeposit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeposit {
    return new MsgDeposit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeposit | PlainMessage<MsgDeposit> | undefined, b: MsgDeposit | PlainMessage<MsgDeposit> | undefined): boolean {
    return proto3.util.equals(MsgDeposit, a, b);
  }
}

/**
 * MsgDepositResponse defines the Msg/Deposit response type.
 *
 * @generated from message kava.swap.v1beta1.MsgDepositResponse
 */
export class MsgDepositResponse extends Message<MsgDepositResponse> {
  constructor(data?: PartialMessage<MsgDepositResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.MsgDepositResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDepositResponse | PlainMessage<MsgDepositResponse> | undefined, b: MsgDepositResponse | PlainMessage<MsgDepositResponse> | undefined): boolean {
    return proto3.util.equals(MsgDepositResponse, a, b);
  }
}

/**
 * MsgWithdraw represents a message for withdrawing liquidity from a pool
 *
 * @generated from message kava.swap.v1beta1.MsgWithdraw
 */
export class MsgWithdraw extends Message<MsgWithdraw> {
  /**
   * from represents the address we are withdrawing for
   *
   * @generated from field: string from = 1;
   */
  from = "";

  /**
   * shares represents the amount of shares to withdraw
   *
   * @generated from field: string shares = 2;
   */
  shares = "";

  /**
   * min_token_a represents the minimum a token to withdraw
   *
   * @generated from field: cosmos.base.v1beta1.Coin min_token_a = 3;
   */
  minTokenA?: Coin;

  /**
   * min_token_a represents the minimum a token to withdraw
   *
   * @generated from field: cosmos.base.v1beta1.Coin min_token_b = 4;
   */
  minTokenB?: Coin;

  /**
   * deadline represents the unix timestamp to complete the withdraw by
   *
   * @generated from field: int64 deadline = 5;
   */
  deadline = protoInt64.zero;

  constructor(data?: PartialMessage<MsgWithdraw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.MsgWithdraw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "min_token_a", kind: "message", T: Coin },
    { no: 4, name: "min_token_b", kind: "message", T: Coin },
    { no: 5, name: "deadline", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdraw | PlainMessage<MsgWithdraw> | undefined, b: MsgWithdraw | PlainMessage<MsgWithdraw> | undefined): boolean {
    return proto3.util.equals(MsgWithdraw, a, b);
  }
}

/**
 * MsgWithdrawResponse defines the Msg/Withdraw response type.
 *
 * @generated from message kava.swap.v1beta1.MsgWithdrawResponse
 */
export class MsgWithdrawResponse extends Message<MsgWithdrawResponse> {
  constructor(data?: PartialMessage<MsgWithdrawResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.MsgWithdrawResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawResponse | PlainMessage<MsgWithdrawResponse> | undefined, b: MsgWithdrawResponse | PlainMessage<MsgWithdrawResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawResponse, a, b);
  }
}

/**
 * MsgSwapExactForTokens represents a message for trading exact coinA for coinB
 *
 * @generated from message kava.swap.v1beta1.MsgSwapExactForTokens
 */
export class MsgSwapExactForTokens extends Message<MsgSwapExactForTokens> {
  /**
   * represents the address swaping the tokens
   *
   * @generated from field: string requester = 1;
   */
  requester = "";

  /**
   * exact_token_a represents the exact amount to swap for token_b
   *
   * @generated from field: cosmos.base.v1beta1.Coin exact_token_a = 2;
   */
  exactTokenA?: Coin;

  /**
   * token_b represents the desired token_b to swap for
   *
   * @generated from field: cosmos.base.v1beta1.Coin token_b = 3;
   */
  tokenB?: Coin;

  /**
   * slippage represents the maximum change in token_b allowed
   *
   * @generated from field: string slippage = 4;
   */
  slippage = "";

  /**
   * deadline represents the unix timestamp to complete the swap by
   *
   * @generated from field: int64 deadline = 5;
   */
  deadline = protoInt64.zero;

  constructor(data?: PartialMessage<MsgSwapExactForTokens>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.MsgSwapExactForTokens";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requester", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "exact_token_a", kind: "message", T: Coin },
    { no: 3, name: "token_b", kind: "message", T: Coin },
    { no: 4, name: "slippage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "deadline", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSwapExactForTokens {
    return new MsgSwapExactForTokens().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSwapExactForTokens {
    return new MsgSwapExactForTokens().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSwapExactForTokens {
    return new MsgSwapExactForTokens().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSwapExactForTokens | PlainMessage<MsgSwapExactForTokens> | undefined, b: MsgSwapExactForTokens | PlainMessage<MsgSwapExactForTokens> | undefined): boolean {
    return proto3.util.equals(MsgSwapExactForTokens, a, b);
  }
}

/**
 * MsgSwapExactForTokensResponse defines the Msg/SwapExactForTokens response
 * type.
 *
 * @generated from message kava.swap.v1beta1.MsgSwapExactForTokensResponse
 */
export class MsgSwapExactForTokensResponse extends Message<MsgSwapExactForTokensResponse> {
  constructor(data?: PartialMessage<MsgSwapExactForTokensResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.MsgSwapExactForTokensResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSwapExactForTokensResponse {
    return new MsgSwapExactForTokensResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSwapExactForTokensResponse {
    return new MsgSwapExactForTokensResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSwapExactForTokensResponse {
    return new MsgSwapExactForTokensResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSwapExactForTokensResponse | PlainMessage<MsgSwapExactForTokensResponse> | undefined, b: MsgSwapExactForTokensResponse | PlainMessage<MsgSwapExactForTokensResponse> | undefined): boolean {
    return proto3.util.equals(MsgSwapExactForTokensResponse, a, b);
  }
}

/**
 * MsgSwapForExactTokens represents a message for trading coinA for an exact
 * coinB
 *
 * @generated from message kava.swap.v1beta1.MsgSwapForExactTokens
 */
export class MsgSwapForExactTokens extends Message<MsgSwapForExactTokens> {
  /**
   * represents the address swaping the tokens
   *
   * @generated from field: string requester = 1;
   */
  requester = "";

  /**
   * token_a represents the desired token_a to swap for
   *
   * @generated from field: cosmos.base.v1beta1.Coin token_a = 2;
   */
  tokenA?: Coin;

  /**
   * exact_token_b represents the exact token b amount to swap for token a
   *
   * @generated from field: cosmos.base.v1beta1.Coin exact_token_b = 3;
   */
  exactTokenB?: Coin;

  /**
   * slippage represents the maximum change in token_a allowed
   *
   * @generated from field: string slippage = 4;
   */
  slippage = "";

  /**
   * deadline represents the unix timestamp to complete the swap by
   *
   * @generated from field: int64 deadline = 5;
   */
  deadline = protoInt64.zero;

  constructor(data?: PartialMessage<MsgSwapForExactTokens>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.MsgSwapForExactTokens";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requester", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token_a", kind: "message", T: Coin },
    { no: 3, name: "exact_token_b", kind: "message", T: Coin },
    { no: 4, name: "slippage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "deadline", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSwapForExactTokens {
    return new MsgSwapForExactTokens().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSwapForExactTokens {
    return new MsgSwapForExactTokens().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSwapForExactTokens {
    return new MsgSwapForExactTokens().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSwapForExactTokens | PlainMessage<MsgSwapForExactTokens> | undefined, b: MsgSwapForExactTokens | PlainMessage<MsgSwapForExactTokens> | undefined): boolean {
    return proto3.util.equals(MsgSwapForExactTokens, a, b);
  }
}

/**
 * MsgSwapForExactTokensResponse defines the Msg/SwapForExactTokensResponse
 * response type.
 *
 * @generated from message kava.swap.v1beta1.MsgSwapForExactTokensResponse
 */
export class MsgSwapForExactTokensResponse extends Message<MsgSwapForExactTokensResponse> {
  constructor(data?: PartialMessage<MsgSwapForExactTokensResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.MsgSwapForExactTokensResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSwapForExactTokensResponse {
    return new MsgSwapForExactTokensResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSwapForExactTokensResponse {
    return new MsgSwapForExactTokensResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSwapForExactTokensResponse {
    return new MsgSwapForExactTokensResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSwapForExactTokensResponse | PlainMessage<MsgSwapForExactTokensResponse> | undefined, b: MsgSwapForExactTokensResponse | PlainMessage<MsgSwapForExactTokensResponse> | undefined): boolean {
    return proto3.util.equals(MsgSwapForExactTokensResponse, a, b);
  }
}


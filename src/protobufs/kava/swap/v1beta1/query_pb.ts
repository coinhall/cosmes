// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/swap/v1beta1/query.proto (package kava.swap.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./swap_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * QueryParamsRequest defines the request type for querying x/swap parameters.
 *
 * @generated from message kava.swap.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse defines the response type for querying x/swap parameters.
 *
 * @generated from message kava.swap.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params represents the swap module parameters
   *
   * @generated from field: kava.swap.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryPoolsRequest is the request type for the Query/Pools RPC method.
 *
 * @generated from message kava.swap.v1beta1.QueryPoolsRequest
 */
export class QueryPoolsRequest extends Message<QueryPoolsRequest> {
  /**
   * pool_id filters pools by id
   *
   * @generated from field: string pool_id = 1;
   */
  poolId = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryPoolsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.QueryPoolsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolsRequest {
    return new QueryPoolsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolsRequest {
    return new QueryPoolsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolsRequest {
    return new QueryPoolsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolsRequest | PlainMessage<QueryPoolsRequest> | undefined, b: QueryPoolsRequest | PlainMessage<QueryPoolsRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolsRequest, a, b);
  }
}

/**
 * QueryPoolsResponse is the response type for the Query/Pools RPC method.
 *
 * @generated from message kava.swap.v1beta1.QueryPoolsResponse
 */
export class QueryPoolsResponse extends Message<QueryPoolsResponse> {
  /**
   * pools represents returned pools
   *
   * @generated from field: repeated kava.swap.v1beta1.PoolResponse pools = 1;
   */
  pools: PoolResponse[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryPoolsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.QueryPoolsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: PoolResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolsResponse {
    return new QueryPoolsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolsResponse {
    return new QueryPoolsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolsResponse {
    return new QueryPoolsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolsResponse | PlainMessage<QueryPoolsResponse> | undefined, b: QueryPoolsResponse | PlainMessage<QueryPoolsResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolsResponse, a, b);
  }
}

/**
 * Pool represents the state of a single pool
 *
 * @generated from message kava.swap.v1beta1.PoolResponse
 */
export class PoolResponse extends Message<PoolResponse> {
  /**
   * name represents the name of the pool
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * coins represents the total reserves of the pool
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 2;
   */
  coins: Coin[] = [];

  /**
   *  total_shares represents the total shares of the pool
   *
   * @generated from field: string total_shares = 3;
   */
  totalShares = "";

  constructor(data?: PartialMessage<PoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.PoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "coins", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "total_shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolResponse {
    return new PoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolResponse {
    return new PoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolResponse {
    return new PoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PoolResponse | PlainMessage<PoolResponse> | undefined, b: PoolResponse | PlainMessage<PoolResponse> | undefined): boolean {
    return proto3.util.equals(PoolResponse, a, b);
  }
}

/**
 * QueryDepositsRequest is the request type for the Query/Deposits RPC method.
 *
 * @generated from message kava.swap.v1beta1.QueryDepositsRequest
 */
export class QueryDepositsRequest extends Message<QueryDepositsRequest> {
  /**
   * owner optionally filters deposits by owner
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * pool_id optionally fitlers deposits by pool id
   *
   * @generated from field: string pool_id = 2;
   */
  poolId = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDepositsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.QueryDepositsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDepositsRequest {
    return new QueryDepositsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDepositsRequest {
    return new QueryDepositsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDepositsRequest {
    return new QueryDepositsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDepositsRequest | PlainMessage<QueryDepositsRequest> | undefined, b: QueryDepositsRequest | PlainMessage<QueryDepositsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDepositsRequest, a, b);
  }
}

/**
 * QueryDepositsResponse is the response type for the Query/Deposits RPC method.
 *
 * @generated from message kava.swap.v1beta1.QueryDepositsResponse
 */
export class QueryDepositsResponse extends Message<QueryDepositsResponse> {
  /**
   * deposits returns the deposits matching the requested parameters
   *
   * @generated from field: repeated kava.swap.v1beta1.DepositResponse deposits = 1;
   */
  deposits: DepositResponse[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDepositsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.QueryDepositsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deposits", kind: "message", T: DepositResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDepositsResponse {
    return new QueryDepositsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDepositsResponse {
    return new QueryDepositsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDepositsResponse {
    return new QueryDepositsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDepositsResponse | PlainMessage<QueryDepositsResponse> | undefined, b: QueryDepositsResponse | PlainMessage<QueryDepositsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDepositsResponse, a, b);
  }
}

/**
 * DepositResponse defines a single deposit query response type.
 *
 * @generated from message kava.swap.v1beta1.DepositResponse
 */
export class DepositResponse extends Message<DepositResponse> {
  /**
   * depositor represents the owner of the deposit
   *
   * @generated from field: string depositor = 1;
   */
  depositor = "";

  /**
   * pool_id represents the pool the deposit is for
   *
   * @generated from field: string pool_id = 2;
   */
  poolId = "";

  /**
   * shares_owned presents the shares owned by the depositor for the pool
   *
   * @generated from field: string shares_owned = 3;
   */
  sharesOwned = "";

  /**
   * shares_value represents the coin value of the shares_owned
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin shares_value = 4;
   */
  sharesValue: Coin[] = [];

  constructor(data?: PartialMessage<DepositResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.DepositResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "shares_owned", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "shares_value", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DepositResponse {
    return new DepositResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DepositResponse {
    return new DepositResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DepositResponse {
    return new DepositResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DepositResponse | PlainMessage<DepositResponse> | undefined, b: DepositResponse | PlainMessage<DepositResponse> | undefined): boolean {
    return proto3.util.equals(DepositResponse, a, b);
  }
}


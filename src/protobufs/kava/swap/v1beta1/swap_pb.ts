// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/swap/v1beta1/swap.proto (package kava.swap.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Params defines the parameters for the swap module.
 *
 * @generated from message kava.swap.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * allowed_pools defines that pools that are allowed to be created
   *
   * @generated from field: repeated kava.swap.v1beta1.AllowedPool allowed_pools = 1;
   */
  allowedPools: AllowedPool[] = [];

  /**
   * swap_fee defines the swap fee for all pools
   *
   * @generated from field: string swap_fee = 2;
   */
  swapFee = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "allowed_pools", kind: "message", T: AllowedPool, repeated: true },
    { no: 2, name: "swap_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * AllowedPool defines a pool that is allowed to be created
 *
 * @generated from message kava.swap.v1beta1.AllowedPool
 */
export class AllowedPool extends Message<AllowedPool> {
  /**
   * token_a represents the a token allowed
   *
   * @generated from field: string token_a = 1;
   */
  tokenA = "";

  /**
   * token_b represents the b token allowed
   *
   * @generated from field: string token_b = 2;
   */
  tokenB = "";

  constructor(data?: PartialMessage<AllowedPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.AllowedPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_a", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token_b", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllowedPool {
    return new AllowedPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllowedPool {
    return new AllowedPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllowedPool {
    return new AllowedPool().fromJsonString(jsonString, options);
  }

  static equals(a: AllowedPool | PlainMessage<AllowedPool> | undefined, b: AllowedPool | PlainMessage<AllowedPool> | undefined): boolean {
    return proto3.util.equals(AllowedPool, a, b);
  }
}

/**
 * PoolRecord represents the state of a liquidity pool
 * and is used to store the state of a denominated pool
 *
 * @generated from message kava.swap.v1beta1.PoolRecord
 */
export class PoolRecord extends Message<PoolRecord> {
  /**
   * pool_id represents the unique id of the pool
   *
   * @generated from field: string pool_id = 1;
   */
  poolId = "";

  /**
   * reserves_a is the a token coin reserves
   *
   * @generated from field: cosmos.base.v1beta1.Coin reserves_a = 2;
   */
  reservesA?: Coin;

  /**
   * reserves_b is the a token coin reserves
   *
   * @generated from field: cosmos.base.v1beta1.Coin reserves_b = 3;
   */
  reservesB?: Coin;

  /**
   * total_shares is the total distrubuted shares of the pool
   *
   * @generated from field: string total_shares = 4;
   */
  totalShares = "";

  constructor(data?: PartialMessage<PoolRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.PoolRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reserves_a", kind: "message", T: Coin },
    { no: 3, name: "reserves_b", kind: "message", T: Coin },
    { no: 4, name: "total_shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolRecord {
    return new PoolRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolRecord {
    return new PoolRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolRecord {
    return new PoolRecord().fromJsonString(jsonString, options);
  }

  static equals(a: PoolRecord | PlainMessage<PoolRecord> | undefined, b: PoolRecord | PlainMessage<PoolRecord> | undefined): boolean {
    return proto3.util.equals(PoolRecord, a, b);
  }
}

/**
 * ShareRecord stores the shares owned for a depositor and pool
 *
 * @generated from message kava.swap.v1beta1.ShareRecord
 */
export class ShareRecord extends Message<ShareRecord> {
  /**
   * depositor represents the owner of the shares
   *
   * @generated from field: bytes depositor = 1;
   */
  depositor = new Uint8Array(0);

  /**
   * pool_id represents the pool the shares belong to
   *
   * @generated from field: string pool_id = 2;
   */
  poolId = "";

  /**
   * shares_owned represents the number of shares owned by depsoitor for the pool_id
   *
   * @generated from field: string shares_owned = 3;
   */
  sharesOwned = "";

  constructor(data?: PartialMessage<ShareRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.swap.v1beta1.ShareRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "depositor", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "shares_owned", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShareRecord {
    return new ShareRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShareRecord {
    return new ShareRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShareRecord {
    return new ShareRecord().fromJsonString(jsonString, options);
  }

  static equals(a: ShareRecord | PlainMessage<ShareRecord> | undefined, b: ShareRecord | PlainMessage<ShareRecord> | undefined): boolean {
    return proto3.util.equals(ShareRecord, a, b);
  }
}


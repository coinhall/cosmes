// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/validatorvesting/v1beta1/query.proto (package kava.validatorvesting.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * QueryCirculatingSupplyRequest is the request type for the Query/CirculatingSupply RPC method
 *
 * @generated from message kava.validatorvesting.v1beta1.QueryCirculatingSupplyRequest
 */
export class QueryCirculatingSupplyRequest extends Message<QueryCirculatingSupplyRequest> {
  constructor(data?: PartialMessage<QueryCirculatingSupplyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.validatorvesting.v1beta1.QueryCirculatingSupplyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCirculatingSupplyRequest {
    return new QueryCirculatingSupplyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCirculatingSupplyRequest {
    return new QueryCirculatingSupplyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCirculatingSupplyRequest {
    return new QueryCirculatingSupplyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCirculatingSupplyRequest | PlainMessage<QueryCirculatingSupplyRequest> | undefined, b: QueryCirculatingSupplyRequest | PlainMessage<QueryCirculatingSupplyRequest> | undefined): boolean {
    return proto3.util.equals(QueryCirculatingSupplyRequest, a, b);
  }
}

/**
 * QueryCirculatingSupplyResponse is the response type for the Query/CirculatingSupply RPC method
 *
 * @generated from message kava.validatorvesting.v1beta1.QueryCirculatingSupplyResponse
 */
export class QueryCirculatingSupplyResponse extends Message<QueryCirculatingSupplyResponse> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  constructor(data?: PartialMessage<QueryCirculatingSupplyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.validatorvesting.v1beta1.QueryCirculatingSupplyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCirculatingSupplyResponse {
    return new QueryCirculatingSupplyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCirculatingSupplyResponse {
    return new QueryCirculatingSupplyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCirculatingSupplyResponse {
    return new QueryCirculatingSupplyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCirculatingSupplyResponse | PlainMessage<QueryCirculatingSupplyResponse> | undefined, b: QueryCirculatingSupplyResponse | PlainMessage<QueryCirculatingSupplyResponse> | undefined): boolean {
    return proto3.util.equals(QueryCirculatingSupplyResponse, a, b);
  }
}

/**
 * QueryTotalSupplyRequest is the request type for the Query/TotalSupply RPC method
 *
 * @generated from message kava.validatorvesting.v1beta1.QueryTotalSupplyRequest
 */
export class QueryTotalSupplyRequest extends Message<QueryTotalSupplyRequest> {
  constructor(data?: PartialMessage<QueryTotalSupplyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.validatorvesting.v1beta1.QueryTotalSupplyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalSupplyRequest {
    return new QueryTotalSupplyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalSupplyRequest {
    return new QueryTotalSupplyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalSupplyRequest {
    return new QueryTotalSupplyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalSupplyRequest | PlainMessage<QueryTotalSupplyRequest> | undefined, b: QueryTotalSupplyRequest | PlainMessage<QueryTotalSupplyRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalSupplyRequest, a, b);
  }
}

/**
 * QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC method
 *
 * @generated from message kava.validatorvesting.v1beta1.QueryTotalSupplyResponse
 */
export class QueryTotalSupplyResponse extends Message<QueryTotalSupplyResponse> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  constructor(data?: PartialMessage<QueryTotalSupplyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.validatorvesting.v1beta1.QueryTotalSupplyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalSupplyResponse {
    return new QueryTotalSupplyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalSupplyResponse {
    return new QueryTotalSupplyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalSupplyResponse {
    return new QueryTotalSupplyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalSupplyResponse | PlainMessage<QueryTotalSupplyResponse> | undefined, b: QueryTotalSupplyResponse | PlainMessage<QueryTotalSupplyResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalSupplyResponse, a, b);
  }
}

/**
 * QueryCirculatingSupplyHARDRequest is the request type for the Query/CirculatingSupplyHARD RPC method
 *
 * @generated from message kava.validatorvesting.v1beta1.QueryCirculatingSupplyHARDRequest
 */
export class QueryCirculatingSupplyHARDRequest extends Message<QueryCirculatingSupplyHARDRequest> {
  constructor(data?: PartialMessage<QueryCirculatingSupplyHARDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.validatorvesting.v1beta1.QueryCirculatingSupplyHARDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCirculatingSupplyHARDRequest {
    return new QueryCirculatingSupplyHARDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCirculatingSupplyHARDRequest {
    return new QueryCirculatingSupplyHARDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCirculatingSupplyHARDRequest {
    return new QueryCirculatingSupplyHARDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCirculatingSupplyHARDRequest | PlainMessage<QueryCirculatingSupplyHARDRequest> | undefined, b: QueryCirculatingSupplyHARDRequest | PlainMessage<QueryCirculatingSupplyHARDRequest> | undefined): boolean {
    return proto3.util.equals(QueryCirculatingSupplyHARDRequest, a, b);
  }
}

/**
 * QueryCirculatingSupplyHARDResponse is the response type for the Query/CirculatingSupplyHARD RPC method
 *
 * @generated from message kava.validatorvesting.v1beta1.QueryCirculatingSupplyHARDResponse
 */
export class QueryCirculatingSupplyHARDResponse extends Message<QueryCirculatingSupplyHARDResponse> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  constructor(data?: PartialMessage<QueryCirculatingSupplyHARDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.validatorvesting.v1beta1.QueryCirculatingSupplyHARDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCirculatingSupplyHARDResponse {
    return new QueryCirculatingSupplyHARDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCirculatingSupplyHARDResponse {
    return new QueryCirculatingSupplyHARDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCirculatingSupplyHARDResponse {
    return new QueryCirculatingSupplyHARDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCirculatingSupplyHARDResponse | PlainMessage<QueryCirculatingSupplyHARDResponse> | undefined, b: QueryCirculatingSupplyHARDResponse | PlainMessage<QueryCirculatingSupplyHARDResponse> | undefined): boolean {
    return proto3.util.equals(QueryCirculatingSupplyHARDResponse, a, b);
  }
}

/**
 * QueryCirculatingSupplyUSDXRequest is the request type for the Query/CirculatingSupplyUSDX RPC method
 *
 * @generated from message kava.validatorvesting.v1beta1.QueryCirculatingSupplyUSDXRequest
 */
export class QueryCirculatingSupplyUSDXRequest extends Message<QueryCirculatingSupplyUSDXRequest> {
  constructor(data?: PartialMessage<QueryCirculatingSupplyUSDXRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.validatorvesting.v1beta1.QueryCirculatingSupplyUSDXRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCirculatingSupplyUSDXRequest {
    return new QueryCirculatingSupplyUSDXRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCirculatingSupplyUSDXRequest {
    return new QueryCirculatingSupplyUSDXRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCirculatingSupplyUSDXRequest {
    return new QueryCirculatingSupplyUSDXRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCirculatingSupplyUSDXRequest | PlainMessage<QueryCirculatingSupplyUSDXRequest> | undefined, b: QueryCirculatingSupplyUSDXRequest | PlainMessage<QueryCirculatingSupplyUSDXRequest> | undefined): boolean {
    return proto3.util.equals(QueryCirculatingSupplyUSDXRequest, a, b);
  }
}

/**
 * QueryCirculatingSupplyUSDXResponse is the response type for the Query/CirculatingSupplyUSDX RPC method
 *
 * @generated from message kava.validatorvesting.v1beta1.QueryCirculatingSupplyUSDXResponse
 */
export class QueryCirculatingSupplyUSDXResponse extends Message<QueryCirculatingSupplyUSDXResponse> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  constructor(data?: PartialMessage<QueryCirculatingSupplyUSDXResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.validatorvesting.v1beta1.QueryCirculatingSupplyUSDXResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCirculatingSupplyUSDXResponse {
    return new QueryCirculatingSupplyUSDXResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCirculatingSupplyUSDXResponse {
    return new QueryCirculatingSupplyUSDXResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCirculatingSupplyUSDXResponse {
    return new QueryCirculatingSupplyUSDXResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCirculatingSupplyUSDXResponse | PlainMessage<QueryCirculatingSupplyUSDXResponse> | undefined, b: QueryCirculatingSupplyUSDXResponse | PlainMessage<QueryCirculatingSupplyUSDXResponse> | undefined): boolean {
    return proto3.util.equals(QueryCirculatingSupplyUSDXResponse, a, b);
  }
}

/**
 * QueryCirculatingSupplySWPRequest is the request type for the Query/CirculatingSupplySWP RPC method
 *
 * @generated from message kava.validatorvesting.v1beta1.QueryCirculatingSupplySWPRequest
 */
export class QueryCirculatingSupplySWPRequest extends Message<QueryCirculatingSupplySWPRequest> {
  constructor(data?: PartialMessage<QueryCirculatingSupplySWPRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.validatorvesting.v1beta1.QueryCirculatingSupplySWPRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCirculatingSupplySWPRequest {
    return new QueryCirculatingSupplySWPRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCirculatingSupplySWPRequest {
    return new QueryCirculatingSupplySWPRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCirculatingSupplySWPRequest {
    return new QueryCirculatingSupplySWPRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCirculatingSupplySWPRequest | PlainMessage<QueryCirculatingSupplySWPRequest> | undefined, b: QueryCirculatingSupplySWPRequest | PlainMessage<QueryCirculatingSupplySWPRequest> | undefined): boolean {
    return proto3.util.equals(QueryCirculatingSupplySWPRequest, a, b);
  }
}

/**
 * QueryCirculatingSupplySWPResponse is the response type for the Query/CirculatingSupplySWP RPC method
 *
 * @generated from message kava.validatorvesting.v1beta1.QueryCirculatingSupplySWPResponse
 */
export class QueryCirculatingSupplySWPResponse extends Message<QueryCirculatingSupplySWPResponse> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  constructor(data?: PartialMessage<QueryCirculatingSupplySWPResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.validatorvesting.v1beta1.QueryCirculatingSupplySWPResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCirculatingSupplySWPResponse {
    return new QueryCirculatingSupplySWPResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCirculatingSupplySWPResponse {
    return new QueryCirculatingSupplySWPResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCirculatingSupplySWPResponse {
    return new QueryCirculatingSupplySWPResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCirculatingSupplySWPResponse | PlainMessage<QueryCirculatingSupplySWPResponse> | undefined, b: QueryCirculatingSupplySWPResponse | PlainMessage<QueryCirculatingSupplySWPResponse> | undefined): boolean {
    return proto3.util.equals(QueryCirculatingSupplySWPResponse, a, b);
  }
}

/**
 * QueryTotalSupplyHARDRequest is the request type for the Query/TotalSupplyHARD RPC method
 *
 * @generated from message kava.validatorvesting.v1beta1.QueryTotalSupplyHARDRequest
 */
export class QueryTotalSupplyHARDRequest extends Message<QueryTotalSupplyHARDRequest> {
  constructor(data?: PartialMessage<QueryTotalSupplyHARDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.validatorvesting.v1beta1.QueryTotalSupplyHARDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalSupplyHARDRequest {
    return new QueryTotalSupplyHARDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalSupplyHARDRequest {
    return new QueryTotalSupplyHARDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalSupplyHARDRequest {
    return new QueryTotalSupplyHARDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalSupplyHARDRequest | PlainMessage<QueryTotalSupplyHARDRequest> | undefined, b: QueryTotalSupplyHARDRequest | PlainMessage<QueryTotalSupplyHARDRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalSupplyHARDRequest, a, b);
  }
}

/**
 * QueryTotalSupplyHARDResponse is the response type for the Query/TotalSupplyHARD RPC method
 *
 * @generated from message kava.validatorvesting.v1beta1.QueryTotalSupplyHARDResponse
 */
export class QueryTotalSupplyHARDResponse extends Message<QueryTotalSupplyHARDResponse> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  constructor(data?: PartialMessage<QueryTotalSupplyHARDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.validatorvesting.v1beta1.QueryTotalSupplyHARDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalSupplyHARDResponse {
    return new QueryTotalSupplyHARDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalSupplyHARDResponse {
    return new QueryTotalSupplyHARDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalSupplyHARDResponse {
    return new QueryTotalSupplyHARDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalSupplyHARDResponse | PlainMessage<QueryTotalSupplyHARDResponse> | undefined, b: QueryTotalSupplyHARDResponse | PlainMessage<QueryTotalSupplyHARDResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalSupplyHARDResponse, a, b);
  }
}

/**
 * QueryTotalSupplyUSDXRequest is the request type for the Query/TotalSupplyUSDX RPC method
 *
 * @generated from message kava.validatorvesting.v1beta1.QueryTotalSupplyUSDXRequest
 */
export class QueryTotalSupplyUSDXRequest extends Message<QueryTotalSupplyUSDXRequest> {
  constructor(data?: PartialMessage<QueryTotalSupplyUSDXRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.validatorvesting.v1beta1.QueryTotalSupplyUSDXRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalSupplyUSDXRequest {
    return new QueryTotalSupplyUSDXRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalSupplyUSDXRequest {
    return new QueryTotalSupplyUSDXRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalSupplyUSDXRequest {
    return new QueryTotalSupplyUSDXRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalSupplyUSDXRequest | PlainMessage<QueryTotalSupplyUSDXRequest> | undefined, b: QueryTotalSupplyUSDXRequest | PlainMessage<QueryTotalSupplyUSDXRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalSupplyUSDXRequest, a, b);
  }
}

/**
 * QueryTotalSupplyUSDXResponse is the response type for the Query/TotalSupplyUSDX RPC method
 *
 * @generated from message kava.validatorvesting.v1beta1.QueryTotalSupplyUSDXResponse
 */
export class QueryTotalSupplyUSDXResponse extends Message<QueryTotalSupplyUSDXResponse> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  constructor(data?: PartialMessage<QueryTotalSupplyUSDXResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.validatorvesting.v1beta1.QueryTotalSupplyUSDXResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalSupplyUSDXResponse {
    return new QueryTotalSupplyUSDXResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalSupplyUSDXResponse {
    return new QueryTotalSupplyUSDXResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalSupplyUSDXResponse {
    return new QueryTotalSupplyUSDXResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalSupplyUSDXResponse | PlainMessage<QueryTotalSupplyUSDXResponse> | undefined, b: QueryTotalSupplyUSDXResponse | PlainMessage<QueryTotalSupplyUSDXResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalSupplyUSDXResponse, a, b);
  }
}


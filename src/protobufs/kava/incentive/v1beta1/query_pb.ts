// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/incentive/v1beta1/query.proto (package kava.incentive.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { DelegatorClaim, EarnClaim, HardLiquidityProviderClaim, MultiRewardIndex, RewardIndex, SavingsClaim, SwapClaim, USDXMintingClaim } from "./claims_pb.js";
import { Apy } from "./apy_pb.js";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message kava.incentive.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message kava.incentive.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: kava.incentive.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryRewardsRequest is the request type for the Query/Rewards RPC method.
 *
 * @generated from message kava.incentive.v1beta1.QueryRewardsRequest
 */
export class QueryRewardsRequest extends Message<QueryRewardsRequest> {
  /**
   * owner is the address of the user to query rewards for.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * reward_type is the type of reward to query rewards for, e.g. hard, earn,
   * swap.
   *
   * @generated from field: string reward_type = 2;
   */
  rewardType = "";

  /**
   * unsynchronized is a flag to query rewards that are not simulated for reward
   * synchronized for the current block.
   *
   * @generated from field: bool unsynchronized = 3;
   */
  unsynchronized = false;

  constructor(data?: PartialMessage<QueryRewardsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.QueryRewardsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reward_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "unsynchronized", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardsRequest {
    return new QueryRewardsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardsRequest {
    return new QueryRewardsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardsRequest {
    return new QueryRewardsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardsRequest | PlainMessage<QueryRewardsRequest> | undefined, b: QueryRewardsRequest | PlainMessage<QueryRewardsRequest> | undefined): boolean {
    return proto3.util.equals(QueryRewardsRequest, a, b);
  }
}

/**
 * QueryRewardsResponse is the response type for the Query/Rewards RPC method.
 *
 * @generated from message kava.incentive.v1beta1.QueryRewardsResponse
 */
export class QueryRewardsResponse extends Message<QueryRewardsResponse> {
  /**
   * @generated from field: repeated kava.incentive.v1beta1.USDXMintingClaim usdx_minting_claims = 1;
   */
  usdxMintingClaims: USDXMintingClaim[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.HardLiquidityProviderClaim hard_liquidity_provider_claims = 2;
   */
  hardLiquidityProviderClaims: HardLiquidityProviderClaim[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.DelegatorClaim delegator_claims = 3;
   */
  delegatorClaims: DelegatorClaim[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.SwapClaim swap_claims = 4;
   */
  swapClaims: SwapClaim[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.SavingsClaim savings_claims = 5;
   */
  savingsClaims: SavingsClaim[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.EarnClaim earn_claims = 6;
   */
  earnClaims: EarnClaim[] = [];

  constructor(data?: PartialMessage<QueryRewardsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.QueryRewardsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "usdx_minting_claims", kind: "message", T: USDXMintingClaim, repeated: true },
    { no: 2, name: "hard_liquidity_provider_claims", kind: "message", T: HardLiquidityProviderClaim, repeated: true },
    { no: 3, name: "delegator_claims", kind: "message", T: DelegatorClaim, repeated: true },
    { no: 4, name: "swap_claims", kind: "message", T: SwapClaim, repeated: true },
    { no: 5, name: "savings_claims", kind: "message", T: SavingsClaim, repeated: true },
    { no: 6, name: "earn_claims", kind: "message", T: EarnClaim, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardsResponse {
    return new QueryRewardsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardsResponse {
    return new QueryRewardsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardsResponse {
    return new QueryRewardsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardsResponse | PlainMessage<QueryRewardsResponse> | undefined, b: QueryRewardsResponse | PlainMessage<QueryRewardsResponse> | undefined): boolean {
    return proto3.util.equals(QueryRewardsResponse, a, b);
  }
}

/**
 * QueryRewardFactorsRequest is the request type for the Query/RewardFactors RPC method.
 *
 * @generated from message kava.incentive.v1beta1.QueryRewardFactorsRequest
 */
export class QueryRewardFactorsRequest extends Message<QueryRewardFactorsRequest> {
  constructor(data?: PartialMessage<QueryRewardFactorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.QueryRewardFactorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardFactorsRequest {
    return new QueryRewardFactorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardFactorsRequest {
    return new QueryRewardFactorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardFactorsRequest {
    return new QueryRewardFactorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardFactorsRequest | PlainMessage<QueryRewardFactorsRequest> | undefined, b: QueryRewardFactorsRequest | PlainMessage<QueryRewardFactorsRequest> | undefined): boolean {
    return proto3.util.equals(QueryRewardFactorsRequest, a, b);
  }
}

/**
 * QueryRewardFactorsResponse is the response type for the Query/RewardFactors RPC method.
 *
 * @generated from message kava.incentive.v1beta1.QueryRewardFactorsResponse
 */
export class QueryRewardFactorsResponse extends Message<QueryRewardFactorsResponse> {
  /**
   * @generated from field: repeated kava.incentive.v1beta1.RewardIndex usdx_minting_reward_factors = 1;
   */
  usdxMintingRewardFactors: RewardIndex[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.MultiRewardIndex hard_supply_reward_factors = 2;
   */
  hardSupplyRewardFactors: MultiRewardIndex[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.MultiRewardIndex hard_borrow_reward_factors = 3;
   */
  hardBorrowRewardFactors: MultiRewardIndex[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.MultiRewardIndex delegator_reward_factors = 4;
   */
  delegatorRewardFactors: MultiRewardIndex[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.MultiRewardIndex swap_reward_factors = 5;
   */
  swapRewardFactors: MultiRewardIndex[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.MultiRewardIndex savings_reward_factors = 6;
   */
  savingsRewardFactors: MultiRewardIndex[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.MultiRewardIndex earn_reward_factors = 7;
   */
  earnRewardFactors: MultiRewardIndex[] = [];

  constructor(data?: PartialMessage<QueryRewardFactorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.QueryRewardFactorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "usdx_minting_reward_factors", kind: "message", T: RewardIndex, repeated: true },
    { no: 2, name: "hard_supply_reward_factors", kind: "message", T: MultiRewardIndex, repeated: true },
    { no: 3, name: "hard_borrow_reward_factors", kind: "message", T: MultiRewardIndex, repeated: true },
    { no: 4, name: "delegator_reward_factors", kind: "message", T: MultiRewardIndex, repeated: true },
    { no: 5, name: "swap_reward_factors", kind: "message", T: MultiRewardIndex, repeated: true },
    { no: 6, name: "savings_reward_factors", kind: "message", T: MultiRewardIndex, repeated: true },
    { no: 7, name: "earn_reward_factors", kind: "message", T: MultiRewardIndex, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRewardFactorsResponse {
    return new QueryRewardFactorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRewardFactorsResponse {
    return new QueryRewardFactorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRewardFactorsResponse {
    return new QueryRewardFactorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRewardFactorsResponse | PlainMessage<QueryRewardFactorsResponse> | undefined, b: QueryRewardFactorsResponse | PlainMessage<QueryRewardFactorsResponse> | undefined): boolean {
    return proto3.util.equals(QueryRewardFactorsResponse, a, b);
  }
}

/**
 * QueryApysRequest is the request type for the Query/Apys RPC method.
 *
 * @generated from message kava.incentive.v1beta1.QueryApyRequest
 */
export class QueryApyRequest extends Message<QueryApyRequest> {
  constructor(data?: PartialMessage<QueryApyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.QueryApyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryApyRequest {
    return new QueryApyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryApyRequest {
    return new QueryApyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryApyRequest {
    return new QueryApyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryApyRequest | PlainMessage<QueryApyRequest> | undefined, b: QueryApyRequest | PlainMessage<QueryApyRequest> | undefined): boolean {
    return proto3.util.equals(QueryApyRequest, a, b);
  }
}

/**
 * QueryApysResponse is the response type for the Query/Apys RPC method.
 *
 * @generated from message kava.incentive.v1beta1.QueryApyResponse
 */
export class QueryApyResponse extends Message<QueryApyResponse> {
  /**
   * @generated from field: repeated kava.incentive.v1beta1.Apy earn = 1;
   */
  earn: Apy[] = [];

  constructor(data?: PartialMessage<QueryApyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.QueryApyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "earn", kind: "message", T: Apy, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryApyResponse {
    return new QueryApyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryApyResponse {
    return new QueryApyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryApyResponse {
    return new QueryApyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryApyResponse | PlainMessage<QueryApyResponse> | undefined, b: QueryApyResponse | PlainMessage<QueryApyResponse> | undefined): boolean {
    return proto3.util.equals(QueryApyResponse, a, b);
  }
}


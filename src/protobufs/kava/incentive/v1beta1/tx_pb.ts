// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/incentive/v1beta1/tx.proto (package kava.incentive.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Selection is a pair of denom and multiplier name. It holds the choice of multiplier a user makes when they claim a
 * denom.
 *
 * @generated from message kava.incentive.v1beta1.Selection
 */
export class Selection extends Message<Selection> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string multiplier_name = 2;
   */
  multiplierName = "";

  constructor(data?: PartialMessage<Selection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.Selection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "multiplier_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Selection {
    return new Selection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Selection {
    return new Selection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Selection {
    return new Selection().fromJsonString(jsonString, options);
  }

  static equals(a: Selection | PlainMessage<Selection> | undefined, b: Selection | PlainMessage<Selection> | undefined): boolean {
    return proto3.util.equals(Selection, a, b);
  }
}

/**
 * MsgClaimUSDXMintingReward message type used to claim USDX minting rewards
 *
 * @generated from message kava.incentive.v1beta1.MsgClaimUSDXMintingReward
 */
export class MsgClaimUSDXMintingReward extends Message<MsgClaimUSDXMintingReward> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string multiplier_name = 2;
   */
  multiplierName = "";

  constructor(data?: PartialMessage<MsgClaimUSDXMintingReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.MsgClaimUSDXMintingReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "multiplier_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimUSDXMintingReward {
    return new MsgClaimUSDXMintingReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimUSDXMintingReward {
    return new MsgClaimUSDXMintingReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimUSDXMintingReward {
    return new MsgClaimUSDXMintingReward().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimUSDXMintingReward | PlainMessage<MsgClaimUSDXMintingReward> | undefined, b: MsgClaimUSDXMintingReward | PlainMessage<MsgClaimUSDXMintingReward> | undefined): boolean {
    return proto3.util.equals(MsgClaimUSDXMintingReward, a, b);
  }
}

/**
 * MsgClaimUSDXMintingRewardResponse defines the Msg/ClaimUSDXMintingReward response type.
 *
 * @generated from message kava.incentive.v1beta1.MsgClaimUSDXMintingRewardResponse
 */
export class MsgClaimUSDXMintingRewardResponse extends Message<MsgClaimUSDXMintingRewardResponse> {
  constructor(data?: PartialMessage<MsgClaimUSDXMintingRewardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.MsgClaimUSDXMintingRewardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimUSDXMintingRewardResponse {
    return new MsgClaimUSDXMintingRewardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimUSDXMintingRewardResponse {
    return new MsgClaimUSDXMintingRewardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimUSDXMintingRewardResponse {
    return new MsgClaimUSDXMintingRewardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimUSDXMintingRewardResponse | PlainMessage<MsgClaimUSDXMintingRewardResponse> | undefined, b: MsgClaimUSDXMintingRewardResponse | PlainMessage<MsgClaimUSDXMintingRewardResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimUSDXMintingRewardResponse, a, b);
  }
}

/**
 * MsgClaimHardReward message type used to claim Hard liquidity provider rewards
 *
 * @generated from message kava.incentive.v1beta1.MsgClaimHardReward
 */
export class MsgClaimHardReward extends Message<MsgClaimHardReward> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated kava.incentive.v1beta1.Selection denoms_to_claim = 2;
   */
  denomsToClaim: Selection[] = [];

  constructor(data?: PartialMessage<MsgClaimHardReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.MsgClaimHardReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denoms_to_claim", kind: "message", T: Selection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimHardReward {
    return new MsgClaimHardReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimHardReward {
    return new MsgClaimHardReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimHardReward {
    return new MsgClaimHardReward().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimHardReward | PlainMessage<MsgClaimHardReward> | undefined, b: MsgClaimHardReward | PlainMessage<MsgClaimHardReward> | undefined): boolean {
    return proto3.util.equals(MsgClaimHardReward, a, b);
  }
}

/**
 * MsgClaimHardRewardResponse defines the Msg/ClaimHardReward response type.
 *
 * @generated from message kava.incentive.v1beta1.MsgClaimHardRewardResponse
 */
export class MsgClaimHardRewardResponse extends Message<MsgClaimHardRewardResponse> {
  constructor(data?: PartialMessage<MsgClaimHardRewardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.MsgClaimHardRewardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimHardRewardResponse {
    return new MsgClaimHardRewardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimHardRewardResponse {
    return new MsgClaimHardRewardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimHardRewardResponse {
    return new MsgClaimHardRewardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimHardRewardResponse | PlainMessage<MsgClaimHardRewardResponse> | undefined, b: MsgClaimHardRewardResponse | PlainMessage<MsgClaimHardRewardResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimHardRewardResponse, a, b);
  }
}

/**
 * MsgClaimDelegatorReward message type used to claim delegator rewards
 *
 * @generated from message kava.incentive.v1beta1.MsgClaimDelegatorReward
 */
export class MsgClaimDelegatorReward extends Message<MsgClaimDelegatorReward> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated kava.incentive.v1beta1.Selection denoms_to_claim = 2;
   */
  denomsToClaim: Selection[] = [];

  constructor(data?: PartialMessage<MsgClaimDelegatorReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.MsgClaimDelegatorReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denoms_to_claim", kind: "message", T: Selection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimDelegatorReward {
    return new MsgClaimDelegatorReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimDelegatorReward {
    return new MsgClaimDelegatorReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimDelegatorReward {
    return new MsgClaimDelegatorReward().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimDelegatorReward | PlainMessage<MsgClaimDelegatorReward> | undefined, b: MsgClaimDelegatorReward | PlainMessage<MsgClaimDelegatorReward> | undefined): boolean {
    return proto3.util.equals(MsgClaimDelegatorReward, a, b);
  }
}

/**
 * MsgClaimDelegatorRewardResponse defines the Msg/ClaimDelegatorReward response type.
 *
 * @generated from message kava.incentive.v1beta1.MsgClaimDelegatorRewardResponse
 */
export class MsgClaimDelegatorRewardResponse extends Message<MsgClaimDelegatorRewardResponse> {
  constructor(data?: PartialMessage<MsgClaimDelegatorRewardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.MsgClaimDelegatorRewardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimDelegatorRewardResponse {
    return new MsgClaimDelegatorRewardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimDelegatorRewardResponse {
    return new MsgClaimDelegatorRewardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimDelegatorRewardResponse {
    return new MsgClaimDelegatorRewardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimDelegatorRewardResponse | PlainMessage<MsgClaimDelegatorRewardResponse> | undefined, b: MsgClaimDelegatorRewardResponse | PlainMessage<MsgClaimDelegatorRewardResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimDelegatorRewardResponse, a, b);
  }
}

/**
 * MsgClaimSwapReward message type used to claim delegator rewards
 *
 * @generated from message kava.incentive.v1beta1.MsgClaimSwapReward
 */
export class MsgClaimSwapReward extends Message<MsgClaimSwapReward> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated kava.incentive.v1beta1.Selection denoms_to_claim = 2;
   */
  denomsToClaim: Selection[] = [];

  constructor(data?: PartialMessage<MsgClaimSwapReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.MsgClaimSwapReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denoms_to_claim", kind: "message", T: Selection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimSwapReward {
    return new MsgClaimSwapReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimSwapReward {
    return new MsgClaimSwapReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimSwapReward {
    return new MsgClaimSwapReward().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimSwapReward | PlainMessage<MsgClaimSwapReward> | undefined, b: MsgClaimSwapReward | PlainMessage<MsgClaimSwapReward> | undefined): boolean {
    return proto3.util.equals(MsgClaimSwapReward, a, b);
  }
}

/**
 * MsgClaimSwapRewardResponse defines the Msg/ClaimSwapReward response type.
 *
 * @generated from message kava.incentive.v1beta1.MsgClaimSwapRewardResponse
 */
export class MsgClaimSwapRewardResponse extends Message<MsgClaimSwapRewardResponse> {
  constructor(data?: PartialMessage<MsgClaimSwapRewardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.MsgClaimSwapRewardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimSwapRewardResponse {
    return new MsgClaimSwapRewardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimSwapRewardResponse {
    return new MsgClaimSwapRewardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimSwapRewardResponse {
    return new MsgClaimSwapRewardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimSwapRewardResponse | PlainMessage<MsgClaimSwapRewardResponse> | undefined, b: MsgClaimSwapRewardResponse | PlainMessage<MsgClaimSwapRewardResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimSwapRewardResponse, a, b);
  }
}

/**
 * MsgClaimSavingsReward message type used to claim savings rewards
 *
 * @generated from message kava.incentive.v1beta1.MsgClaimSavingsReward
 */
export class MsgClaimSavingsReward extends Message<MsgClaimSavingsReward> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated kava.incentive.v1beta1.Selection denoms_to_claim = 2;
   */
  denomsToClaim: Selection[] = [];

  constructor(data?: PartialMessage<MsgClaimSavingsReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.MsgClaimSavingsReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denoms_to_claim", kind: "message", T: Selection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimSavingsReward {
    return new MsgClaimSavingsReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimSavingsReward {
    return new MsgClaimSavingsReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimSavingsReward {
    return new MsgClaimSavingsReward().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimSavingsReward | PlainMessage<MsgClaimSavingsReward> | undefined, b: MsgClaimSavingsReward | PlainMessage<MsgClaimSavingsReward> | undefined): boolean {
    return proto3.util.equals(MsgClaimSavingsReward, a, b);
  }
}

/**
 * MsgClaimSavingsRewardResponse defines the Msg/ClaimSavingsReward response type.
 *
 * @generated from message kava.incentive.v1beta1.MsgClaimSavingsRewardResponse
 */
export class MsgClaimSavingsRewardResponse extends Message<MsgClaimSavingsRewardResponse> {
  constructor(data?: PartialMessage<MsgClaimSavingsRewardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.MsgClaimSavingsRewardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimSavingsRewardResponse {
    return new MsgClaimSavingsRewardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimSavingsRewardResponse {
    return new MsgClaimSavingsRewardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimSavingsRewardResponse {
    return new MsgClaimSavingsRewardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimSavingsRewardResponse | PlainMessage<MsgClaimSavingsRewardResponse> | undefined, b: MsgClaimSavingsRewardResponse | PlainMessage<MsgClaimSavingsRewardResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimSavingsRewardResponse, a, b);
  }
}

/**
 * MsgClaimEarnReward message type used to claim earn rewards
 *
 * @generated from message kava.incentive.v1beta1.MsgClaimEarnReward
 */
export class MsgClaimEarnReward extends Message<MsgClaimEarnReward> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: repeated kava.incentive.v1beta1.Selection denoms_to_claim = 2;
   */
  denomsToClaim: Selection[] = [];

  constructor(data?: PartialMessage<MsgClaimEarnReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.MsgClaimEarnReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denoms_to_claim", kind: "message", T: Selection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimEarnReward {
    return new MsgClaimEarnReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimEarnReward {
    return new MsgClaimEarnReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimEarnReward {
    return new MsgClaimEarnReward().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimEarnReward | PlainMessage<MsgClaimEarnReward> | undefined, b: MsgClaimEarnReward | PlainMessage<MsgClaimEarnReward> | undefined): boolean {
    return proto3.util.equals(MsgClaimEarnReward, a, b);
  }
}

/**
 * MsgClaimEarnRewardResponse defines the Msg/ClaimEarnReward response type.
 *
 * @generated from message kava.incentive.v1beta1.MsgClaimEarnRewardResponse
 */
export class MsgClaimEarnRewardResponse extends Message<MsgClaimEarnRewardResponse> {
  constructor(data?: PartialMessage<MsgClaimEarnRewardResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.MsgClaimEarnRewardResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClaimEarnRewardResponse {
    return new MsgClaimEarnRewardResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClaimEarnRewardResponse {
    return new MsgClaimEarnRewardResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClaimEarnRewardResponse {
    return new MsgClaimEarnRewardResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClaimEarnRewardResponse | PlainMessage<MsgClaimEarnRewardResponse> | undefined, b: MsgClaimEarnRewardResponse | PlainMessage<MsgClaimEarnRewardResponse> | undefined): boolean {
    return proto3.util.equals(MsgClaimEarnRewardResponse, a, b);
  }
}


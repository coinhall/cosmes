// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/incentive/v1beta1/params.proto (package kava.incentive.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * RewardPeriod stores the state of an ongoing reward
 *
 * @generated from message kava.incentive.v1beta1.RewardPeriod
 */
export class RewardPeriod extends Message<RewardPeriod> {
  /**
   * @generated from field: bool active = 1;
   */
  active = false;

  /**
   * @generated from field: string collateral_type = 2;
   */
  collateralType = "";

  /**
   * @generated from field: google.protobuf.Timestamp start = 3;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end = 4;
   */
  end?: Timestamp;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin rewards_per_second = 5;
   */
  rewardsPerSecond?: Coin;

  constructor(data?: PartialMessage<RewardPeriod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.RewardPeriod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start", kind: "message", T: Timestamp },
    { no: 4, name: "end", kind: "message", T: Timestamp },
    { no: 5, name: "rewards_per_second", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RewardPeriod {
    return new RewardPeriod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RewardPeriod {
    return new RewardPeriod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RewardPeriod {
    return new RewardPeriod().fromJsonString(jsonString, options);
  }

  static equals(a: RewardPeriod | PlainMessage<RewardPeriod> | undefined, b: RewardPeriod | PlainMessage<RewardPeriod> | undefined): boolean {
    return proto3.util.equals(RewardPeriod, a, b);
  }
}

/**
 * MultiRewardPeriod supports multiple reward types
 *
 * @generated from message kava.incentive.v1beta1.MultiRewardPeriod
 */
export class MultiRewardPeriod extends Message<MultiRewardPeriod> {
  /**
   * @generated from field: bool active = 1;
   */
  active = false;

  /**
   * @generated from field: string collateral_type = 2;
   */
  collateralType = "";

  /**
   * @generated from field: google.protobuf.Timestamp start = 3;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end = 4;
   */
  end?: Timestamp;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin rewards_per_second = 5;
   */
  rewardsPerSecond: Coin[] = [];

  constructor(data?: PartialMessage<MultiRewardPeriod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.MultiRewardPeriod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start", kind: "message", T: Timestamp },
    { no: 4, name: "end", kind: "message", T: Timestamp },
    { no: 5, name: "rewards_per_second", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiRewardPeriod {
    return new MultiRewardPeriod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiRewardPeriod {
    return new MultiRewardPeriod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiRewardPeriod {
    return new MultiRewardPeriod().fromJsonString(jsonString, options);
  }

  static equals(a: MultiRewardPeriod | PlainMessage<MultiRewardPeriod> | undefined, b: MultiRewardPeriod | PlainMessage<MultiRewardPeriod> | undefined): boolean {
    return proto3.util.equals(MultiRewardPeriod, a, b);
  }
}

/**
 * Multiplier amount the claim rewards get increased by, along with how long the claim rewards are locked
 *
 * @generated from message kava.incentive.v1beta1.Multiplier
 */
export class Multiplier extends Message<Multiplier> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int64 months_lockup = 2;
   */
  monthsLockup = protoInt64.zero;

  /**
   * @generated from field: bytes factor = 3;
   */
  factor = new Uint8Array(0);

  constructor(data?: PartialMessage<Multiplier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.Multiplier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "months_lockup", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "factor", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Multiplier {
    return new Multiplier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Multiplier {
    return new Multiplier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Multiplier {
    return new Multiplier().fromJsonString(jsonString, options);
  }

  static equals(a: Multiplier | PlainMessage<Multiplier> | undefined, b: Multiplier | PlainMessage<Multiplier> | undefined): boolean {
    return proto3.util.equals(Multiplier, a, b);
  }
}

/**
 * MultipliersPerDenom is a map of denoms to a set of multipliers
 *
 * @generated from message kava.incentive.v1beta1.MultipliersPerDenom
 */
export class MultipliersPerDenom extends Message<MultipliersPerDenom> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: repeated kava.incentive.v1beta1.Multiplier multipliers = 2;
   */
  multipliers: Multiplier[] = [];

  constructor(data?: PartialMessage<MultipliersPerDenom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.MultipliersPerDenom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "multipliers", kind: "message", T: Multiplier, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultipliersPerDenom {
    return new MultipliersPerDenom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultipliersPerDenom {
    return new MultipliersPerDenom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultipliersPerDenom {
    return new MultipliersPerDenom().fromJsonString(jsonString, options);
  }

  static equals(a: MultipliersPerDenom | PlainMessage<MultipliersPerDenom> | undefined, b: MultipliersPerDenom | PlainMessage<MultipliersPerDenom> | undefined): boolean {
    return proto3.util.equals(MultipliersPerDenom, a, b);
  }
}

/**
 * Params
 *
 * @generated from message kava.incentive.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: repeated kava.incentive.v1beta1.RewardPeriod usdx_minting_reward_periods = 1;
   */
  usdxMintingRewardPeriods: RewardPeriod[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.MultiRewardPeriod hard_supply_reward_periods = 2;
   */
  hardSupplyRewardPeriods: MultiRewardPeriod[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.MultiRewardPeriod hard_borrow_reward_periods = 3;
   */
  hardBorrowRewardPeriods: MultiRewardPeriod[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.MultiRewardPeriod delegator_reward_periods = 4;
   */
  delegatorRewardPeriods: MultiRewardPeriod[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.MultiRewardPeriod swap_reward_periods = 5;
   */
  swapRewardPeriods: MultiRewardPeriod[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.MultipliersPerDenom claim_multipliers = 6;
   */
  claimMultipliers: MultipliersPerDenom[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp claim_end = 7;
   */
  claimEnd?: Timestamp;

  /**
   * @generated from field: repeated kava.incentive.v1beta1.MultiRewardPeriod savings_reward_periods = 8;
   */
  savingsRewardPeriods: MultiRewardPeriod[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.MultiRewardPeriod earn_reward_periods = 9;
   */
  earnRewardPeriods: MultiRewardPeriod[] = [];

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "usdx_minting_reward_periods", kind: "message", T: RewardPeriod, repeated: true },
    { no: 2, name: "hard_supply_reward_periods", kind: "message", T: MultiRewardPeriod, repeated: true },
    { no: 3, name: "hard_borrow_reward_periods", kind: "message", T: MultiRewardPeriod, repeated: true },
    { no: 4, name: "delegator_reward_periods", kind: "message", T: MultiRewardPeriod, repeated: true },
    { no: 5, name: "swap_reward_periods", kind: "message", T: MultiRewardPeriod, repeated: true },
    { no: 6, name: "claim_multipliers", kind: "message", T: MultipliersPerDenom, repeated: true },
    { no: 7, name: "claim_end", kind: "message", T: Timestamp },
    { no: 8, name: "savings_reward_periods", kind: "message", T: MultiRewardPeriod, repeated: true },
    { no: 9, name: "earn_reward_periods", kind: "message", T: MultiRewardPeriod, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}


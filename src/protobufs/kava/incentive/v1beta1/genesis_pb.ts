// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/incentive/v1beta1/genesis.proto (package kava.incentive.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { DelegatorClaim, EarnClaim, HardLiquidityProviderClaim, MultiRewardIndex, SavingsClaim, SwapClaim, USDXMintingClaim } from "./claims_pb.js";
import { Params } from "./params_pb.js";

/**
 * AccumulationTime stores the previous reward distribution time and its corresponding collateral type
 *
 * @generated from message kava.incentive.v1beta1.AccumulationTime
 */
export class AccumulationTime extends Message<AccumulationTime> {
  /**
   * @generated from field: string collateral_type = 1;
   */
  collateralType = "";

  /**
   * @generated from field: google.protobuf.Timestamp previous_accumulation_time = 2;
   */
  previousAccumulationTime?: Timestamp;

  constructor(data?: PartialMessage<AccumulationTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.AccumulationTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "previous_accumulation_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccumulationTime {
    return new AccumulationTime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccumulationTime {
    return new AccumulationTime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccumulationTime {
    return new AccumulationTime().fromJsonString(jsonString, options);
  }

  static equals(a: AccumulationTime | PlainMessage<AccumulationTime> | undefined, b: AccumulationTime | PlainMessage<AccumulationTime> | undefined): boolean {
    return proto3.util.equals(AccumulationTime, a, b);
  }
}

/**
 * GenesisRewardState groups together the global state for a particular reward so it can be exported in genesis.
 *
 * @generated from message kava.incentive.v1beta1.GenesisRewardState
 */
export class GenesisRewardState extends Message<GenesisRewardState> {
  /**
   * @generated from field: repeated kava.incentive.v1beta1.AccumulationTime accumulation_times = 1;
   */
  accumulationTimes: AccumulationTime[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.MultiRewardIndex multi_reward_indexes = 2;
   */
  multiRewardIndexes: MultiRewardIndex[] = [];

  constructor(data?: PartialMessage<GenesisRewardState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.GenesisRewardState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accumulation_times", kind: "message", T: AccumulationTime, repeated: true },
    { no: 2, name: "multi_reward_indexes", kind: "message", T: MultiRewardIndex, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisRewardState {
    return new GenesisRewardState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisRewardState {
    return new GenesisRewardState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisRewardState {
    return new GenesisRewardState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisRewardState | PlainMessage<GenesisRewardState> | undefined, b: GenesisRewardState | PlainMessage<GenesisRewardState> | undefined): boolean {
    return proto3.util.equals(GenesisRewardState, a, b);
  }
}

/**
 * GenesisState is the state that must be provided at genesis.
 *
 * @generated from message kava.incentive.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: kava.incentive.v1beta1.Params params = 1;
   */
  params?: Params;

  /**
   * @generated from field: kava.incentive.v1beta1.GenesisRewardState usdx_reward_state = 2;
   */
  usdxRewardState?: GenesisRewardState;

  /**
   * @generated from field: kava.incentive.v1beta1.GenesisRewardState hard_supply_reward_state = 3;
   */
  hardSupplyRewardState?: GenesisRewardState;

  /**
   * @generated from field: kava.incentive.v1beta1.GenesisRewardState hard_borrow_reward_state = 4;
   */
  hardBorrowRewardState?: GenesisRewardState;

  /**
   * @generated from field: kava.incentive.v1beta1.GenesisRewardState delegator_reward_state = 5;
   */
  delegatorRewardState?: GenesisRewardState;

  /**
   * @generated from field: kava.incentive.v1beta1.GenesisRewardState swap_reward_state = 6;
   */
  swapRewardState?: GenesisRewardState;

  /**
   * @generated from field: repeated kava.incentive.v1beta1.USDXMintingClaim usdx_minting_claims = 7;
   */
  usdxMintingClaims: USDXMintingClaim[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.HardLiquidityProviderClaim hard_liquidity_provider_claims = 8;
   */
  hardLiquidityProviderClaims: HardLiquidityProviderClaim[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.DelegatorClaim delegator_claims = 9;
   */
  delegatorClaims: DelegatorClaim[] = [];

  /**
   * @generated from field: repeated kava.incentive.v1beta1.SwapClaim swap_claims = 10;
   */
  swapClaims: SwapClaim[] = [];

  /**
   * @generated from field: kava.incentive.v1beta1.GenesisRewardState savings_reward_state = 11;
   */
  savingsRewardState?: GenesisRewardState;

  /**
   * @generated from field: repeated kava.incentive.v1beta1.SavingsClaim savings_claims = 12;
   */
  savingsClaims: SavingsClaim[] = [];

  /**
   * @generated from field: kava.incentive.v1beta1.GenesisRewardState earn_reward_state = 13;
   */
  earnRewardState?: GenesisRewardState;

  /**
   * @generated from field: repeated kava.incentive.v1beta1.EarnClaim earn_claims = 14;
   */
  earnClaims: EarnClaim[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.incentive.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "usdx_reward_state", kind: "message", T: GenesisRewardState },
    { no: 3, name: "hard_supply_reward_state", kind: "message", T: GenesisRewardState },
    { no: 4, name: "hard_borrow_reward_state", kind: "message", T: GenesisRewardState },
    { no: 5, name: "delegator_reward_state", kind: "message", T: GenesisRewardState },
    { no: 6, name: "swap_reward_state", kind: "message", T: GenesisRewardState },
    { no: 7, name: "usdx_minting_claims", kind: "message", T: USDXMintingClaim, repeated: true },
    { no: 8, name: "hard_liquidity_provider_claims", kind: "message", T: HardLiquidityProviderClaim, repeated: true },
    { no: 9, name: "delegator_claims", kind: "message", T: DelegatorClaim, repeated: true },
    { no: 10, name: "swap_claims", kind: "message", T: SwapClaim, repeated: true },
    { no: 11, name: "savings_reward_state", kind: "message", T: GenesisRewardState },
    { no: 12, name: "savings_claims", kind: "message", T: SavingsClaim, repeated: true },
    { no: 13, name: "earn_reward_state", kind: "message", T: GenesisRewardState },
    { no: 14, name: "earn_claims", kind: "message", T: EarnClaim, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}


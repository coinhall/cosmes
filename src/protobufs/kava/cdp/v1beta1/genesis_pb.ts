// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/cdp/v1beta1/genesis.proto (package kava.cdp.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { CDP, Deposit } from "./cdp_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * GenesisState defines the cdp module's genesis state.
 *
 * @generated from message kava.cdp.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of the module.
   *
   * @generated from field: kava.cdp.v1beta1.Params params = 1;
   */
  params?: Params;

  /**
   * @generated from field: repeated kava.cdp.v1beta1.CDP cdps = 2;
   */
  cdps: CDP[] = [];

  /**
   * @generated from field: repeated kava.cdp.v1beta1.Deposit deposits = 3;
   */
  deposits: Deposit[] = [];

  /**
   * @generated from field: uint64 starting_cdp_id = 4;
   */
  startingCdpId = protoInt64.zero;

  /**
   * @generated from field: string debt_denom = 5;
   */
  debtDenom = "";

  /**
   * @generated from field: string gov_denom = 6;
   */
  govDenom = "";

  /**
   * @generated from field: repeated kava.cdp.v1beta1.GenesisAccumulationTime previous_accumulation_times = 7;
   */
  previousAccumulationTimes: GenesisAccumulationTime[] = [];

  /**
   * @generated from field: repeated kava.cdp.v1beta1.GenesisTotalPrincipal total_principals = 8;
   */
  totalPrincipals: GenesisTotalPrincipal[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "cdps", kind: "message", T: CDP, repeated: true },
    { no: 3, name: "deposits", kind: "message", T: Deposit, repeated: true },
    { no: 4, name: "starting_cdp_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "debt_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "gov_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "previous_accumulation_times", kind: "message", T: GenesisAccumulationTime, repeated: true },
    { no: 8, name: "total_principals", kind: "message", T: GenesisTotalPrincipal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Params defines the parameters for the cdp module.
 *
 * @generated from message kava.cdp.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: repeated kava.cdp.v1beta1.CollateralParam collateral_params = 1;
   */
  collateralParams: CollateralParam[] = [];

  /**
   * @generated from field: kava.cdp.v1beta1.DebtParam debt_param = 2;
   */
  debtParam?: DebtParam;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin global_debt_limit = 3;
   */
  globalDebtLimit?: Coin;

  /**
   * @generated from field: string surplus_auction_threshold = 4;
   */
  surplusAuctionThreshold = "";

  /**
   * @generated from field: string surplus_auction_lot = 5;
   */
  surplusAuctionLot = "";

  /**
   * @generated from field: string debt_auction_threshold = 6;
   */
  debtAuctionThreshold = "";

  /**
   * @generated from field: string debt_auction_lot = 7;
   */
  debtAuctionLot = "";

  /**
   * @generated from field: bool circuit_breaker = 8;
   */
  circuitBreaker = false;

  /**
   * @generated from field: int64 liquidation_block_interval = 9;
   */
  liquidationBlockInterval = protoInt64.zero;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral_params", kind: "message", T: CollateralParam, repeated: true },
    { no: 2, name: "debt_param", kind: "message", T: DebtParam },
    { no: 3, name: "global_debt_limit", kind: "message", T: Coin },
    { no: 4, name: "surplus_auction_threshold", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "surplus_auction_lot", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "debt_auction_threshold", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "debt_auction_lot", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "circuit_breaker", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "liquidation_block_interval", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * DebtParam defines governance params for debt assets
 *
 * @generated from message kava.cdp.v1beta1.DebtParam
 */
export class DebtParam extends Message<DebtParam> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string reference_asset = 2;
   */
  referenceAsset = "";

  /**
   * @generated from field: string conversion_factor = 3;
   */
  conversionFactor = "";

  /**
   * @generated from field: string debt_floor = 4;
   */
  debtFloor = "";

  constructor(data?: PartialMessage<DebtParam>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.DebtParam";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reference_asset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "conversion_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "debt_floor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebtParam {
    return new DebtParam().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebtParam {
    return new DebtParam().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebtParam {
    return new DebtParam().fromJsonString(jsonString, options);
  }

  static equals(a: DebtParam | PlainMessage<DebtParam> | undefined, b: DebtParam | PlainMessage<DebtParam> | undefined): boolean {
    return proto3.util.equals(DebtParam, a, b);
  }
}

/**
 * CollateralParam defines governance parameters for each collateral type within the cdp module
 *
 * @generated from message kava.cdp.v1beta1.CollateralParam
 */
export class CollateralParam extends Message<CollateralParam> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: string liquidation_ratio = 3;
   */
  liquidationRatio = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin debt_limit = 4;
   */
  debtLimit?: Coin;

  /**
   * @generated from field: string stability_fee = 5;
   */
  stabilityFee = "";

  /**
   * @generated from field: string auction_size = 6;
   */
  auctionSize = "";

  /**
   * @generated from field: string liquidation_penalty = 7;
   */
  liquidationPenalty = "";

  /**
   * @generated from field: string spot_market_id = 8;
   */
  spotMarketId = "";

  /**
   * @generated from field: string liquidation_market_id = 9;
   */
  liquidationMarketId = "";

  /**
   * @generated from field: string keeper_reward_percentage = 10;
   */
  keeperRewardPercentage = "";

  /**
   * @generated from field: string check_collateralization_index_count = 11;
   */
  checkCollateralizationIndexCount = "";

  /**
   * @generated from field: string conversion_factor = 12;
   */
  conversionFactor = "";

  constructor(data?: PartialMessage<CollateralParam>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.CollateralParam";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "liquidation_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "debt_limit", kind: "message", T: Coin },
    { no: 5, name: "stability_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "auction_size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "liquidation_penalty", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "spot_market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "liquidation_market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "keeper_reward_percentage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "check_collateralization_index_count", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "conversion_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollateralParam {
    return new CollateralParam().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollateralParam {
    return new CollateralParam().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollateralParam {
    return new CollateralParam().fromJsonString(jsonString, options);
  }

  static equals(a: CollateralParam | PlainMessage<CollateralParam> | undefined, b: CollateralParam | PlainMessage<CollateralParam> | undefined): boolean {
    return proto3.util.equals(CollateralParam, a, b);
  }
}

/**
 * GenesisAccumulationTime defines the previous distribution time and its corresponding denom
 *
 * @generated from message kava.cdp.v1beta1.GenesisAccumulationTime
 */
export class GenesisAccumulationTime extends Message<GenesisAccumulationTime> {
  /**
   * @generated from field: string collateral_type = 1;
   */
  collateralType = "";

  /**
   * @generated from field: google.protobuf.Timestamp previous_accumulation_time = 2;
   */
  previousAccumulationTime?: Timestamp;

  /**
   * @generated from field: string interest_factor = 3;
   */
  interestFactor = "";

  constructor(data?: PartialMessage<GenesisAccumulationTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.GenesisAccumulationTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "previous_accumulation_time", kind: "message", T: Timestamp },
    { no: 3, name: "interest_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisAccumulationTime {
    return new GenesisAccumulationTime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisAccumulationTime {
    return new GenesisAccumulationTime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisAccumulationTime {
    return new GenesisAccumulationTime().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisAccumulationTime | PlainMessage<GenesisAccumulationTime> | undefined, b: GenesisAccumulationTime | PlainMessage<GenesisAccumulationTime> | undefined): boolean {
    return proto3.util.equals(GenesisAccumulationTime, a, b);
  }
}

/**
 * GenesisTotalPrincipal defines the total principal and its corresponding collateral type
 *
 * @generated from message kava.cdp.v1beta1.GenesisTotalPrincipal
 */
export class GenesisTotalPrincipal extends Message<GenesisTotalPrincipal> {
  /**
   * @generated from field: string collateral_type = 1;
   */
  collateralType = "";

  /**
   * @generated from field: string total_principal = 2;
   */
  totalPrincipal = "";

  constructor(data?: PartialMessage<GenesisTotalPrincipal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.GenesisTotalPrincipal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisTotalPrincipal {
    return new GenesisTotalPrincipal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisTotalPrincipal {
    return new GenesisTotalPrincipal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisTotalPrincipal {
    return new GenesisTotalPrincipal().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisTotalPrincipal | PlainMessage<GenesisTotalPrincipal> | undefined, b: GenesisTotalPrincipal | PlainMessage<GenesisTotalPrincipal> | undefined): boolean {
    return proto3.util.equals(GenesisTotalPrincipal, a, b);
  }
}


// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/cdp/v1beta1/cdp.proto (package kava.cdp.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * CDP defines the state of a single collateralized debt position.
 *
 * @generated from message kava.cdp.v1beta1.CDP
 */
export class CDP extends Message<CDP> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: bytes owner = 2;
   */
  owner = new Uint8Array(0);

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral = 4;
   */
  collateral?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin principal = 5;
   */
  principal?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin accumulated_fees = 6;
   */
  accumulatedFees?: Coin;

  /**
   * @generated from field: google.protobuf.Timestamp fees_updated = 7;
   */
  feesUpdated?: Timestamp;

  /**
   * @generated from field: string interest_factor = 8;
   */
  interestFactor = "";

  constructor(data?: PartialMessage<CDP>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.CDP";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "owner", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "collateral", kind: "message", T: Coin },
    { no: 5, name: "principal", kind: "message", T: Coin },
    { no: 6, name: "accumulated_fees", kind: "message", T: Coin },
    { no: 7, name: "fees_updated", kind: "message", T: Timestamp },
    { no: 8, name: "interest_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CDP {
    return new CDP().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CDP {
    return new CDP().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CDP {
    return new CDP().fromJsonString(jsonString, options);
  }

  static equals(a: CDP | PlainMessage<CDP> | undefined, b: CDP | PlainMessage<CDP> | undefined): boolean {
    return proto3.util.equals(CDP, a, b);
  }
}

/**
 * Deposit defines an amount of coins deposited by an account to a cdp
 *
 * @generated from message kava.cdp.v1beta1.Deposit
 */
export class Deposit extends Message<Deposit> {
  /**
   * @generated from field: uint64 cdp_id = 1;
   */
  cdpId = protoInt64.zero;

  /**
   * @generated from field: string depositor = 2;
   */
  depositor = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<Deposit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.Deposit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cdp_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Deposit {
    return new Deposit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Deposit {
    return new Deposit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Deposit {
    return new Deposit().fromJsonString(jsonString, options);
  }

  static equals(a: Deposit | PlainMessage<Deposit> | undefined, b: Deposit | PlainMessage<Deposit> | undefined): boolean {
    return proto3.util.equals(Deposit, a, b);
  }
}

/**
 * TotalPrincipal defines the total principal of a given collateral type
 *
 * @generated from message kava.cdp.v1beta1.TotalPrincipal
 */
export class TotalPrincipal extends Message<TotalPrincipal> {
  /**
   * @generated from field: string collateral_type = 1;
   */
  collateralType = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<TotalPrincipal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.TotalPrincipal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TotalPrincipal {
    return new TotalPrincipal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TotalPrincipal {
    return new TotalPrincipal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TotalPrincipal {
    return new TotalPrincipal().fromJsonString(jsonString, options);
  }

  static equals(a: TotalPrincipal | PlainMessage<TotalPrincipal> | undefined, b: TotalPrincipal | PlainMessage<TotalPrincipal> | undefined): boolean {
    return proto3.util.equals(TotalPrincipal, a, b);
  }
}

/**
 * TotalCollateral defines the total collateral of a given collateral type
 *
 * @generated from message kava.cdp.v1beta1.TotalCollateral
 */
export class TotalCollateral extends Message<TotalCollateral> {
  /**
   * @generated from field: string collateral_type = 1;
   */
  collateralType = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<TotalCollateral>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.TotalCollateral";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TotalCollateral {
    return new TotalCollateral().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TotalCollateral {
    return new TotalCollateral().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TotalCollateral {
    return new TotalCollateral().fromJsonString(jsonString, options);
  }

  static equals(a: TotalCollateral | PlainMessage<TotalCollateral> | undefined, b: TotalCollateral | PlainMessage<TotalCollateral> | undefined): boolean {
    return proto3.util.equals(TotalCollateral, a, b);
  }
}

/**
 * OwnerCDPIndex defines the cdp ids for a single cdp owner
 *
 * @generated from message kava.cdp.v1beta1.OwnerCDPIndex
 */
export class OwnerCDPIndex extends Message<OwnerCDPIndex> {
  /**
   * @generated from field: repeated uint64 cdp_ids = 1;
   */
  cdpIds: bigint[] = [];

  constructor(data?: PartialMessage<OwnerCDPIndex>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.OwnerCDPIndex";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cdp_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnerCDPIndex {
    return new OwnerCDPIndex().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnerCDPIndex {
    return new OwnerCDPIndex().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnerCDPIndex {
    return new OwnerCDPIndex().fromJsonString(jsonString, options);
  }

  static equals(a: OwnerCDPIndex | PlainMessage<OwnerCDPIndex> | undefined, b: OwnerCDPIndex | PlainMessage<OwnerCDPIndex> | undefined): boolean {
    return proto3.util.equals(OwnerCDPIndex, a, b);
  }
}


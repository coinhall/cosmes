// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/cdp/v1beta1/query.proto (package kava.cdp.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Params } from "./genesis_pb.js";
import { ModuleAccount } from "../../../cosmos/auth/v1beta1/auth_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Deposit, TotalCollateral, TotalPrincipal } from "./cdp_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * QueryParamsRequest defines the request type for the Query/Params RPC method.
 *
 * @generated from message kava.cdp.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse defines the response type for the Query/Params RPC method.
 *
 * @generated from message kava.cdp.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: kava.cdp.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryAccountsRequest defines the request type for the Query/Accounts RPC method.
 *
 * @generated from message kava.cdp.v1beta1.QueryAccountsRequest
 */
export class QueryAccountsRequest extends Message<QueryAccountsRequest> {
  constructor(data?: PartialMessage<QueryAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.QueryAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountsRequest {
    return new QueryAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountsRequest {
    return new QueryAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountsRequest {
    return new QueryAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountsRequest | PlainMessage<QueryAccountsRequest> | undefined, b: QueryAccountsRequest | PlainMessage<QueryAccountsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAccountsRequest, a, b);
  }
}

/**
 * QueryAccountsResponse defines the response type for the Query/Accounts RPC method.
 *
 * @generated from message kava.cdp.v1beta1.QueryAccountsResponse
 */
export class QueryAccountsResponse extends Message<QueryAccountsResponse> {
  /**
   * @generated from field: repeated cosmos.auth.v1beta1.ModuleAccount accounts = 1;
   */
  accounts: ModuleAccount[] = [];

  constructor(data?: PartialMessage<QueryAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.QueryAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: ModuleAccount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountsResponse {
    return new QueryAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountsResponse {
    return new QueryAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountsResponse {
    return new QueryAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountsResponse | PlainMessage<QueryAccountsResponse> | undefined, b: QueryAccountsResponse | PlainMessage<QueryAccountsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAccountsResponse, a, b);
  }
}

/**
 * QueryCdpRequest defines the request type for the Query/Cdp RPC method.
 *
 * @generated from message kava.cdp.v1beta1.QueryCdpRequest
 */
export class QueryCdpRequest extends Message<QueryCdpRequest> {
  /**
   * @generated from field: string collateral_type = 1;
   */
  collateralType = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  constructor(data?: PartialMessage<QueryCdpRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.QueryCdpRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCdpRequest {
    return new QueryCdpRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCdpRequest {
    return new QueryCdpRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCdpRequest {
    return new QueryCdpRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCdpRequest | PlainMessage<QueryCdpRequest> | undefined, b: QueryCdpRequest | PlainMessage<QueryCdpRequest> | undefined): boolean {
    return proto3.util.equals(QueryCdpRequest, a, b);
  }
}

/**
 * QueryCdpResponse defines the response type for the Query/Cdp RPC method.
 *
 * @generated from message kava.cdp.v1beta1.QueryCdpResponse
 */
export class QueryCdpResponse extends Message<QueryCdpResponse> {
  /**
   * @generated from field: kava.cdp.v1beta1.CDPResponse cdp = 1;
   */
  cdp?: CDPResponse;

  constructor(data?: PartialMessage<QueryCdpResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.QueryCdpResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cdp", kind: "message", T: CDPResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCdpResponse {
    return new QueryCdpResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCdpResponse {
    return new QueryCdpResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCdpResponse {
    return new QueryCdpResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCdpResponse | PlainMessage<QueryCdpResponse> | undefined, b: QueryCdpResponse | PlainMessage<QueryCdpResponse> | undefined): boolean {
    return proto3.util.equals(QueryCdpResponse, a, b);
  }
}

/**
 * QueryCdpsRequest is the params for a filtered CDP query, the request type for the Query/Cdps RPC method.
 *
 * @generated from message kava.cdp.v1beta1.QueryCdpsRequest
 */
export class QueryCdpsRequest extends Message<QueryCdpsRequest> {
  /**
   * @generated from field: string collateral_type = 1;
   */
  collateralType = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: uint64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * sdk.Dec as a string
   *
   * @generated from field: string ratio = 4;
   */
  ratio = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 5;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryCdpsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.QueryCdpsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCdpsRequest {
    return new QueryCdpsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCdpsRequest {
    return new QueryCdpsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCdpsRequest {
    return new QueryCdpsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCdpsRequest | PlainMessage<QueryCdpsRequest> | undefined, b: QueryCdpsRequest | PlainMessage<QueryCdpsRequest> | undefined): boolean {
    return proto3.util.equals(QueryCdpsRequest, a, b);
  }
}

/**
 * QueryCdpsResponse defines the response type for the Query/Cdps RPC method.
 *
 * @generated from message kava.cdp.v1beta1.QueryCdpsResponse
 */
export class QueryCdpsResponse extends Message<QueryCdpsResponse> {
  /**
   * @generated from field: repeated kava.cdp.v1beta1.CDPResponse cdps = 1;
   */
  cdps: CDPResponse[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryCdpsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.QueryCdpsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cdps", kind: "message", T: CDPResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCdpsResponse {
    return new QueryCdpsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCdpsResponse {
    return new QueryCdpsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCdpsResponse {
    return new QueryCdpsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCdpsResponse | PlainMessage<QueryCdpsResponse> | undefined, b: QueryCdpsResponse | PlainMessage<QueryCdpsResponse> | undefined): boolean {
    return proto3.util.equals(QueryCdpsResponse, a, b);
  }
}

/**
 * QueryDepositsRequest defines the request type for the Query/Deposits RPC method.
 *
 * @generated from message kava.cdp.v1beta1.QueryDepositsRequest
 */
export class QueryDepositsRequest extends Message<QueryDepositsRequest> {
  /**
   * @generated from field: string collateral_type = 1;
   */
  collateralType = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  constructor(data?: PartialMessage<QueryDepositsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.QueryDepositsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDepositsRequest {
    return new QueryDepositsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDepositsRequest {
    return new QueryDepositsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDepositsRequest {
    return new QueryDepositsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDepositsRequest | PlainMessage<QueryDepositsRequest> | undefined, b: QueryDepositsRequest | PlainMessage<QueryDepositsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDepositsRequest, a, b);
  }
}

/**
 * QueryDepositsResponse defines the response type for the Query/Deposits RPC method.
 *
 * @generated from message kava.cdp.v1beta1.QueryDepositsResponse
 */
export class QueryDepositsResponse extends Message<QueryDepositsResponse> {
  /**
   * @generated from field: repeated kava.cdp.v1beta1.Deposit deposits = 1;
   */
  deposits: Deposit[] = [];

  constructor(data?: PartialMessage<QueryDepositsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.QueryDepositsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deposits", kind: "message", T: Deposit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDepositsResponse {
    return new QueryDepositsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDepositsResponse {
    return new QueryDepositsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDepositsResponse {
    return new QueryDepositsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDepositsResponse | PlainMessage<QueryDepositsResponse> | undefined, b: QueryDepositsResponse | PlainMessage<QueryDepositsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDepositsResponse, a, b);
  }
}

/**
 * QueryTotalPrincipalRequest defines the request type for the Query/TotalPrincipal RPC method.
 *
 * @generated from message kava.cdp.v1beta1.QueryTotalPrincipalRequest
 */
export class QueryTotalPrincipalRequest extends Message<QueryTotalPrincipalRequest> {
  /**
   * @generated from field: string collateral_type = 1;
   */
  collateralType = "";

  constructor(data?: PartialMessage<QueryTotalPrincipalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.QueryTotalPrincipalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalPrincipalRequest {
    return new QueryTotalPrincipalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalPrincipalRequest {
    return new QueryTotalPrincipalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalPrincipalRequest {
    return new QueryTotalPrincipalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalPrincipalRequest | PlainMessage<QueryTotalPrincipalRequest> | undefined, b: QueryTotalPrincipalRequest | PlainMessage<QueryTotalPrincipalRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalPrincipalRequest, a, b);
  }
}

/**
 * QueryTotalPrincipalResponse defines the response type for the Query/TotalPrincipal RPC method.
 *
 * @generated from message kava.cdp.v1beta1.QueryTotalPrincipalResponse
 */
export class QueryTotalPrincipalResponse extends Message<QueryTotalPrincipalResponse> {
  /**
   * @generated from field: repeated kava.cdp.v1beta1.TotalPrincipal total_principal = 1;
   */
  totalPrincipal: TotalPrincipal[] = [];

  constructor(data?: PartialMessage<QueryTotalPrincipalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.QueryTotalPrincipalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_principal", kind: "message", T: TotalPrincipal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalPrincipalResponse {
    return new QueryTotalPrincipalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalPrincipalResponse {
    return new QueryTotalPrincipalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalPrincipalResponse {
    return new QueryTotalPrincipalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalPrincipalResponse | PlainMessage<QueryTotalPrincipalResponse> | undefined, b: QueryTotalPrincipalResponse | PlainMessage<QueryTotalPrincipalResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalPrincipalResponse, a, b);
  }
}

/**
 * QueryTotalCollateralRequest defines the request type for the Query/TotalCollateral RPC method.
 *
 * @generated from message kava.cdp.v1beta1.QueryTotalCollateralRequest
 */
export class QueryTotalCollateralRequest extends Message<QueryTotalCollateralRequest> {
  /**
   * @generated from field: string collateral_type = 1;
   */
  collateralType = "";

  constructor(data?: PartialMessage<QueryTotalCollateralRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.QueryTotalCollateralRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalCollateralRequest {
    return new QueryTotalCollateralRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalCollateralRequest {
    return new QueryTotalCollateralRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalCollateralRequest {
    return new QueryTotalCollateralRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalCollateralRequest | PlainMessage<QueryTotalCollateralRequest> | undefined, b: QueryTotalCollateralRequest | PlainMessage<QueryTotalCollateralRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalCollateralRequest, a, b);
  }
}

/**
 * QueryTotalCollateralResponse defines the response type for the Query/TotalCollateral RPC method.
 *
 * @generated from message kava.cdp.v1beta1.QueryTotalCollateralResponse
 */
export class QueryTotalCollateralResponse extends Message<QueryTotalCollateralResponse> {
  /**
   * @generated from field: repeated kava.cdp.v1beta1.TotalCollateral total_collateral = 1;
   */
  totalCollateral: TotalCollateral[] = [];

  constructor(data?: PartialMessage<QueryTotalCollateralResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.QueryTotalCollateralResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_collateral", kind: "message", T: TotalCollateral, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalCollateralResponse {
    return new QueryTotalCollateralResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalCollateralResponse {
    return new QueryTotalCollateralResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalCollateralResponse {
    return new QueryTotalCollateralResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalCollateralResponse | PlainMessage<QueryTotalCollateralResponse> | undefined, b: QueryTotalCollateralResponse | PlainMessage<QueryTotalCollateralResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalCollateralResponse, a, b);
  }
}

/**
 * CDPResponse defines the state of a single collateralized debt position.
 *
 * @generated from message kava.cdp.v1beta1.CDPResponse
 */
export class CDPResponse extends Message<CDPResponse> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral = 4;
   */
  collateral?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin principal = 5;
   */
  principal?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin accumulated_fees = 6;
   */
  accumulatedFees?: Coin;

  /**
   * @generated from field: google.protobuf.Timestamp fees_updated = 7;
   */
  feesUpdated?: Timestamp;

  /**
   * @generated from field: string interest_factor = 8;
   */
  interestFactor = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral_value = 9;
   */
  collateralValue?: Coin;

  /**
   * @generated from field: string collateralization_ratio = 10;
   */
  collateralizationRatio = "";

  constructor(data?: PartialMessage<CDPResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.CDPResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "collateral", kind: "message", T: Coin },
    { no: 5, name: "principal", kind: "message", T: Coin },
    { no: 6, name: "accumulated_fees", kind: "message", T: Coin },
    { no: 7, name: "fees_updated", kind: "message", T: Timestamp },
    { no: 8, name: "interest_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "collateral_value", kind: "message", T: Coin },
    { no: 10, name: "collateralization_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CDPResponse {
    return new CDPResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CDPResponse {
    return new CDPResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CDPResponse {
    return new CDPResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CDPResponse | PlainMessage<CDPResponse> | undefined, b: CDPResponse | PlainMessage<CDPResponse> | undefined): boolean {
    return proto3.util.equals(CDPResponse, a, b);
  }
}


// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/cdp/v1beta1/tx.proto (package kava.cdp.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgCreateCDP defines a message to create a new CDP.
 *
 * @generated from message kava.cdp.v1beta1.MsgCreateCDP
 */
export class MsgCreateCDP extends Message<MsgCreateCDP> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral = 2;
   */
  collateral?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin principal = 3;
   */
  principal?: Coin;

  /**
   * @generated from field: string collateral_type = 4;
   */
  collateralType = "";

  constructor(data?: PartialMessage<MsgCreateCDP>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.MsgCreateCDP";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "collateral", kind: "message", T: Coin },
    { no: 3, name: "principal", kind: "message", T: Coin },
    { no: 4, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateCDP {
    return new MsgCreateCDP().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateCDP {
    return new MsgCreateCDP().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateCDP {
    return new MsgCreateCDP().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateCDP | PlainMessage<MsgCreateCDP> | undefined, b: MsgCreateCDP | PlainMessage<MsgCreateCDP> | undefined): boolean {
    return proto3.util.equals(MsgCreateCDP, a, b);
  }
}

/**
 * MsgCreateCDPResponse defines the Msg/CreateCDP response type.
 *
 * @generated from message kava.cdp.v1beta1.MsgCreateCDPResponse
 */
export class MsgCreateCDPResponse extends Message<MsgCreateCDPResponse> {
  /**
   * @generated from field: uint64 cdp_id = 1;
   */
  cdpId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgCreateCDPResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.MsgCreateCDPResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cdp_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateCDPResponse {
    return new MsgCreateCDPResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateCDPResponse {
    return new MsgCreateCDPResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateCDPResponse {
    return new MsgCreateCDPResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateCDPResponse | PlainMessage<MsgCreateCDPResponse> | undefined, b: MsgCreateCDPResponse | PlainMessage<MsgCreateCDPResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateCDPResponse, a, b);
  }
}

/**
 * MsgDeposit defines a message to deposit to a CDP.
 *
 * @generated from message kava.cdp.v1beta1.MsgDeposit
 */
export class MsgDeposit extends Message<MsgDeposit> {
  /**
   * @generated from field: string depositor = 1;
   */
  depositor = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral = 3;
   */
  collateral?: Coin;

  /**
   * @generated from field: string collateral_type = 4;
   */
  collateralType = "";

  constructor(data?: PartialMessage<MsgDeposit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.MsgDeposit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "collateral", kind: "message", T: Coin },
    { no: 4, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeposit {
    return new MsgDeposit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeposit {
    return new MsgDeposit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeposit {
    return new MsgDeposit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeposit | PlainMessage<MsgDeposit> | undefined, b: MsgDeposit | PlainMessage<MsgDeposit> | undefined): boolean {
    return proto3.util.equals(MsgDeposit, a, b);
  }
}

/**
 * MsgDepositResponse defines the Msg/Deposit response type.
 *
 * @generated from message kava.cdp.v1beta1.MsgDepositResponse
 */
export class MsgDepositResponse extends Message<MsgDepositResponse> {
  constructor(data?: PartialMessage<MsgDepositResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.MsgDepositResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDepositResponse | PlainMessage<MsgDepositResponse> | undefined, b: MsgDepositResponse | PlainMessage<MsgDepositResponse> | undefined): boolean {
    return proto3.util.equals(MsgDepositResponse, a, b);
  }
}

/**
 * MsgWithdraw defines a message to withdraw collateral from a CDP.
 *
 * @generated from message kava.cdp.v1beta1.MsgWithdraw
 */
export class MsgWithdraw extends Message<MsgWithdraw> {
  /**
   * @generated from field: string depositor = 1;
   */
  depositor = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral = 3;
   */
  collateral?: Coin;

  /**
   * @generated from field: string collateral_type = 4;
   */
  collateralType = "";

  constructor(data?: PartialMessage<MsgWithdraw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.MsgWithdraw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "collateral", kind: "message", T: Coin },
    { no: 4, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdraw | PlainMessage<MsgWithdraw> | undefined, b: MsgWithdraw | PlainMessage<MsgWithdraw> | undefined): boolean {
    return proto3.util.equals(MsgWithdraw, a, b);
  }
}

/**
 * MsgWithdrawResponse defines the Msg/Withdraw response type.
 *
 * @generated from message kava.cdp.v1beta1.MsgWithdrawResponse
 */
export class MsgWithdrawResponse extends Message<MsgWithdrawResponse> {
  constructor(data?: PartialMessage<MsgWithdrawResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.MsgWithdrawResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawResponse | PlainMessage<MsgWithdrawResponse> | undefined, b: MsgWithdrawResponse | PlainMessage<MsgWithdrawResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawResponse, a, b);
  }
}

/**
 * MsgDrawDebt defines a message to draw debt from a CDP.
 *
 * @generated from message kava.cdp.v1beta1.MsgDrawDebt
 */
export class MsgDrawDebt extends Message<MsgDrawDebt> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string collateral_type = 2;
   */
  collateralType = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin principal = 3;
   */
  principal?: Coin;

  constructor(data?: PartialMessage<MsgDrawDebt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.MsgDrawDebt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "principal", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDrawDebt {
    return new MsgDrawDebt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDrawDebt {
    return new MsgDrawDebt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDrawDebt {
    return new MsgDrawDebt().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDrawDebt | PlainMessage<MsgDrawDebt> | undefined, b: MsgDrawDebt | PlainMessage<MsgDrawDebt> | undefined): boolean {
    return proto3.util.equals(MsgDrawDebt, a, b);
  }
}

/**
 * MsgDrawDebtResponse defines the Msg/DrawDebt response type.
 *
 * @generated from message kava.cdp.v1beta1.MsgDrawDebtResponse
 */
export class MsgDrawDebtResponse extends Message<MsgDrawDebtResponse> {
  constructor(data?: PartialMessage<MsgDrawDebtResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.MsgDrawDebtResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDrawDebtResponse {
    return new MsgDrawDebtResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDrawDebtResponse {
    return new MsgDrawDebtResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDrawDebtResponse {
    return new MsgDrawDebtResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDrawDebtResponse | PlainMessage<MsgDrawDebtResponse> | undefined, b: MsgDrawDebtResponse | PlainMessage<MsgDrawDebtResponse> | undefined): boolean {
    return proto3.util.equals(MsgDrawDebtResponse, a, b);
  }
}

/**
 * MsgRepayDebt defines a message to repay debt from a CDP.
 *
 * @generated from message kava.cdp.v1beta1.MsgRepayDebt
 */
export class MsgRepayDebt extends Message<MsgRepayDebt> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string collateral_type = 2;
   */
  collateralType = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin payment = 3;
   */
  payment?: Coin;

  constructor(data?: PartialMessage<MsgRepayDebt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.MsgRepayDebt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "payment", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRepayDebt {
    return new MsgRepayDebt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRepayDebt {
    return new MsgRepayDebt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRepayDebt {
    return new MsgRepayDebt().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRepayDebt | PlainMessage<MsgRepayDebt> | undefined, b: MsgRepayDebt | PlainMessage<MsgRepayDebt> | undefined): boolean {
    return proto3.util.equals(MsgRepayDebt, a, b);
  }
}

/**
 * MsgRepayDebtResponse defines the Msg/RepayDebt response type.
 *
 * @generated from message kava.cdp.v1beta1.MsgRepayDebtResponse
 */
export class MsgRepayDebtResponse extends Message<MsgRepayDebtResponse> {
  constructor(data?: PartialMessage<MsgRepayDebtResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.MsgRepayDebtResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRepayDebtResponse {
    return new MsgRepayDebtResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRepayDebtResponse {
    return new MsgRepayDebtResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRepayDebtResponse {
    return new MsgRepayDebtResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRepayDebtResponse | PlainMessage<MsgRepayDebtResponse> | undefined, b: MsgRepayDebtResponse | PlainMessage<MsgRepayDebtResponse> | undefined): boolean {
    return proto3.util.equals(MsgRepayDebtResponse, a, b);
  }
}

/**
 * MsgLiquidate defines a message to attempt to liquidate a CDP whos
 * collateralization ratio is under its liquidation ratio.
 *
 * @generated from message kava.cdp.v1beta1.MsgLiquidate
 */
export class MsgLiquidate extends Message<MsgLiquidate> {
  /**
   * @generated from field: string keeper = 1;
   */
  keeper = "";

  /**
   * @generated from field: string borrower = 2;
   */
  borrower = "";

  /**
   * @generated from field: string collateral_type = 3;
   */
  collateralType = "";

  constructor(data?: PartialMessage<MsgLiquidate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.MsgLiquidate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keeper", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "borrower", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLiquidate {
    return new MsgLiquidate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLiquidate {
    return new MsgLiquidate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLiquidate {
    return new MsgLiquidate().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLiquidate | PlainMessage<MsgLiquidate> | undefined, b: MsgLiquidate | PlainMessage<MsgLiquidate> | undefined): boolean {
    return proto3.util.equals(MsgLiquidate, a, b);
  }
}

/**
 * MsgLiquidateResponse defines the Msg/Liquidate response type.
 *
 * @generated from message kava.cdp.v1beta1.MsgLiquidateResponse
 */
export class MsgLiquidateResponse extends Message<MsgLiquidateResponse> {
  constructor(data?: PartialMessage<MsgLiquidateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.cdp.v1beta1.MsgLiquidateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLiquidateResponse {
    return new MsgLiquidateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLiquidateResponse {
    return new MsgLiquidateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLiquidateResponse {
    return new MsgLiquidateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLiquidateResponse | PlainMessage<MsgLiquidateResponse> | undefined, b: MsgLiquidateResponse | PlainMessage<MsgLiquidateResponse> | undefined): boolean {
    return proto3.util.equals(MsgLiquidateResponse, a, b);
  }
}


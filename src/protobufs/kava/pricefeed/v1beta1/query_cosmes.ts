// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file kava/pricefeed/v1beta1/query.proto (package kava.pricefeed.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryMarketsRequest, QueryMarketsResponse, QueryOraclesRequest, QueryOraclesResponse, QueryParamsRequest, QueryParamsResponse, QueryPriceRequest, QueryPriceResponse, QueryPricesRequest, QueryPricesResponse, QueryRawPricesRequest, QueryRawPricesResponse } from "./query_pb.js";

const TYPE_NAME = "kava.pricefeed.v1beta1.Query";

/**
 * Params queries all parameters of the pricefeed module.
 *
 * @generated from rpc kava.pricefeed.v1beta1.Query.Params
 */
export const QueryParamsService = {
  typeName: TYPE_NAME,
  method: "Params",
  Request: QueryParamsRequest,
  Response: QueryParamsResponse,
} as const;

/**
 * Price queries price details based on a market
 *
 * @generated from rpc kava.pricefeed.v1beta1.Query.Price
 */
export const QueryPriceService = {
  typeName: TYPE_NAME,
  method: "Price",
  Request: QueryPriceRequest,
  Response: QueryPriceResponse,
} as const;

/**
 * Prices queries all prices
 *
 * @generated from rpc kava.pricefeed.v1beta1.Query.Prices
 */
export const QueryPricesService = {
  typeName: TYPE_NAME,
  method: "Prices",
  Request: QueryPricesRequest,
  Response: QueryPricesResponse,
} as const;

/**
 * RawPrices queries all raw prices based on a market
 *
 * @generated from rpc kava.pricefeed.v1beta1.Query.RawPrices
 */
export const QueryRawPricesService = {
  typeName: TYPE_NAME,
  method: "RawPrices",
  Request: QueryRawPricesRequest,
  Response: QueryRawPricesResponse,
} as const;

/**
 * Oracles queries all oracles based on a market
 *
 * @generated from rpc kava.pricefeed.v1beta1.Query.Oracles
 */
export const QueryOraclesService = {
  typeName: TYPE_NAME,
  method: "Oracles",
  Request: QueryOraclesRequest,
  Response: QueryOraclesResponse,
} as const;

/**
 * Markets queries all markets
 *
 * @generated from rpc kava.pricefeed.v1beta1.Query.Markets
 */
export const QueryMarketsService = {
  typeName: TYPE_NAME,
  method: "Markets",
  Request: QueryMarketsRequest,
  Response: QueryMarketsResponse,
} as const;


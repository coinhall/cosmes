// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/liquid/v1beta1/query.proto (package kava.liquid.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * QueryDelegatedBalanceRequest defines the request type for Query/DelegatedBalance method.
 *
 * @generated from message kava.liquid.v1beta1.QueryDelegatedBalanceRequest
 */
export class QueryDelegatedBalanceRequest extends Message<QueryDelegatedBalanceRequest> {
  /**
   * delegator is the address of the account to query
   *
   * @generated from field: string delegator = 1;
   */
  delegator = "";

  constructor(data?: PartialMessage<QueryDelegatedBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.liquid.v1beta1.QueryDelegatedBalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "delegator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatedBalanceRequest {
    return new QueryDelegatedBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatedBalanceRequest {
    return new QueryDelegatedBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatedBalanceRequest {
    return new QueryDelegatedBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatedBalanceRequest | PlainMessage<QueryDelegatedBalanceRequest> | undefined, b: QueryDelegatedBalanceRequest | PlainMessage<QueryDelegatedBalanceRequest> | undefined): boolean {
    return proto3.util.equals(QueryDelegatedBalanceRequest, a, b);
  }
}

/**
 * DelegatedBalanceResponse defines the response type for the Query/DelegatedBalance method.
 *
 * @generated from message kava.liquid.v1beta1.QueryDelegatedBalanceResponse
 */
export class QueryDelegatedBalanceResponse extends Message<QueryDelegatedBalanceResponse> {
  /**
   * vested is the amount of all delegated coins that have vested (ie not locked)
   *
   * @generated from field: cosmos.base.v1beta1.Coin vested = 1;
   */
  vested?: Coin;

  /**
   * vesting is the amount of all delegated coins that are still vesting (ie locked)
   *
   * @generated from field: cosmos.base.v1beta1.Coin vesting = 2;
   */
  vesting?: Coin;

  constructor(data?: PartialMessage<QueryDelegatedBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.liquid.v1beta1.QueryDelegatedBalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vested", kind: "message", T: Coin },
    { no: 2, name: "vesting", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDelegatedBalanceResponse {
    return new QueryDelegatedBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDelegatedBalanceResponse {
    return new QueryDelegatedBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDelegatedBalanceResponse {
    return new QueryDelegatedBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDelegatedBalanceResponse | PlainMessage<QueryDelegatedBalanceResponse> | undefined, b: QueryDelegatedBalanceResponse | PlainMessage<QueryDelegatedBalanceResponse> | undefined): boolean {
    return proto3.util.equals(QueryDelegatedBalanceResponse, a, b);
  }
}

/**
 * QueryTotalSupplyRequest defines the request type for Query/TotalSupply method.
 *
 * @generated from message kava.liquid.v1beta1.QueryTotalSupplyRequest
 */
export class QueryTotalSupplyRequest extends Message<QueryTotalSupplyRequest> {
  constructor(data?: PartialMessage<QueryTotalSupplyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.liquid.v1beta1.QueryTotalSupplyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalSupplyRequest {
    return new QueryTotalSupplyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalSupplyRequest {
    return new QueryTotalSupplyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalSupplyRequest {
    return new QueryTotalSupplyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalSupplyRequest | PlainMessage<QueryTotalSupplyRequest> | undefined, b: QueryTotalSupplyRequest | PlainMessage<QueryTotalSupplyRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalSupplyRequest, a, b);
  }
}

/**
 * TotalSupplyResponse defines the response type for the Query/TotalSupply method.
 *
 * @generated from message kava.liquid.v1beta1.QueryTotalSupplyResponse
 */
export class QueryTotalSupplyResponse extends Message<QueryTotalSupplyResponse> {
  /**
   * Height is the block height at which these totals apply
   *
   * @generated from field: int64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * Result is a list of coins supplied to liquid
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin result = 2;
   */
  result: Coin[] = [];

  constructor(data?: PartialMessage<QueryTotalSupplyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.liquid.v1beta1.QueryTotalSupplyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "result", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalSupplyResponse {
    return new QueryTotalSupplyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalSupplyResponse {
    return new QueryTotalSupplyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalSupplyResponse {
    return new QueryTotalSupplyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalSupplyResponse | PlainMessage<QueryTotalSupplyResponse> | undefined, b: QueryTotalSupplyResponse | PlainMessage<QueryTotalSupplyResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalSupplyResponse, a, b);
  }
}


// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/liquid/v1beta1/tx.proto (package kava.liquid.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgMintDerivative defines the Msg/MintDerivative request type.
 *
 * @generated from message kava.liquid.v1beta1.MsgMintDerivative
 */
export class MsgMintDerivative extends Message<MsgMintDerivative> {
  /**
   * sender is the owner of the delegation to be converted
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * validator is the validator of the delegation to be converted
   *
   * @generated from field: string validator = 2;
   */
  validator = "";

  /**
   * amount is the quantity of staked assets to be converted
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgMintDerivative>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.liquid.v1beta1.MsgMintDerivative";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMintDerivative {
    return new MsgMintDerivative().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMintDerivative {
    return new MsgMintDerivative().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMintDerivative {
    return new MsgMintDerivative().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMintDerivative | PlainMessage<MsgMintDerivative> | undefined, b: MsgMintDerivative | PlainMessage<MsgMintDerivative> | undefined): boolean {
    return proto3.util.equals(MsgMintDerivative, a, b);
  }
}

/**
 * MsgMintDerivativeResponse defines the Msg/MintDerivative response type.
 *
 * @generated from message kava.liquid.v1beta1.MsgMintDerivativeResponse
 */
export class MsgMintDerivativeResponse extends Message<MsgMintDerivativeResponse> {
  /**
   * received is the amount of staking derivative minted and sent to the sender
   *
   * @generated from field: cosmos.base.v1beta1.Coin received = 1;
   */
  received?: Coin;

  constructor(data?: PartialMessage<MsgMintDerivativeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.liquid.v1beta1.MsgMintDerivativeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "received", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgMintDerivativeResponse {
    return new MsgMintDerivativeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgMintDerivativeResponse {
    return new MsgMintDerivativeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgMintDerivativeResponse {
    return new MsgMintDerivativeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgMintDerivativeResponse | PlainMessage<MsgMintDerivativeResponse> | undefined, b: MsgMintDerivativeResponse | PlainMessage<MsgMintDerivativeResponse> | undefined): boolean {
    return proto3.util.equals(MsgMintDerivativeResponse, a, b);
  }
}

/**
 * MsgBurnDerivative defines the Msg/BurnDerivative request type.
 *
 * @generated from message kava.liquid.v1beta1.MsgBurnDerivative
 */
export class MsgBurnDerivative extends Message<MsgBurnDerivative> {
  /**
   * sender is the owner of the derivatives to be converted
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * validator is the validator of the derivatives to be converted
   *
   * @generated from field: string validator = 2;
   */
  validator = "";

  /**
   * amount is the quantity of derivatives to be converted
   *
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgBurnDerivative>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.liquid.v1beta1.MsgBurnDerivative";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBurnDerivative {
    return new MsgBurnDerivative().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBurnDerivative {
    return new MsgBurnDerivative().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBurnDerivative {
    return new MsgBurnDerivative().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBurnDerivative | PlainMessage<MsgBurnDerivative> | undefined, b: MsgBurnDerivative | PlainMessage<MsgBurnDerivative> | undefined): boolean {
    return proto3.util.equals(MsgBurnDerivative, a, b);
  }
}

/**
 * MsgBurnDerivativeResponse defines the Msg/BurnDerivative response type.
 *
 * @generated from message kava.liquid.v1beta1.MsgBurnDerivativeResponse
 */
export class MsgBurnDerivativeResponse extends Message<MsgBurnDerivativeResponse> {
  /**
   * received is the number of delegation shares sent to the sender
   *
   * @generated from field: string received = 1;
   */
  received = "";

  constructor(data?: PartialMessage<MsgBurnDerivativeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.liquid.v1beta1.MsgBurnDerivativeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "received", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBurnDerivativeResponse {
    return new MsgBurnDerivativeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBurnDerivativeResponse {
    return new MsgBurnDerivativeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBurnDerivativeResponse {
    return new MsgBurnDerivativeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBurnDerivativeResponse | PlainMessage<MsgBurnDerivativeResponse> | undefined, b: MsgBurnDerivativeResponse | PlainMessage<MsgBurnDerivativeResponse> | undefined): boolean {
    return proto3.util.equals(MsgBurnDerivativeResponse, a, b);
  }
}


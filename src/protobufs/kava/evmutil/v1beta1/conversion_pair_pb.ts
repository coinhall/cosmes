// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/evmutil/v1beta1/conversion_pair.proto (package kava.evmutil.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * ConversionPair defines a Kava ERC20 address and corresponding denom that is
 * allowed to be converted between ERC20 and sdk.Coin
 *
 * @generated from message kava.evmutil.v1beta1.ConversionPair
 */
export class ConversionPair extends Message<ConversionPair> {
  /**
   * ERC20 address of the token on the Kava EVM
   *
   * @generated from field: bytes kava_erc20_address = 1;
   */
  kavaErc20Address = new Uint8Array(0);

  /**
   * Denom of the corresponding sdk.Coin
   *
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<ConversionPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.evmutil.v1beta1.ConversionPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kava_erc20_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversionPair {
    return new ConversionPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversionPair {
    return new ConversionPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversionPair {
    return new ConversionPair().fromJsonString(jsonString, options);
  }

  static equals(a: ConversionPair | PlainMessage<ConversionPair> | undefined, b: ConversionPair | PlainMessage<ConversionPair> | undefined): boolean {
    return proto3.util.equals(ConversionPair, a, b);
  }
}

/**
 * AllowedCosmosCoinERC20Token defines allowed cosmos-sdk denom & metadata
 * for evm token representations of sdk assets.
 * NOTE: once evm token contracts are deployed, changes to metadata for a given
 * cosmos_denom will not change metadata of deployed contract.
 *
 * @generated from message kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token
 */
export class AllowedCosmosCoinERC20Token extends Message<AllowedCosmosCoinERC20Token> {
  /**
   * Denom of the sdk.Coin
   *
   * @generated from field: string cosmos_denom = 1;
   */
  cosmosDenom = "";

  /**
   * Name of ERC20 contract
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Symbol of ERC20 contract
   *
   * @generated from field: string symbol = 3;
   */
  symbol = "";

  /**
   * Number of decimals ERC20 contract is deployed with.
   *
   * @generated from field: uint32 decimals = 4;
   */
  decimals = 0;

  constructor(data?: PartialMessage<AllowedCosmosCoinERC20Token>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cosmos_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "decimals", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllowedCosmosCoinERC20Token {
    return new AllowedCosmosCoinERC20Token().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllowedCosmosCoinERC20Token {
    return new AllowedCosmosCoinERC20Token().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllowedCosmosCoinERC20Token {
    return new AllowedCosmosCoinERC20Token().fromJsonString(jsonString, options);
  }

  static equals(a: AllowedCosmosCoinERC20Token | PlainMessage<AllowedCosmosCoinERC20Token> | undefined, b: AllowedCosmosCoinERC20Token | PlainMessage<AllowedCosmosCoinERC20Token> | undefined): boolean {
    return proto3.util.equals(AllowedCosmosCoinERC20Token, a, b);
  }
}


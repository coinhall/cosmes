// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/evmutil/v1beta1/query.proto (package kava.evmutil.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./genesis_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * QueryParamsRequest defines the request type for querying x/evmutil parameters.
 *
 * @generated from message kava.evmutil.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.evmutil.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse defines the response type for querying x/evmutil parameters.
 *
 * @generated from message kava.evmutil.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: kava.evmutil.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.evmutil.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryDeployedCosmosCoinContractsRequest defines the request type for Query/DeployedCosmosCoinContracts method.
 *
 * @generated from message kava.evmutil.v1beta1.QueryDeployedCosmosCoinContractsRequest
 */
export class QueryDeployedCosmosCoinContractsRequest extends Message<QueryDeployedCosmosCoinContractsRequest> {
  /**
   * optional query param to only return specific denoms in the list
   * denoms that do not have deployed contracts will be omitted from the result
   * must request fewer than 100 denoms at a time.
   *
   * @generated from field: repeated string cosmos_denoms = 1;
   */
  cosmosDenoms: string[] = [];

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDeployedCosmosCoinContractsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.evmutil.v1beta1.QueryDeployedCosmosCoinContractsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cosmos_denoms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDeployedCosmosCoinContractsRequest {
    return new QueryDeployedCosmosCoinContractsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDeployedCosmosCoinContractsRequest {
    return new QueryDeployedCosmosCoinContractsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDeployedCosmosCoinContractsRequest {
    return new QueryDeployedCosmosCoinContractsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDeployedCosmosCoinContractsRequest | PlainMessage<QueryDeployedCosmosCoinContractsRequest> | undefined, b: QueryDeployedCosmosCoinContractsRequest | PlainMessage<QueryDeployedCosmosCoinContractsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDeployedCosmosCoinContractsRequest, a, b);
  }
}

/**
 * QueryDeployedCosmosCoinContractsResponse defines the response type for the Query/DeployedCosmosCoinContracts method.
 *
 * @generated from message kava.evmutil.v1beta1.QueryDeployedCosmosCoinContractsResponse
 */
export class QueryDeployedCosmosCoinContractsResponse extends Message<QueryDeployedCosmosCoinContractsResponse> {
  /**
   * deployed_cosmos_coin_contracts is a list of cosmos-sdk coin denom and its deployed contract address
   *
   * @generated from field: repeated kava.evmutil.v1beta1.DeployedCosmosCoinContract deployed_cosmos_coin_contracts = 1;
   */
  deployedCosmosCoinContracts: DeployedCosmosCoinContract[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDeployedCosmosCoinContractsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.evmutil.v1beta1.QueryDeployedCosmosCoinContractsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployed_cosmos_coin_contracts", kind: "message", T: DeployedCosmosCoinContract, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDeployedCosmosCoinContractsResponse {
    return new QueryDeployedCosmosCoinContractsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDeployedCosmosCoinContractsResponse {
    return new QueryDeployedCosmosCoinContractsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDeployedCosmosCoinContractsResponse {
    return new QueryDeployedCosmosCoinContractsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDeployedCosmosCoinContractsResponse | PlainMessage<QueryDeployedCosmosCoinContractsResponse> | undefined, b: QueryDeployedCosmosCoinContractsResponse | PlainMessage<QueryDeployedCosmosCoinContractsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDeployedCosmosCoinContractsResponse, a, b);
  }
}

/**
 * DeployedCosmosCoinContract defines a deployed token contract to the evm representing a native cosmos-sdk coin
 *
 * @generated from message kava.evmutil.v1beta1.DeployedCosmosCoinContract
 */
export class DeployedCosmosCoinContract extends Message<DeployedCosmosCoinContract> {
  /**
   * @generated from field: string cosmos_denom = 1;
   */
  cosmosDenom = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  constructor(data?: PartialMessage<DeployedCosmosCoinContract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.evmutil.v1beta1.DeployedCosmosCoinContract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cosmos_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployedCosmosCoinContract {
    return new DeployedCosmosCoinContract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployedCosmosCoinContract {
    return new DeployedCosmosCoinContract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployedCosmosCoinContract {
    return new DeployedCosmosCoinContract().fromJsonString(jsonString, options);
  }

  static equals(a: DeployedCosmosCoinContract | PlainMessage<DeployedCosmosCoinContract> | undefined, b: DeployedCosmosCoinContract | PlainMessage<DeployedCosmosCoinContract> | undefined): boolean {
    return proto3.util.equals(DeployedCosmosCoinContract, a, b);
  }
}


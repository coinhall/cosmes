// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/evmutil/v1beta1/genesis.proto (package kava.evmutil.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { AllowedCosmosCoinERC20Token, ConversionPair } from "./conversion_pair_pb.js";

/**
 * GenesisState defines the evmutil module's genesis state.
 *
 * @generated from message kava.evmutil.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: repeated kava.evmutil.v1beta1.Account accounts = 1;
   */
  accounts: Account[] = [];

  /**
   * params defines all the parameters of the module.
   *
   * @generated from field: kava.evmutil.v1beta1.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.evmutil.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: Account, repeated: true },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * BalanceAccount defines an account in the evmutil module.
 *
 * @generated from message kava.evmutil.v1beta1.Account
 */
export class Account extends Message<Account> {
  /**
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  /**
   * balance indicates the amount of akava owned by the address.
   *
   * @generated from field: string balance = 2;
   */
  balance = "";

  constructor(data?: PartialMessage<Account>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.evmutil.v1beta1.Account";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Account {
    return new Account().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Account {
    return new Account().fromJsonString(jsonString, options);
  }

  static equals(a: Account | PlainMessage<Account> | undefined, b: Account | PlainMessage<Account> | undefined): boolean {
    return proto3.util.equals(Account, a, b);
  }
}

/**
 * Params defines the evmutil module params
 *
 * @generated from message kava.evmutil.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * enabled_conversion_pairs defines the list of conversion pairs allowed to be
   * converted between Kava ERC20 and sdk.Coin
   *
   * @generated from field: repeated kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4;
   */
  enabledConversionPairs: ConversionPair[] = [];

  /**
   * allowed_cosmos_denoms is a list of denom & erc20 token metadata pairs.
   * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
   *
   * @generated from field: repeated kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1;
   */
  allowedCosmosDenoms: AllowedCosmosCoinERC20Token[] = [];

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.evmutil.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "enabled_conversion_pairs", kind: "message", T: ConversionPair, repeated: true },
    { no: 1, name: "allowed_cosmos_denoms", kind: "message", T: AllowedCosmosCoinERC20Token, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}


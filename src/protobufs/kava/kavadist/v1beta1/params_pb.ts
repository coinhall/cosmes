// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/kavadist/v1beta1/params.proto (package kava.kavadist.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Params governance parameters for kavadist module
 *
 * @generated from message kava.kavadist.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: bool active = 1;
   */
  active = false;

  /**
   * @generated from field: repeated kava.kavadist.v1beta1.Period periods = 3;
   */
  periods: Period[] = [];

  /**
   * @generated from field: kava.kavadist.v1beta1.InfrastructureParams infrastructure_params = 4;
   */
  infrastructureParams?: InfrastructureParams;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.kavadist.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "periods", kind: "message", T: Period, repeated: true },
    { no: 4, name: "infrastructure_params", kind: "message", T: InfrastructureParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * InfrastructureParams define the parameters for infrastructure rewards.
 *
 * @generated from message kava.kavadist.v1beta1.InfrastructureParams
 */
export class InfrastructureParams extends Message<InfrastructureParams> {
  /**
   * @generated from field: repeated kava.kavadist.v1beta1.Period infrastructure_periods = 1;
   */
  infrastructurePeriods: Period[] = [];

  /**
   * @generated from field: repeated kava.kavadist.v1beta1.CoreReward core_rewards = 2;
   */
  coreRewards: CoreReward[] = [];

  /**
   * @generated from field: repeated kava.kavadist.v1beta1.PartnerReward partner_rewards = 3;
   */
  partnerRewards: PartnerReward[] = [];

  constructor(data?: PartialMessage<InfrastructureParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.kavadist.v1beta1.InfrastructureParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "infrastructure_periods", kind: "message", T: Period, repeated: true },
    { no: 2, name: "core_rewards", kind: "message", T: CoreReward, repeated: true },
    { no: 3, name: "partner_rewards", kind: "message", T: PartnerReward, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InfrastructureParams {
    return new InfrastructureParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InfrastructureParams {
    return new InfrastructureParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InfrastructureParams {
    return new InfrastructureParams().fromJsonString(jsonString, options);
  }

  static equals(a: InfrastructureParams | PlainMessage<InfrastructureParams> | undefined, b: InfrastructureParams | PlainMessage<InfrastructureParams> | undefined): boolean {
    return proto3.util.equals(InfrastructureParams, a, b);
  }
}

/**
 * CoreReward defines the reward weights for core infrastructure providers.
 *
 * @generated from message kava.kavadist.v1beta1.CoreReward
 */
export class CoreReward extends Message<CoreReward> {
  /**
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  /**
   * @generated from field: string weight = 2;
   */
  weight = "";

  constructor(data?: PartialMessage<CoreReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.kavadist.v1beta1.CoreReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoreReward {
    return new CoreReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoreReward {
    return new CoreReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoreReward {
    return new CoreReward().fromJsonString(jsonString, options);
  }

  static equals(a: CoreReward | PlainMessage<CoreReward> | undefined, b: CoreReward | PlainMessage<CoreReward> | undefined): boolean {
    return proto3.util.equals(CoreReward, a, b);
  }
}

/**
 * PartnerRewards defines the reward schedule for partner infrastructure providers.
 *
 * @generated from message kava.kavadist.v1beta1.PartnerReward
 */
export class PartnerReward extends Message<PartnerReward> {
  /**
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  /**
   * @generated from field: cosmos.base.v1beta1.Coin rewards_per_second = 2;
   */
  rewardsPerSecond?: Coin;

  constructor(data?: PartialMessage<PartnerReward>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.kavadist.v1beta1.PartnerReward";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "rewards_per_second", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PartnerReward {
    return new PartnerReward().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PartnerReward {
    return new PartnerReward().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PartnerReward {
    return new PartnerReward().fromJsonString(jsonString, options);
  }

  static equals(a: PartnerReward | PlainMessage<PartnerReward> | undefined, b: PartnerReward | PlainMessage<PartnerReward> | undefined): boolean {
    return proto3.util.equals(PartnerReward, a, b);
  }
}

/**
 * Period stores the specified start and end dates, and the inflation, expressed as a decimal
 * representing the yearly APR of KAVA tokens that will be minted during that period
 *
 * @generated from message kava.kavadist.v1beta1.Period
 */
export class Period extends Message<Period> {
  /**
   * example "2020-03-01T15:20:00Z"
   *
   * @generated from field: google.protobuf.Timestamp start = 1;
   */
  start?: Timestamp;

  /**
   * example "2020-06-01T15:20:00Z"
   *
   * @generated from field: google.protobuf.Timestamp end = 2;
   */
  end?: Timestamp;

  /**
   * example "1.000000003022265980"  - 10% inflation
   *
   * @generated from field: bytes inflation = 3;
   */
  inflation = new Uint8Array(0);

  constructor(data?: PartialMessage<Period>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.kavadist.v1beta1.Period";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: Timestamp },
    { no: 2, name: "end", kind: "message", T: Timestamp },
    { no: 3, name: "inflation", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Period {
    return new Period().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Period {
    return new Period().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Period {
    return new Period().fromJsonString(jsonString, options);
  }

  static equals(a: Period | PlainMessage<Period> | undefined, b: Period | PlainMessage<Period> | undefined): boolean {
    return proto3.util.equals(Period, a, b);
  }
}


// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/committee/v1beta1/query.proto (package kava.committee.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { VoteType } from "./genesis_pb.js";

/**
 * QueryCommitteesRequest defines the request type for querying x/committee committees.
 *
 * @generated from message kava.committee.v1beta1.QueryCommitteesRequest
 */
export class QueryCommitteesRequest extends Message<QueryCommitteesRequest> {
  constructor(data?: PartialMessage<QueryCommitteesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryCommitteesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCommitteesRequest {
    return new QueryCommitteesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCommitteesRequest {
    return new QueryCommitteesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCommitteesRequest {
    return new QueryCommitteesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCommitteesRequest | PlainMessage<QueryCommitteesRequest> | undefined, b: QueryCommitteesRequest | PlainMessage<QueryCommitteesRequest> | undefined): boolean {
    return proto3.util.equals(QueryCommitteesRequest, a, b);
  }
}

/**
 * QueryCommitteesResponse defines the response type for querying x/committee committees.
 *
 * @generated from message kava.committee.v1beta1.QueryCommitteesResponse
 */
export class QueryCommitteesResponse extends Message<QueryCommitteesResponse> {
  /**
   * @generated from field: repeated google.protobuf.Any committees = 1;
   */
  committees: Any[] = [];

  constructor(data?: PartialMessage<QueryCommitteesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryCommitteesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "committees", kind: "message", T: Any, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCommitteesResponse {
    return new QueryCommitteesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCommitteesResponse {
    return new QueryCommitteesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCommitteesResponse {
    return new QueryCommitteesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCommitteesResponse | PlainMessage<QueryCommitteesResponse> | undefined, b: QueryCommitteesResponse | PlainMessage<QueryCommitteesResponse> | undefined): boolean {
    return proto3.util.equals(QueryCommitteesResponse, a, b);
  }
}

/**
 * QueryCommitteeRequest defines the request type for querying x/committee committee.
 *
 * @generated from message kava.committee.v1beta1.QueryCommitteeRequest
 */
export class QueryCommitteeRequest extends Message<QueryCommitteeRequest> {
  /**
   * @generated from field: uint64 committee_id = 1;
   */
  committeeId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryCommitteeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryCommitteeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "committee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCommitteeRequest {
    return new QueryCommitteeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCommitteeRequest {
    return new QueryCommitteeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCommitteeRequest {
    return new QueryCommitteeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCommitteeRequest | PlainMessage<QueryCommitteeRequest> | undefined, b: QueryCommitteeRequest | PlainMessage<QueryCommitteeRequest> | undefined): boolean {
    return proto3.util.equals(QueryCommitteeRequest, a, b);
  }
}

/**
 * QueryCommitteeResponse defines the response type for querying x/committee committee.
 *
 * @generated from message kava.committee.v1beta1.QueryCommitteeResponse
 */
export class QueryCommitteeResponse extends Message<QueryCommitteeResponse> {
  /**
   * @generated from field: google.protobuf.Any committee = 1;
   */
  committee?: Any;

  constructor(data?: PartialMessage<QueryCommitteeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryCommitteeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "committee", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCommitteeResponse {
    return new QueryCommitteeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCommitteeResponse {
    return new QueryCommitteeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCommitteeResponse {
    return new QueryCommitteeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCommitteeResponse | PlainMessage<QueryCommitteeResponse> | undefined, b: QueryCommitteeResponse | PlainMessage<QueryCommitteeResponse> | undefined): boolean {
    return proto3.util.equals(QueryCommitteeResponse, a, b);
  }
}

/**
 * QueryProposalsRequest defines the request type for querying x/committee proposals.
 *
 * @generated from message kava.committee.v1beta1.QueryProposalsRequest
 */
export class QueryProposalsRequest extends Message<QueryProposalsRequest> {
  /**
   * @generated from field: uint64 committee_id = 1;
   */
  committeeId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryProposalsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryProposalsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "committee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProposalsRequest {
    return new QueryProposalsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProposalsRequest {
    return new QueryProposalsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProposalsRequest {
    return new QueryProposalsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProposalsRequest | PlainMessage<QueryProposalsRequest> | undefined, b: QueryProposalsRequest | PlainMessage<QueryProposalsRequest> | undefined): boolean {
    return proto3.util.equals(QueryProposalsRequest, a, b);
  }
}

/**
 * QueryProposalsResponse defines the response type for querying x/committee proposals.
 *
 * @generated from message kava.committee.v1beta1.QueryProposalsResponse
 */
export class QueryProposalsResponse extends Message<QueryProposalsResponse> {
  /**
   * @generated from field: repeated kava.committee.v1beta1.QueryProposalResponse proposals = 1;
   */
  proposals: QueryProposalResponse[] = [];

  constructor(data?: PartialMessage<QueryProposalsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryProposalsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposals", kind: "message", T: QueryProposalResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProposalsResponse {
    return new QueryProposalsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProposalsResponse {
    return new QueryProposalsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProposalsResponse {
    return new QueryProposalsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProposalsResponse | PlainMessage<QueryProposalsResponse> | undefined, b: QueryProposalsResponse | PlainMessage<QueryProposalsResponse> | undefined): boolean {
    return proto3.util.equals(QueryProposalsResponse, a, b);
  }
}

/**
 * QueryProposalRequest defines the request type for querying x/committee proposal.
 *
 * @generated from message kava.committee.v1beta1.QueryProposalRequest
 */
export class QueryProposalRequest extends Message<QueryProposalRequest> {
  /**
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryProposalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryProposalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProposalRequest {
    return new QueryProposalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProposalRequest {
    return new QueryProposalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProposalRequest {
    return new QueryProposalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProposalRequest | PlainMessage<QueryProposalRequest> | undefined, b: QueryProposalRequest | PlainMessage<QueryProposalRequest> | undefined): boolean {
    return proto3.util.equals(QueryProposalRequest, a, b);
  }
}

/**
 * QueryProposalResponse defines the response type for querying x/committee proposal.
 *
 * @generated from message kava.committee.v1beta1.QueryProposalResponse
 */
export class QueryProposalResponse extends Message<QueryProposalResponse> {
  /**
   * @generated from field: google.protobuf.Any pub_proposal = 1;
   */
  pubProposal?: Any;

  /**
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: uint64 committee_id = 3;
   */
  committeeId = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp deadline = 4;
   */
  deadline?: Timestamp;

  constructor(data?: PartialMessage<QueryProposalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryProposalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pub_proposal", kind: "message", T: Any },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "committee_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "deadline", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryProposalResponse {
    return new QueryProposalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryProposalResponse {
    return new QueryProposalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryProposalResponse {
    return new QueryProposalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryProposalResponse | PlainMessage<QueryProposalResponse> | undefined, b: QueryProposalResponse | PlainMessage<QueryProposalResponse> | undefined): boolean {
    return proto3.util.equals(QueryProposalResponse, a, b);
  }
}

/**
 * QueryNextProposalIDRequest defines the request type for querying x/committee NextProposalID.
 *
 * @generated from message kava.committee.v1beta1.QueryNextProposalIDRequest
 */
export class QueryNextProposalIDRequest extends Message<QueryNextProposalIDRequest> {
  constructor(data?: PartialMessage<QueryNextProposalIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryNextProposalIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNextProposalIDRequest {
    return new QueryNextProposalIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNextProposalIDRequest {
    return new QueryNextProposalIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNextProposalIDRequest {
    return new QueryNextProposalIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNextProposalIDRequest | PlainMessage<QueryNextProposalIDRequest> | undefined, b: QueryNextProposalIDRequest | PlainMessage<QueryNextProposalIDRequest> | undefined): boolean {
    return proto3.util.equals(QueryNextProposalIDRequest, a, b);
  }
}

/**
 * QueryNextProposalIDRequest defines the response type for querying x/committee NextProposalID.
 *
 * @generated from message kava.committee.v1beta1.QueryNextProposalIDResponse
 */
export class QueryNextProposalIDResponse extends Message<QueryNextProposalIDResponse> {
  /**
   * @generated from field: uint64 next_proposal_id = 1;
   */
  nextProposalId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryNextProposalIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryNextProposalIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next_proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNextProposalIDResponse {
    return new QueryNextProposalIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNextProposalIDResponse {
    return new QueryNextProposalIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNextProposalIDResponse {
    return new QueryNextProposalIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNextProposalIDResponse | PlainMessage<QueryNextProposalIDResponse> | undefined, b: QueryNextProposalIDResponse | PlainMessage<QueryNextProposalIDResponse> | undefined): boolean {
    return proto3.util.equals(QueryNextProposalIDResponse, a, b);
  }
}

/**
 * QueryVotesRequest defines the request type for querying x/committee votes.
 *
 * @generated from message kava.committee.v1beta1.QueryVotesRequest
 */
export class QueryVotesRequest extends Message<QueryVotesRequest> {
  /**
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryVotesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryVotesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVotesRequest {
    return new QueryVotesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVotesRequest {
    return new QueryVotesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVotesRequest {
    return new QueryVotesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVotesRequest | PlainMessage<QueryVotesRequest> | undefined, b: QueryVotesRequest | PlainMessage<QueryVotesRequest> | undefined): boolean {
    return proto3.util.equals(QueryVotesRequest, a, b);
  }
}

/**
 * QueryVotesResponse defines the response type for querying x/committee votes.
 *
 * @generated from message kava.committee.v1beta1.QueryVotesResponse
 */
export class QueryVotesResponse extends Message<QueryVotesResponse> {
  /**
   * votes defined the queried votes.
   *
   * @generated from field: repeated kava.committee.v1beta1.QueryVoteResponse votes = 1;
   */
  votes: QueryVoteResponse[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryVotesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryVotesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "votes", kind: "message", T: QueryVoteResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVotesResponse {
    return new QueryVotesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVotesResponse {
    return new QueryVotesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVotesResponse {
    return new QueryVotesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVotesResponse | PlainMessage<QueryVotesResponse> | undefined, b: QueryVotesResponse | PlainMessage<QueryVotesResponse> | undefined): boolean {
    return proto3.util.equals(QueryVotesResponse, a, b);
  }
}

/**
 * QueryVoteRequest defines the request type for querying x/committee vote.
 *
 * @generated from message kava.committee.v1beta1.QueryVoteRequest
 */
export class QueryVoteRequest extends Message<QueryVoteRequest> {
  /**
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * @generated from field: string voter = 2;
   */
  voter = "";

  constructor(data?: PartialMessage<QueryVoteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryVoteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "voter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVoteRequest {
    return new QueryVoteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVoteRequest {
    return new QueryVoteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVoteRequest {
    return new QueryVoteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVoteRequest | PlainMessage<QueryVoteRequest> | undefined, b: QueryVoteRequest | PlainMessage<QueryVoteRequest> | undefined): boolean {
    return proto3.util.equals(QueryVoteRequest, a, b);
  }
}

/**
 * QueryVoteResponse defines the response type for querying x/committee vote.
 *
 * @generated from message kava.committee.v1beta1.QueryVoteResponse
 */
export class QueryVoteResponse extends Message<QueryVoteResponse> {
  /**
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * @generated from field: string voter = 2;
   */
  voter = "";

  /**
   * @generated from field: kava.committee.v1beta1.VoteType vote_type = 3;
   */
  voteType = VoteType.UNSPECIFIED;

  constructor(data?: PartialMessage<QueryVoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryVoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "voter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "vote_type", kind: "enum", T: proto3.getEnumType(VoteType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryVoteResponse {
    return new QueryVoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryVoteResponse {
    return new QueryVoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryVoteResponse {
    return new QueryVoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryVoteResponse | PlainMessage<QueryVoteResponse> | undefined, b: QueryVoteResponse | PlainMessage<QueryVoteResponse> | undefined): boolean {
    return proto3.util.equals(QueryVoteResponse, a, b);
  }
}

/**
 * QueryTallyRequest defines the request type for querying x/committee tally.
 *
 * @generated from message kava.committee.v1beta1.QueryTallyRequest
 */
export class QueryTallyRequest extends Message<QueryTallyRequest> {
  /**
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryTallyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryTallyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTallyRequest {
    return new QueryTallyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTallyRequest {
    return new QueryTallyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTallyRequest {
    return new QueryTallyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTallyRequest | PlainMessage<QueryTallyRequest> | undefined, b: QueryTallyRequest | PlainMessage<QueryTallyRequest> | undefined): boolean {
    return proto3.util.equals(QueryTallyRequest, a, b);
  }
}

/**
 * QueryTallyResponse defines the response type for querying x/committee tally.
 *
 * @generated from message kava.committee.v1beta1.QueryTallyResponse
 */
export class QueryTallyResponse extends Message<QueryTallyResponse> {
  /**
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId = protoInt64.zero;

  /**
   * @generated from field: string yes_votes = 2;
   */
  yesVotes = "";

  /**
   * @generated from field: string no_votes = 3;
   */
  noVotes = "";

  /**
   * @generated from field: string current_votes = 4;
   */
  currentVotes = "";

  /**
   * @generated from field: string possible_votes = 5;
   */
  possibleVotes = "";

  /**
   * @generated from field: string vote_threshold = 6;
   */
  voteThreshold = "";

  /**
   * @generated from field: string quorum = 7;
   */
  quorum = "";

  constructor(data?: PartialMessage<QueryTallyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryTallyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "yes_votes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "no_votes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "current_votes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "possible_votes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "vote_threshold", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "quorum", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTallyResponse {
    return new QueryTallyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTallyResponse {
    return new QueryTallyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTallyResponse {
    return new QueryTallyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTallyResponse | PlainMessage<QueryTallyResponse> | undefined, b: QueryTallyResponse | PlainMessage<QueryTallyResponse> | undefined): boolean {
    return proto3.util.equals(QueryTallyResponse, a, b);
  }
}

/**
 * QueryRawParamsRequest defines the request type for querying x/committee raw params.
 *
 * @generated from message kava.committee.v1beta1.QueryRawParamsRequest
 */
export class QueryRawParamsRequest extends Message<QueryRawParamsRequest> {
  /**
   * @generated from field: string subspace = 1;
   */
  subspace = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  constructor(data?: PartialMessage<QueryRawParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryRawParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subspace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRawParamsRequest {
    return new QueryRawParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRawParamsRequest {
    return new QueryRawParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRawParamsRequest {
    return new QueryRawParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRawParamsRequest | PlainMessage<QueryRawParamsRequest> | undefined, b: QueryRawParamsRequest | PlainMessage<QueryRawParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryRawParamsRequest, a, b);
  }
}

/**
 * QueryRawParamsResponse defines the response type for querying x/committee raw params.
 *
 * @generated from message kava.committee.v1beta1.QueryRawParamsResponse
 */
export class QueryRawParamsResponse extends Message<QueryRawParamsResponse> {
  /**
   * @generated from field: string raw_data = 1;
   */
  rawData = "";

  constructor(data?: PartialMessage<QueryRawParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.committee.v1beta1.QueryRawParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "raw_data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRawParamsResponse {
    return new QueryRawParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRawParamsResponse {
    return new QueryRawParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRawParamsResponse {
    return new QueryRawParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRawParamsResponse | PlainMessage<QueryRawParamsResponse> | undefined, b: QueryRawParamsResponse | PlainMessage<QueryRawParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryRawParamsResponse, a, b);
  }
}


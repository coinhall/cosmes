// @generated by protoc-gen-cosmes v0.0.1 with parameter "target=ts"
// @generated from file kava/committee/v1beta1/query.proto (package kava.committee.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { QueryCommitteeRequest, QueryCommitteeResponse, QueryCommitteesRequest, QueryCommitteesResponse, QueryNextProposalIDRequest, QueryNextProposalIDResponse, QueryProposalRequest, QueryProposalResponse, QueryProposalsRequest, QueryProposalsResponse, QueryRawParamsRequest, QueryRawParamsResponse, QueryTallyRequest, QueryTallyResponse, QueryVoteRequest, QueryVoteResponse, QueryVotesRequest, QueryVotesResponse } from "./query_pb.js";

const TYPE_NAME = "kava.committee.v1beta1.Query";

/**
 * Committees queries all committess of the committee module.
 *
 * @generated from rpc kava.committee.v1beta1.Query.Committees
 */
export const QueryCommitteesService = {
  typeName: TYPE_NAME,
  method: "Committees",
  Request: QueryCommitteesRequest,
  Response: QueryCommitteesResponse,
} as const;

/**
 * Committee queries a committee based on committee ID.
 *
 * @generated from rpc kava.committee.v1beta1.Query.Committee
 */
export const QueryCommitteeService = {
  typeName: TYPE_NAME,
  method: "Committee",
  Request: QueryCommitteeRequest,
  Response: QueryCommitteeResponse,
} as const;

/**
 * Proposals queries proposals based on committee ID.
 *
 * @generated from rpc kava.committee.v1beta1.Query.Proposals
 */
export const QueryProposalsService = {
  typeName: TYPE_NAME,
  method: "Proposals",
  Request: QueryProposalsRequest,
  Response: QueryProposalsResponse,
} as const;

/**
 * Deposits queries a proposal based on proposal ID.
 *
 * @generated from rpc kava.committee.v1beta1.Query.Proposal
 */
export const QueryProposalService = {
  typeName: TYPE_NAME,
  method: "Proposal",
  Request: QueryProposalRequest,
  Response: QueryProposalResponse,
} as const;

/**
 * NextProposalID queries the next proposal ID of the committee module.
 *
 * @generated from rpc kava.committee.v1beta1.Query.NextProposalID
 */
export const QueryNextProposalIDService = {
  typeName: TYPE_NAME,
  method: "NextProposalID",
  Request: QueryNextProposalIDRequest,
  Response: QueryNextProposalIDResponse,
} as const;

/**
 * Votes queries all votes for a single proposal ID.
 *
 * @generated from rpc kava.committee.v1beta1.Query.Votes
 */
export const QueryVotesService = {
  typeName: TYPE_NAME,
  method: "Votes",
  Request: QueryVotesRequest,
  Response: QueryVotesResponse,
} as const;

/**
 * Vote queries the vote of a single voter for a single proposal ID.
 *
 * @generated from rpc kava.committee.v1beta1.Query.Vote
 */
export const QueryVoteService = {
  typeName: TYPE_NAME,
  method: "Vote",
  Request: QueryVoteRequest,
  Response: QueryVoteResponse,
} as const;

/**
 * Tally queries the tally of a single proposal ID.
 *
 * @generated from rpc kava.committee.v1beta1.Query.Tally
 */
export const QueryTallyService = {
  typeName: TYPE_NAME,
  method: "Tally",
  Request: QueryTallyRequest,
  Response: QueryTallyResponse,
} as const;

/**
 * RawParams queries the raw params data of any subspace and key.
 *
 * @generated from rpc kava.committee.v1beta1.Query.RawParams
 */
export const QueryRawParamsService = {
  typeName: TYPE_NAME,
  method: "RawParams",
  Request: QueryRawParamsRequest,
  Response: QueryRawParamsResponse,
} as const;


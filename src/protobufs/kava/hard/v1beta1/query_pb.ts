// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/hard/v1beta1/query.proto (package kava.hard.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./hard_pb.js";
import { ModuleAccount } from "../../../cosmos/auth/v1beta1/auth_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: kava.hard.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryAccountsRequest is the request type for the Query/Accounts RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryAccountsRequest
 */
export class QueryAccountsRequest extends Message<QueryAccountsRequest> {
  constructor(data?: PartialMessage<QueryAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountsRequest {
    return new QueryAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountsRequest {
    return new QueryAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountsRequest {
    return new QueryAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountsRequest | PlainMessage<QueryAccountsRequest> | undefined, b: QueryAccountsRequest | PlainMessage<QueryAccountsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAccountsRequest, a, b);
  }
}

/**
 * QueryAccountsResponse is the response type for the Query/Accounts RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryAccountsResponse
 */
export class QueryAccountsResponse extends Message<QueryAccountsResponse> {
  /**
   * @generated from field: repeated cosmos.auth.v1beta1.ModuleAccount accounts = 1;
   */
  accounts: ModuleAccount[] = [];

  constructor(data?: PartialMessage<QueryAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: ModuleAccount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountsResponse {
    return new QueryAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountsResponse {
    return new QueryAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountsResponse {
    return new QueryAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountsResponse | PlainMessage<QueryAccountsResponse> | undefined, b: QueryAccountsResponse | PlainMessage<QueryAccountsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAccountsResponse, a, b);
  }
}

/**
 * QueryDepositsRequest is the request type for the Query/Deposits RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryDepositsRequest
 */
export class QueryDepositsRequest extends Message<QueryDepositsRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDepositsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryDepositsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDepositsRequest {
    return new QueryDepositsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDepositsRequest {
    return new QueryDepositsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDepositsRequest {
    return new QueryDepositsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDepositsRequest | PlainMessage<QueryDepositsRequest> | undefined, b: QueryDepositsRequest | PlainMessage<QueryDepositsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDepositsRequest, a, b);
  }
}

/**
 * QueryDepositsResponse is the response type for the Query/Deposits RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryDepositsResponse
 */
export class QueryDepositsResponse extends Message<QueryDepositsResponse> {
  /**
   * @generated from field: repeated kava.hard.v1beta1.DepositResponse deposits = 1;
   */
  deposits: DepositResponse[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDepositsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryDepositsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deposits", kind: "message", T: DepositResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDepositsResponse {
    return new QueryDepositsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDepositsResponse {
    return new QueryDepositsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDepositsResponse {
    return new QueryDepositsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDepositsResponse | PlainMessage<QueryDepositsResponse> | undefined, b: QueryDepositsResponse | PlainMessage<QueryDepositsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDepositsResponse, a, b);
  }
}

/**
 * QueryUnsyncedDepositsRequest is the request type for the Query/UnsyncedDeposits RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryUnsyncedDepositsRequest
 */
export class QueryUnsyncedDepositsRequest extends Message<QueryUnsyncedDepositsRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryUnsyncedDepositsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryUnsyncedDepositsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnsyncedDepositsRequest {
    return new QueryUnsyncedDepositsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnsyncedDepositsRequest {
    return new QueryUnsyncedDepositsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnsyncedDepositsRequest {
    return new QueryUnsyncedDepositsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnsyncedDepositsRequest | PlainMessage<QueryUnsyncedDepositsRequest> | undefined, b: QueryUnsyncedDepositsRequest | PlainMessage<QueryUnsyncedDepositsRequest> | undefined): boolean {
    return proto3.util.equals(QueryUnsyncedDepositsRequest, a, b);
  }
}

/**
 * QueryUnsyncedDepositsResponse is the response type for the Query/UnsyncedDeposits RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryUnsyncedDepositsResponse
 */
export class QueryUnsyncedDepositsResponse extends Message<QueryUnsyncedDepositsResponse> {
  /**
   * @generated from field: repeated kava.hard.v1beta1.DepositResponse deposits = 1;
   */
  deposits: DepositResponse[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryUnsyncedDepositsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryUnsyncedDepositsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deposits", kind: "message", T: DepositResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnsyncedDepositsResponse {
    return new QueryUnsyncedDepositsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnsyncedDepositsResponse {
    return new QueryUnsyncedDepositsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnsyncedDepositsResponse {
    return new QueryUnsyncedDepositsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnsyncedDepositsResponse | PlainMessage<QueryUnsyncedDepositsResponse> | undefined, b: QueryUnsyncedDepositsResponse | PlainMessage<QueryUnsyncedDepositsResponse> | undefined): boolean {
    return proto3.util.equals(QueryUnsyncedDepositsResponse, a, b);
  }
}

/**
 * QueryTotalDepositedRequest is the request type for the Query/TotalDeposited RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryTotalDepositedRequest
 */
export class QueryTotalDepositedRequest extends Message<QueryTotalDepositedRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryTotalDepositedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryTotalDepositedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalDepositedRequest {
    return new QueryTotalDepositedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalDepositedRequest {
    return new QueryTotalDepositedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalDepositedRequest {
    return new QueryTotalDepositedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalDepositedRequest | PlainMessage<QueryTotalDepositedRequest> | undefined, b: QueryTotalDepositedRequest | PlainMessage<QueryTotalDepositedRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalDepositedRequest, a, b);
  }
}

/**
 * QueryTotalDepositedResponse is the response type for the Query/TotalDeposited RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryTotalDepositedResponse
 */
export class QueryTotalDepositedResponse extends Message<QueryTotalDepositedResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin supplied_coins = 2;
   */
  suppliedCoins: Coin[] = [];

  constructor(data?: PartialMessage<QueryTotalDepositedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryTotalDepositedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "supplied_coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalDepositedResponse {
    return new QueryTotalDepositedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalDepositedResponse {
    return new QueryTotalDepositedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalDepositedResponse {
    return new QueryTotalDepositedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalDepositedResponse | PlainMessage<QueryTotalDepositedResponse> | undefined, b: QueryTotalDepositedResponse | PlainMessage<QueryTotalDepositedResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalDepositedResponse, a, b);
  }
}

/**
 * QueryBorrowsRequest is the request type for the Query/Borrows RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryBorrowsRequest
 */
export class QueryBorrowsRequest extends Message<QueryBorrowsRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryBorrowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryBorrowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBorrowsRequest {
    return new QueryBorrowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBorrowsRequest {
    return new QueryBorrowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBorrowsRequest {
    return new QueryBorrowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBorrowsRequest | PlainMessage<QueryBorrowsRequest> | undefined, b: QueryBorrowsRequest | PlainMessage<QueryBorrowsRequest> | undefined): boolean {
    return proto3.util.equals(QueryBorrowsRequest, a, b);
  }
}

/**
 * QueryBorrowsResponse is the response type for the Query/Borrows RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryBorrowsResponse
 */
export class QueryBorrowsResponse extends Message<QueryBorrowsResponse> {
  /**
   * @generated from field: repeated kava.hard.v1beta1.BorrowResponse borrows = 1;
   */
  borrows: BorrowResponse[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryBorrowsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryBorrowsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "borrows", kind: "message", T: BorrowResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBorrowsResponse {
    return new QueryBorrowsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBorrowsResponse {
    return new QueryBorrowsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBorrowsResponse {
    return new QueryBorrowsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBorrowsResponse | PlainMessage<QueryBorrowsResponse> | undefined, b: QueryBorrowsResponse | PlainMessage<QueryBorrowsResponse> | undefined): boolean {
    return proto3.util.equals(QueryBorrowsResponse, a, b);
  }
}

/**
 * QueryUnsyncedBorrowsRequest is the request type for the Query/UnsyncedBorrows RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryUnsyncedBorrowsRequest
 */
export class QueryUnsyncedBorrowsRequest extends Message<QueryUnsyncedBorrowsRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryUnsyncedBorrowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryUnsyncedBorrowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnsyncedBorrowsRequest {
    return new QueryUnsyncedBorrowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnsyncedBorrowsRequest {
    return new QueryUnsyncedBorrowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnsyncedBorrowsRequest {
    return new QueryUnsyncedBorrowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnsyncedBorrowsRequest | PlainMessage<QueryUnsyncedBorrowsRequest> | undefined, b: QueryUnsyncedBorrowsRequest | PlainMessage<QueryUnsyncedBorrowsRequest> | undefined): boolean {
    return proto3.util.equals(QueryUnsyncedBorrowsRequest, a, b);
  }
}

/**
 * QueryUnsyncedBorrowsResponse is the response type for the Query/UnsyncedBorrows RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryUnsyncedBorrowsResponse
 */
export class QueryUnsyncedBorrowsResponse extends Message<QueryUnsyncedBorrowsResponse> {
  /**
   * @generated from field: repeated kava.hard.v1beta1.BorrowResponse borrows = 1;
   */
  borrows: BorrowResponse[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryUnsyncedBorrowsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryUnsyncedBorrowsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "borrows", kind: "message", T: BorrowResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryUnsyncedBorrowsResponse {
    return new QueryUnsyncedBorrowsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryUnsyncedBorrowsResponse {
    return new QueryUnsyncedBorrowsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryUnsyncedBorrowsResponse {
    return new QueryUnsyncedBorrowsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryUnsyncedBorrowsResponse | PlainMessage<QueryUnsyncedBorrowsResponse> | undefined, b: QueryUnsyncedBorrowsResponse | PlainMessage<QueryUnsyncedBorrowsResponse> | undefined): boolean {
    return proto3.util.equals(QueryUnsyncedBorrowsResponse, a, b);
  }
}

/**
 * QueryTotalBorrowedRequest is the request type for the Query/TotalBorrowed RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryTotalBorrowedRequest
 */
export class QueryTotalBorrowedRequest extends Message<QueryTotalBorrowedRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryTotalBorrowedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryTotalBorrowedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalBorrowedRequest {
    return new QueryTotalBorrowedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalBorrowedRequest {
    return new QueryTotalBorrowedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalBorrowedRequest {
    return new QueryTotalBorrowedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalBorrowedRequest | PlainMessage<QueryTotalBorrowedRequest> | undefined, b: QueryTotalBorrowedRequest | PlainMessage<QueryTotalBorrowedRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalBorrowedRequest, a, b);
  }
}

/**
 * QueryTotalBorrowedResponse is the response type for the Query/TotalBorrowed RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryTotalBorrowedResponse
 */
export class QueryTotalBorrowedResponse extends Message<QueryTotalBorrowedResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin borrowed_coins = 2;
   */
  borrowedCoins: Coin[] = [];

  constructor(data?: PartialMessage<QueryTotalBorrowedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryTotalBorrowedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "borrowed_coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalBorrowedResponse {
    return new QueryTotalBorrowedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalBorrowedResponse {
    return new QueryTotalBorrowedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalBorrowedResponse {
    return new QueryTotalBorrowedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalBorrowedResponse | PlainMessage<QueryTotalBorrowedResponse> | undefined, b: QueryTotalBorrowedResponse | PlainMessage<QueryTotalBorrowedResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalBorrowedResponse, a, b);
  }
}

/**
 * QueryInterestRateRequest is the request type for the Query/InterestRate RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryInterestRateRequest
 */
export class QueryInterestRateRequest extends Message<QueryInterestRateRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryInterestRateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryInterestRateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryInterestRateRequest {
    return new QueryInterestRateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryInterestRateRequest {
    return new QueryInterestRateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryInterestRateRequest {
    return new QueryInterestRateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryInterestRateRequest | PlainMessage<QueryInterestRateRequest> | undefined, b: QueryInterestRateRequest | PlainMessage<QueryInterestRateRequest> | undefined): boolean {
    return proto3.util.equals(QueryInterestRateRequest, a, b);
  }
}

/**
 * QueryInterestRateResponse is the response type for the Query/InterestRate RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryInterestRateResponse
 */
export class QueryInterestRateResponse extends Message<QueryInterestRateResponse> {
  /**
   * @generated from field: repeated kava.hard.v1beta1.MoneyMarketInterestRate interest_rates = 1;
   */
  interestRates: MoneyMarketInterestRate[] = [];

  constructor(data?: PartialMessage<QueryInterestRateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryInterestRateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interest_rates", kind: "message", T: MoneyMarketInterestRate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryInterestRateResponse {
    return new QueryInterestRateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryInterestRateResponse {
    return new QueryInterestRateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryInterestRateResponse {
    return new QueryInterestRateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryInterestRateResponse | PlainMessage<QueryInterestRateResponse> | undefined, b: QueryInterestRateResponse | PlainMessage<QueryInterestRateResponse> | undefined): boolean {
    return proto3.util.equals(QueryInterestRateResponse, a, b);
  }
}

/**
 * QueryReservesRequest is the request type for the Query/Reserves RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryReservesRequest
 */
export class QueryReservesRequest extends Message<QueryReservesRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryReservesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryReservesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryReservesRequest {
    return new QueryReservesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryReservesRequest {
    return new QueryReservesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryReservesRequest {
    return new QueryReservesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryReservesRequest | PlainMessage<QueryReservesRequest> | undefined, b: QueryReservesRequest | PlainMessage<QueryReservesRequest> | undefined): boolean {
    return proto3.util.equals(QueryReservesRequest, a, b);
  }
}

/**
 * QueryReservesResponse is the response type for the Query/Reserves RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryReservesResponse
 */
export class QueryReservesResponse extends Message<QueryReservesResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 2;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<QueryReservesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryReservesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryReservesResponse {
    return new QueryReservesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryReservesResponse {
    return new QueryReservesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryReservesResponse {
    return new QueryReservesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryReservesResponse | PlainMessage<QueryReservesResponse> | undefined, b: QueryReservesResponse | PlainMessage<QueryReservesResponse> | undefined): boolean {
    return proto3.util.equals(QueryReservesResponse, a, b);
  }
}

/**
 * QueryInterestFactorsRequest is the request type for the Query/InterestFactors RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryInterestFactorsRequest
 */
export class QueryInterestFactorsRequest extends Message<QueryInterestFactorsRequest> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryInterestFactorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryInterestFactorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryInterestFactorsRequest {
    return new QueryInterestFactorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryInterestFactorsRequest {
    return new QueryInterestFactorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryInterestFactorsRequest {
    return new QueryInterestFactorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryInterestFactorsRequest | PlainMessage<QueryInterestFactorsRequest> | undefined, b: QueryInterestFactorsRequest | PlainMessage<QueryInterestFactorsRequest> | undefined): boolean {
    return proto3.util.equals(QueryInterestFactorsRequest, a, b);
  }
}

/**
 * QueryInterestFactorsResponse is the response type for the Query/InterestFactors RPC method.
 *
 * @generated from message kava.hard.v1beta1.QueryInterestFactorsResponse
 */
export class QueryInterestFactorsResponse extends Message<QueryInterestFactorsResponse> {
  /**
   * @generated from field: repeated kava.hard.v1beta1.InterestFactor interest_factors = 1;
   */
  interestFactors: InterestFactor[] = [];

  constructor(data?: PartialMessage<QueryInterestFactorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.QueryInterestFactorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interest_factors", kind: "message", T: InterestFactor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryInterestFactorsResponse {
    return new QueryInterestFactorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryInterestFactorsResponse {
    return new QueryInterestFactorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryInterestFactorsResponse {
    return new QueryInterestFactorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryInterestFactorsResponse | PlainMessage<QueryInterestFactorsResponse> | undefined, b: QueryInterestFactorsResponse | PlainMessage<QueryInterestFactorsResponse> | undefined): boolean {
    return proto3.util.equals(QueryInterestFactorsResponse, a, b);
  }
}

/**
 * DepositResponse defines an amount of coins deposited into a hard module account.
 *
 * @generated from message kava.hard.v1beta1.DepositResponse
 */
export class DepositResponse extends Message<DepositResponse> {
  /**
   * @generated from field: string depositor = 1;
   */
  depositor = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 2;
   */
  amount: Coin[] = [];

  /**
   * @generated from field: repeated kava.hard.v1beta1.SupplyInterestFactorResponse index = 3;
   */
  index: SupplyInterestFactorResponse[] = [];

  constructor(data?: PartialMessage<DepositResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.DepositResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "index", kind: "message", T: SupplyInterestFactorResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DepositResponse {
    return new DepositResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DepositResponse {
    return new DepositResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DepositResponse {
    return new DepositResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DepositResponse | PlainMessage<DepositResponse> | undefined, b: DepositResponse | PlainMessage<DepositResponse> | undefined): boolean {
    return proto3.util.equals(DepositResponse, a, b);
  }
}

/**
 * SupplyInterestFactorResponse defines an individual borrow interest factor.
 *
 * @generated from message kava.hard.v1beta1.SupplyInterestFactorResponse
 */
export class SupplyInterestFactorResponse extends Message<SupplyInterestFactorResponse> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * sdk.Dec as string
   *
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<SupplyInterestFactorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.SupplyInterestFactorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SupplyInterestFactorResponse {
    return new SupplyInterestFactorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SupplyInterestFactorResponse {
    return new SupplyInterestFactorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SupplyInterestFactorResponse {
    return new SupplyInterestFactorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SupplyInterestFactorResponse | PlainMessage<SupplyInterestFactorResponse> | undefined, b: SupplyInterestFactorResponse | PlainMessage<SupplyInterestFactorResponse> | undefined): boolean {
    return proto3.util.equals(SupplyInterestFactorResponse, a, b);
  }
}

/**
 * BorrowResponse defines an amount of coins borrowed from a hard module account.
 *
 * @generated from message kava.hard.v1beta1.BorrowResponse
 */
export class BorrowResponse extends Message<BorrowResponse> {
  /**
   * @generated from field: string borrower = 1;
   */
  borrower = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 2;
   */
  amount: Coin[] = [];

  /**
   * @generated from field: repeated kava.hard.v1beta1.BorrowInterestFactorResponse index = 3;
   */
  index: BorrowInterestFactorResponse[] = [];

  constructor(data?: PartialMessage<BorrowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.BorrowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "borrower", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "index", kind: "message", T: BorrowInterestFactorResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BorrowResponse {
    return new BorrowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BorrowResponse {
    return new BorrowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BorrowResponse {
    return new BorrowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BorrowResponse | PlainMessage<BorrowResponse> | undefined, b: BorrowResponse | PlainMessage<BorrowResponse> | undefined): boolean {
    return proto3.util.equals(BorrowResponse, a, b);
  }
}

/**
 * BorrowInterestFactorResponse defines an individual borrow interest factor.
 *
 * @generated from message kava.hard.v1beta1.BorrowInterestFactorResponse
 */
export class BorrowInterestFactorResponse extends Message<BorrowInterestFactorResponse> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * sdk.Dec as string
   *
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<BorrowInterestFactorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.BorrowInterestFactorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BorrowInterestFactorResponse {
    return new BorrowInterestFactorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BorrowInterestFactorResponse {
    return new BorrowInterestFactorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BorrowInterestFactorResponse {
    return new BorrowInterestFactorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BorrowInterestFactorResponse | PlainMessage<BorrowInterestFactorResponse> | undefined, b: BorrowInterestFactorResponse | PlainMessage<BorrowInterestFactorResponse> | undefined): boolean {
    return proto3.util.equals(BorrowInterestFactorResponse, a, b);
  }
}

/**
 * MoneyMarketInterestRate is a unique type returned by interest rate queries
 *
 * @generated from message kava.hard.v1beta1.MoneyMarketInterestRate
 */
export class MoneyMarketInterestRate extends Message<MoneyMarketInterestRate> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * sdk.Dec as String
   *
   * @generated from field: string supply_interest_rate = 2;
   */
  supplyInterestRate = "";

  /**
   * sdk.Dec as String
   *
   * @generated from field: string borrow_interest_rate = 3;
   */
  borrowInterestRate = "";

  constructor(data?: PartialMessage<MoneyMarketInterestRate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.MoneyMarketInterestRate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "supply_interest_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "borrow_interest_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MoneyMarketInterestRate {
    return new MoneyMarketInterestRate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MoneyMarketInterestRate {
    return new MoneyMarketInterestRate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MoneyMarketInterestRate {
    return new MoneyMarketInterestRate().fromJsonString(jsonString, options);
  }

  static equals(a: MoneyMarketInterestRate | PlainMessage<MoneyMarketInterestRate> | undefined, b: MoneyMarketInterestRate | PlainMessage<MoneyMarketInterestRate> | undefined): boolean {
    return proto3.util.equals(MoneyMarketInterestRate, a, b);
  }
}

/**
 * InterestFactor is a unique type returned by interest factor queries
 *
 * @generated from message kava.hard.v1beta1.InterestFactor
 */
export class InterestFactor extends Message<InterestFactor> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * sdk.Dec as String
   *
   * @generated from field: string borrow_interest_factor = 2;
   */
  borrowInterestFactor = "";

  /**
   * sdk.Dec as String
   *
   * @generated from field: string supply_interest_factor = 3;
   */
  supplyInterestFactor = "";

  constructor(data?: PartialMessage<InterestFactor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.InterestFactor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "borrow_interest_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "supply_interest_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterestFactor {
    return new InterestFactor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterestFactor {
    return new InterestFactor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterestFactor {
    return new InterestFactor().fromJsonString(jsonString, options);
  }

  static equals(a: InterestFactor | PlainMessage<InterestFactor> | undefined, b: InterestFactor | PlainMessage<InterestFactor> | undefined): boolean {
    return proto3.util.equals(InterestFactor, a, b);
  }
}


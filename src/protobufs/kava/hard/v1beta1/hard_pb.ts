// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/hard/v1beta1/hard.proto (package kava.hard.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Params defines the parameters for the hard module.
 *
 * @generated from message kava.hard.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: repeated kava.hard.v1beta1.MoneyMarket money_markets = 1;
   */
  moneyMarkets: MoneyMarket[] = [];

  /**
   * @generated from field: string minimum_borrow_usd_value = 2;
   */
  minimumBorrowUsdValue = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "money_markets", kind: "message", T: MoneyMarket, repeated: true },
    { no: 2, name: "minimum_borrow_usd_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * MoneyMarket is a money market for an individual asset.
 *
 * @generated from message kava.hard.v1beta1.MoneyMarket
 */
export class MoneyMarket extends Message<MoneyMarket> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: kava.hard.v1beta1.BorrowLimit borrow_limit = 2;
   */
  borrowLimit?: BorrowLimit;

  /**
   * @generated from field: string spot_market_id = 3;
   */
  spotMarketId = "";

  /**
   * @generated from field: string conversion_factor = 4;
   */
  conversionFactor = "";

  /**
   * @generated from field: kava.hard.v1beta1.InterestRateModel interest_rate_model = 5;
   */
  interestRateModel?: InterestRateModel;

  /**
   * @generated from field: string reserve_factor = 6;
   */
  reserveFactor = "";

  /**
   * @generated from field: string keeper_reward_percentage = 7;
   */
  keeperRewardPercentage = "";

  constructor(data?: PartialMessage<MoneyMarket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.MoneyMarket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "borrow_limit", kind: "message", T: BorrowLimit },
    { no: 3, name: "spot_market_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "conversion_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "interest_rate_model", kind: "message", T: InterestRateModel },
    { no: 6, name: "reserve_factor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "keeper_reward_percentage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MoneyMarket {
    return new MoneyMarket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MoneyMarket {
    return new MoneyMarket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MoneyMarket {
    return new MoneyMarket().fromJsonString(jsonString, options);
  }

  static equals(a: MoneyMarket | PlainMessage<MoneyMarket> | undefined, b: MoneyMarket | PlainMessage<MoneyMarket> | undefined): boolean {
    return proto3.util.equals(MoneyMarket, a, b);
  }
}

/**
 * BorrowLimit enforces restrictions on a money market.
 *
 * @generated from message kava.hard.v1beta1.BorrowLimit
 */
export class BorrowLimit extends Message<BorrowLimit> {
  /**
   * @generated from field: bool has_max_limit = 1;
   */
  hasMaxLimit = false;

  /**
   * @generated from field: string maximum_limit = 2;
   */
  maximumLimit = "";

  /**
   * @generated from field: string loan_to_value = 3;
   */
  loanToValue = "";

  constructor(data?: PartialMessage<BorrowLimit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.BorrowLimit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "has_max_limit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "maximum_limit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "loan_to_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BorrowLimit {
    return new BorrowLimit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BorrowLimit {
    return new BorrowLimit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BorrowLimit {
    return new BorrowLimit().fromJsonString(jsonString, options);
  }

  static equals(a: BorrowLimit | PlainMessage<BorrowLimit> | undefined, b: BorrowLimit | PlainMessage<BorrowLimit> | undefined): boolean {
    return proto3.util.equals(BorrowLimit, a, b);
  }
}

/**
 * InterestRateModel contains information about an asset's interest rate.
 *
 * @generated from message kava.hard.v1beta1.InterestRateModel
 */
export class InterestRateModel extends Message<InterestRateModel> {
  /**
   * @generated from field: string base_rate_apy = 1;
   */
  baseRateApy = "";

  /**
   * @generated from field: string base_multiplier = 2;
   */
  baseMultiplier = "";

  /**
   * @generated from field: string kink = 3;
   */
  kink = "";

  /**
   * @generated from field: string jump_multiplier = 4;
   */
  jumpMultiplier = "";

  constructor(data?: PartialMessage<InterestRateModel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.InterestRateModel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_rate_apy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "base_multiplier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "kink", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "jump_multiplier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InterestRateModel {
    return new InterestRateModel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InterestRateModel {
    return new InterestRateModel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InterestRateModel {
    return new InterestRateModel().fromJsonString(jsonString, options);
  }

  static equals(a: InterestRateModel | PlainMessage<InterestRateModel> | undefined, b: InterestRateModel | PlainMessage<InterestRateModel> | undefined): boolean {
    return proto3.util.equals(InterestRateModel, a, b);
  }
}

/**
 * Deposit defines an amount of coins deposited into a hard module account.
 *
 * @generated from message kava.hard.v1beta1.Deposit
 */
export class Deposit extends Message<Deposit> {
  /**
   * @generated from field: string depositor = 1;
   */
  depositor = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 2;
   */
  amount: Coin[] = [];

  /**
   * @generated from field: repeated kava.hard.v1beta1.SupplyInterestFactor index = 3;
   */
  index: SupplyInterestFactor[] = [];

  constructor(data?: PartialMessage<Deposit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.Deposit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "index", kind: "message", T: SupplyInterestFactor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Deposit {
    return new Deposit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Deposit {
    return new Deposit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Deposit {
    return new Deposit().fromJsonString(jsonString, options);
  }

  static equals(a: Deposit | PlainMessage<Deposit> | undefined, b: Deposit | PlainMessage<Deposit> | undefined): boolean {
    return proto3.util.equals(Deposit, a, b);
  }
}

/**
 * Borrow defines an amount of coins borrowed from a hard module account.
 *
 * @generated from message kava.hard.v1beta1.Borrow
 */
export class Borrow extends Message<Borrow> {
  /**
   * @generated from field: string borrower = 1;
   */
  borrower = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 2;
   */
  amount: Coin[] = [];

  /**
   * @generated from field: repeated kava.hard.v1beta1.BorrowInterestFactor index = 3;
   */
  index: BorrowInterestFactor[] = [];

  constructor(data?: PartialMessage<Borrow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.Borrow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "borrower", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "index", kind: "message", T: BorrowInterestFactor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Borrow {
    return new Borrow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Borrow {
    return new Borrow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Borrow {
    return new Borrow().fromJsonString(jsonString, options);
  }

  static equals(a: Borrow | PlainMessage<Borrow> | undefined, b: Borrow | PlainMessage<Borrow> | undefined): boolean {
    return proto3.util.equals(Borrow, a, b);
  }
}

/**
 * SupplyInterestFactor defines an individual borrow interest factor.
 *
 * @generated from message kava.hard.v1beta1.SupplyInterestFactor
 */
export class SupplyInterestFactor extends Message<SupplyInterestFactor> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<SupplyInterestFactor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.SupplyInterestFactor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SupplyInterestFactor {
    return new SupplyInterestFactor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SupplyInterestFactor {
    return new SupplyInterestFactor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SupplyInterestFactor {
    return new SupplyInterestFactor().fromJsonString(jsonString, options);
  }

  static equals(a: SupplyInterestFactor | PlainMessage<SupplyInterestFactor> | undefined, b: SupplyInterestFactor | PlainMessage<SupplyInterestFactor> | undefined): boolean {
    return proto3.util.equals(SupplyInterestFactor, a, b);
  }
}

/**
 * BorrowInterestFactor defines an individual borrow interest factor.
 *
 * @generated from message kava.hard.v1beta1.BorrowInterestFactor
 */
export class BorrowInterestFactor extends Message<BorrowInterestFactor> {
  /**
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<BorrowInterestFactor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.BorrowInterestFactor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BorrowInterestFactor {
    return new BorrowInterestFactor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BorrowInterestFactor {
    return new BorrowInterestFactor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BorrowInterestFactor {
    return new BorrowInterestFactor().fromJsonString(jsonString, options);
  }

  static equals(a: BorrowInterestFactor | PlainMessage<BorrowInterestFactor> | undefined, b: BorrowInterestFactor | PlainMessage<BorrowInterestFactor> | undefined): boolean {
    return proto3.util.equals(BorrowInterestFactor, a, b);
  }
}

/**
 * CoinsProto defines a Protobuf wrapper around a Coins slice
 *
 * @generated from message kava.hard.v1beta1.CoinsProto
 */
export class CoinsProto extends Message<CoinsProto> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 1;
   */
  coins: Coin[] = [];

  constructor(data?: PartialMessage<CoinsProto>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.CoinsProto";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoinsProto {
    return new CoinsProto().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoinsProto {
    return new CoinsProto().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoinsProto {
    return new CoinsProto().fromJsonString(jsonString, options);
  }

  static equals(a: CoinsProto | PlainMessage<CoinsProto> | undefined, b: CoinsProto | PlainMessage<CoinsProto> | undefined): boolean {
    return proto3.util.equals(CoinsProto, a, b);
  }
}


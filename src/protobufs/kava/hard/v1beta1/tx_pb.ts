// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/hard/v1beta1/tx.proto (package kava.hard.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgDeposit defines the Msg/Deposit request type.
 *
 * @generated from message kava.hard.v1beta1.MsgDeposit
 */
export class MsgDeposit extends Message<MsgDeposit> {
  /**
   * @generated from field: string depositor = 1;
   */
  depositor = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 2;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgDeposit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.MsgDeposit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeposit {
    return new MsgDeposit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeposit {
    return new MsgDeposit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeposit {
    return new MsgDeposit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeposit | PlainMessage<MsgDeposit> | undefined, b: MsgDeposit | PlainMessage<MsgDeposit> | undefined): boolean {
    return proto3.util.equals(MsgDeposit, a, b);
  }
}

/**
 * MsgDepositResponse defines the Msg/Deposit response type.
 *
 * @generated from message kava.hard.v1beta1.MsgDepositResponse
 */
export class MsgDepositResponse extends Message<MsgDepositResponse> {
  constructor(data?: PartialMessage<MsgDepositResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.MsgDepositResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDepositResponse {
    return new MsgDepositResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDepositResponse | PlainMessage<MsgDepositResponse> | undefined, b: MsgDepositResponse | PlainMessage<MsgDepositResponse> | undefined): boolean {
    return proto3.util.equals(MsgDepositResponse, a, b);
  }
}

/**
 * MsgWithdraw defines the Msg/Withdraw request type.
 *
 * @generated from message kava.hard.v1beta1.MsgWithdraw
 */
export class MsgWithdraw extends Message<MsgWithdraw> {
  /**
   * @generated from field: string depositor = 1;
   */
  depositor = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 2;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgWithdraw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.MsgWithdraw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "depositor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdraw {
    return new MsgWithdraw().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdraw | PlainMessage<MsgWithdraw> | undefined, b: MsgWithdraw | PlainMessage<MsgWithdraw> | undefined): boolean {
    return proto3.util.equals(MsgWithdraw, a, b);
  }
}

/**
 * MsgWithdrawResponse defines the Msg/Withdraw response type.
 *
 * @generated from message kava.hard.v1beta1.MsgWithdrawResponse
 */
export class MsgWithdrawResponse extends Message<MsgWithdrawResponse> {
  constructor(data?: PartialMessage<MsgWithdrawResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.MsgWithdrawResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgWithdrawResponse {
    return new MsgWithdrawResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgWithdrawResponse | PlainMessage<MsgWithdrawResponse> | undefined, b: MsgWithdrawResponse | PlainMessage<MsgWithdrawResponse> | undefined): boolean {
    return proto3.util.equals(MsgWithdrawResponse, a, b);
  }
}

/**
 * MsgBorrow defines the Msg/Borrow request type.
 *
 * @generated from message kava.hard.v1beta1.MsgBorrow
 */
export class MsgBorrow extends Message<MsgBorrow> {
  /**
   * @generated from field: string borrower = 1;
   */
  borrower = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 2;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgBorrow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.MsgBorrow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "borrower", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBorrow {
    return new MsgBorrow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBorrow {
    return new MsgBorrow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBorrow {
    return new MsgBorrow().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBorrow | PlainMessage<MsgBorrow> | undefined, b: MsgBorrow | PlainMessage<MsgBorrow> | undefined): boolean {
    return proto3.util.equals(MsgBorrow, a, b);
  }
}

/**
 * MsgBorrowResponse defines the Msg/Borrow response type.
 *
 * @generated from message kava.hard.v1beta1.MsgBorrowResponse
 */
export class MsgBorrowResponse extends Message<MsgBorrowResponse> {
  constructor(data?: PartialMessage<MsgBorrowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.MsgBorrowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBorrowResponse {
    return new MsgBorrowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBorrowResponse {
    return new MsgBorrowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBorrowResponse {
    return new MsgBorrowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBorrowResponse | PlainMessage<MsgBorrowResponse> | undefined, b: MsgBorrowResponse | PlainMessage<MsgBorrowResponse> | undefined): boolean {
    return proto3.util.equals(MsgBorrowResponse, a, b);
  }
}

/**
 * MsgRepay defines the Msg/Repay request type.
 *
 * @generated from message kava.hard.v1beta1.MsgRepay
 */
export class MsgRepay extends Message<MsgRepay> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgRepay>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.MsgRepay";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRepay {
    return new MsgRepay().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRepay {
    return new MsgRepay().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRepay {
    return new MsgRepay().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRepay | PlainMessage<MsgRepay> | undefined, b: MsgRepay | PlainMessage<MsgRepay> | undefined): boolean {
    return proto3.util.equals(MsgRepay, a, b);
  }
}

/**
 * MsgRepayResponse defines the Msg/Repay response type.
 *
 * @generated from message kava.hard.v1beta1.MsgRepayResponse
 */
export class MsgRepayResponse extends Message<MsgRepayResponse> {
  constructor(data?: PartialMessage<MsgRepayResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.MsgRepayResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRepayResponse {
    return new MsgRepayResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRepayResponse {
    return new MsgRepayResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRepayResponse {
    return new MsgRepayResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRepayResponse | PlainMessage<MsgRepayResponse> | undefined, b: MsgRepayResponse | PlainMessage<MsgRepayResponse> | undefined): boolean {
    return proto3.util.equals(MsgRepayResponse, a, b);
  }
}

/**
 * MsgLiquidate defines the Msg/Liquidate request type.
 *
 * @generated from message kava.hard.v1beta1.MsgLiquidate
 */
export class MsgLiquidate extends Message<MsgLiquidate> {
  /**
   * @generated from field: string keeper = 1;
   */
  keeper = "";

  /**
   * @generated from field: string borrower = 2;
   */
  borrower = "";

  constructor(data?: PartialMessage<MsgLiquidate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.MsgLiquidate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keeper", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "borrower", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLiquidate {
    return new MsgLiquidate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLiquidate {
    return new MsgLiquidate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLiquidate {
    return new MsgLiquidate().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLiquidate | PlainMessage<MsgLiquidate> | undefined, b: MsgLiquidate | PlainMessage<MsgLiquidate> | undefined): boolean {
    return proto3.util.equals(MsgLiquidate, a, b);
  }
}

/**
 * MsgLiquidateResponse defines the Msg/Liquidate response type.
 *
 * @generated from message kava.hard.v1beta1.MsgLiquidateResponse
 */
export class MsgLiquidateResponse extends Message<MsgLiquidateResponse> {
  constructor(data?: PartialMessage<MsgLiquidateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.hard.v1beta1.MsgLiquidateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgLiquidateResponse {
    return new MsgLiquidateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgLiquidateResponse {
    return new MsgLiquidateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgLiquidateResponse {
    return new MsgLiquidateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgLiquidateResponse | PlainMessage<MsgLiquidateResponse> | undefined, b: MsgLiquidateResponse | PlainMessage<MsgLiquidateResponse> | undefined): boolean {
    return proto3.util.equals(MsgLiquidateResponse, a, b);
  }
}


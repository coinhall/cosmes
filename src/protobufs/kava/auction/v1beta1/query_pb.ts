// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/auction/v1beta1/query.proto (package kava.auction.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./genesis_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * QueryParamsRequest defines the request type for querying x/auction parameters.
 *
 * @generated from message kava.auction.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.auction.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse defines the response type for querying x/auction parameters.
 *
 * @generated from message kava.auction.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: kava.auction.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.auction.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryAuctionRequest is the request type for the Query/Auction RPC method.
 *
 * @generated from message kava.auction.v1beta1.QueryAuctionRequest
 */
export class QueryAuctionRequest extends Message<QueryAuctionRequest> {
  /**
   * @generated from field: uint64 auction_id = 1;
   */
  auctionId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryAuctionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.auction.v1beta1.QueryAuctionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auction_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuctionRequest {
    return new QueryAuctionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuctionRequest {
    return new QueryAuctionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAuctionRequest {
    return new QueryAuctionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAuctionRequest | PlainMessage<QueryAuctionRequest> | undefined, b: QueryAuctionRequest | PlainMessage<QueryAuctionRequest> | undefined): boolean {
    return proto3.util.equals(QueryAuctionRequest, a, b);
  }
}

/**
 * QueryAuctionResponse is the response type for the Query/Auction RPC method.
 *
 * @generated from message kava.auction.v1beta1.QueryAuctionResponse
 */
export class QueryAuctionResponse extends Message<QueryAuctionResponse> {
  /**
   * @generated from field: google.protobuf.Any auction = 1;
   */
  auction?: Any;

  constructor(data?: PartialMessage<QueryAuctionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.auction.v1beta1.QueryAuctionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auction", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuctionResponse {
    return new QueryAuctionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuctionResponse {
    return new QueryAuctionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAuctionResponse {
    return new QueryAuctionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAuctionResponse | PlainMessage<QueryAuctionResponse> | undefined, b: QueryAuctionResponse | PlainMessage<QueryAuctionResponse> | undefined): boolean {
    return proto3.util.equals(QueryAuctionResponse, a, b);
  }
}

/**
 * QueryAuctionsRequest is the request type for the Query/Auctions RPC method.
 *
 * @generated from message kava.auction.v1beta1.QueryAuctionsRequest
 */
export class QueryAuctionsRequest extends Message<QueryAuctionsRequest> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: string denom = 3;
   */
  denom = "";

  /**
   * @generated from field: string phase = 4;
   */
  phase = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 5;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAuctionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.auction.v1beta1.QueryAuctionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "phase", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuctionsRequest {
    return new QueryAuctionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuctionsRequest {
    return new QueryAuctionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAuctionsRequest {
    return new QueryAuctionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAuctionsRequest | PlainMessage<QueryAuctionsRequest> | undefined, b: QueryAuctionsRequest | PlainMessage<QueryAuctionsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAuctionsRequest, a, b);
  }
}

/**
 * QueryAuctionsResponse is the response type for the Query/Auctions RPC method.
 *
 * @generated from message kava.auction.v1beta1.QueryAuctionsResponse
 */
export class QueryAuctionsResponse extends Message<QueryAuctionsResponse> {
  /**
   * @generated from field: repeated google.protobuf.Any auctions = 1;
   */
  auctions: Any[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAuctionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.auction.v1beta1.QueryAuctionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auctions", kind: "message", T: Any, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAuctionsResponse {
    return new QueryAuctionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAuctionsResponse {
    return new QueryAuctionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAuctionsResponse {
    return new QueryAuctionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAuctionsResponse | PlainMessage<QueryAuctionsResponse> | undefined, b: QueryAuctionsResponse | PlainMessage<QueryAuctionsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAuctionsResponse, a, b);
  }
}

/**
 * QueryNextAuctionIDRequest defines the request type for querying x/auction next auction ID.
 *
 * @generated from message kava.auction.v1beta1.QueryNextAuctionIDRequest
 */
export class QueryNextAuctionIDRequest extends Message<QueryNextAuctionIDRequest> {
  constructor(data?: PartialMessage<QueryNextAuctionIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.auction.v1beta1.QueryNextAuctionIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNextAuctionIDRequest {
    return new QueryNextAuctionIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNextAuctionIDRequest {
    return new QueryNextAuctionIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNextAuctionIDRequest {
    return new QueryNextAuctionIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNextAuctionIDRequest | PlainMessage<QueryNextAuctionIDRequest> | undefined, b: QueryNextAuctionIDRequest | PlainMessage<QueryNextAuctionIDRequest> | undefined): boolean {
    return proto3.util.equals(QueryNextAuctionIDRequest, a, b);
  }
}

/**
 * QueryNextAuctionIDResponse defines the response type for querying x/auction next auction ID.
 *
 * @generated from message kava.auction.v1beta1.QueryNextAuctionIDResponse
 */
export class QueryNextAuctionIDResponse extends Message<QueryNextAuctionIDResponse> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryNextAuctionIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.auction.v1beta1.QueryNextAuctionIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryNextAuctionIDResponse {
    return new QueryNextAuctionIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryNextAuctionIDResponse {
    return new QueryNextAuctionIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryNextAuctionIDResponse {
    return new QueryNextAuctionIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryNextAuctionIDResponse | PlainMessage<QueryNextAuctionIDResponse> | undefined, b: QueryNextAuctionIDResponse | PlainMessage<QueryNextAuctionIDResponse> | undefined): boolean {
    return proto3.util.equals(QueryNextAuctionIDResponse, a, b);
  }
}


// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/auction/v1beta1/tx.proto (package kava.auction.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgPlaceBid represents a message used by bidders to place bids on auctions
 *
 * @generated from message kava.auction.v1beta1.MsgPlaceBid
 */
export class MsgPlaceBid extends Message<MsgPlaceBid> {
  /**
   * @generated from field: uint64 auction_id = 1;
   */
  auctionId = protoInt64.zero;

  /**
   * @generated from field: string bidder = 2;
   */
  bidder = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<MsgPlaceBid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.auction.v1beta1.MsgPlaceBid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auction_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "bidder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPlaceBid {
    return new MsgPlaceBid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPlaceBid {
    return new MsgPlaceBid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPlaceBid {
    return new MsgPlaceBid().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPlaceBid | PlainMessage<MsgPlaceBid> | undefined, b: MsgPlaceBid | PlainMessage<MsgPlaceBid> | undefined): boolean {
    return proto3.util.equals(MsgPlaceBid, a, b);
  }
}

/**
 * MsgPlaceBidResponse defines the Msg/PlaceBid response type.
 *
 * @generated from message kava.auction.v1beta1.MsgPlaceBidResponse
 */
export class MsgPlaceBidResponse extends Message<MsgPlaceBidResponse> {
  constructor(data?: PartialMessage<MsgPlaceBidResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.auction.v1beta1.MsgPlaceBidResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgPlaceBidResponse {
    return new MsgPlaceBidResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgPlaceBidResponse {
    return new MsgPlaceBidResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgPlaceBidResponse {
    return new MsgPlaceBidResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgPlaceBidResponse | PlainMessage<MsgPlaceBidResponse> | undefined, b: MsgPlaceBidResponse | PlainMessage<MsgPlaceBidResponse> | undefined): boolean {
    return proto3.util.equals(MsgPlaceBidResponse, a, b);
  }
}


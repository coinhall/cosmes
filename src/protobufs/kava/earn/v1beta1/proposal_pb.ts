// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/earn/v1beta1/proposal.proto (package kava.earn.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * CommunityPoolDepositProposal deposits from the community pool into an earn vault
 *
 * @generated from message kava.earn.v1beta1.CommunityPoolDepositProposal
 */
export class CommunityPoolDepositProposal extends Message<CommunityPoolDepositProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<CommunityPoolDepositProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.earn.v1beta1.CommunityPoolDepositProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunityPoolDepositProposal {
    return new CommunityPoolDepositProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunityPoolDepositProposal {
    return new CommunityPoolDepositProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunityPoolDepositProposal {
    return new CommunityPoolDepositProposal().fromJsonString(jsonString, options);
  }

  static equals(a: CommunityPoolDepositProposal | PlainMessage<CommunityPoolDepositProposal> | undefined, b: CommunityPoolDepositProposal | PlainMessage<CommunityPoolDepositProposal> | undefined): boolean {
    return proto3.util.equals(CommunityPoolDepositProposal, a, b);
  }
}

/**
 * CommunityPoolDepositProposalJSON defines a CommunityPoolDepositProposal with a deposit
 *
 * @generated from message kava.earn.v1beta1.CommunityPoolDepositProposalJSON
 */
export class CommunityPoolDepositProposalJSON extends Message<CommunityPoolDepositProposalJSON> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin deposit = 4;
   */
  deposit: Coin[] = [];

  constructor(data?: PartialMessage<CommunityPoolDepositProposalJSON>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.earn.v1beta1.CommunityPoolDepositProposalJSON";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
    { no: 4, name: "deposit", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunityPoolDepositProposalJSON {
    return new CommunityPoolDepositProposalJSON().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunityPoolDepositProposalJSON {
    return new CommunityPoolDepositProposalJSON().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunityPoolDepositProposalJSON {
    return new CommunityPoolDepositProposalJSON().fromJsonString(jsonString, options);
  }

  static equals(a: CommunityPoolDepositProposalJSON | PlainMessage<CommunityPoolDepositProposalJSON> | undefined, b: CommunityPoolDepositProposalJSON | PlainMessage<CommunityPoolDepositProposalJSON> | undefined): boolean {
    return proto3.util.equals(CommunityPoolDepositProposalJSON, a, b);
  }
}

/**
 * CommunityPoolWithdrawProposal withdraws from an earn vault back to community pool
 *
 * @generated from message kava.earn.v1beta1.CommunityPoolWithdrawProposal
 */
export class CommunityPoolWithdrawProposal extends Message<CommunityPoolWithdrawProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  constructor(data?: PartialMessage<CommunityPoolWithdrawProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.earn.v1beta1.CommunityPoolWithdrawProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunityPoolWithdrawProposal {
    return new CommunityPoolWithdrawProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunityPoolWithdrawProposal {
    return new CommunityPoolWithdrawProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunityPoolWithdrawProposal {
    return new CommunityPoolWithdrawProposal().fromJsonString(jsonString, options);
  }

  static equals(a: CommunityPoolWithdrawProposal | PlainMessage<CommunityPoolWithdrawProposal> | undefined, b: CommunityPoolWithdrawProposal | PlainMessage<CommunityPoolWithdrawProposal> | undefined): boolean {
    return proto3.util.equals(CommunityPoolWithdrawProposal, a, b);
  }
}

/**
 * CommunityPoolWithdrawProposalJSON defines a CommunityPoolWithdrawProposal with a deposit
 *
 * @generated from message kava.earn.v1beta1.CommunityPoolWithdrawProposalJSON
 */
export class CommunityPoolWithdrawProposalJSON extends Message<CommunityPoolWithdrawProposalJSON> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 3;
   */
  amount?: Coin;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin deposit = 4;
   */
  deposit: Coin[] = [];

  constructor(data?: PartialMessage<CommunityPoolWithdrawProposalJSON>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.earn.v1beta1.CommunityPoolWithdrawProposalJSON";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin },
    { no: 4, name: "deposit", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunityPoolWithdrawProposalJSON {
    return new CommunityPoolWithdrawProposalJSON().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunityPoolWithdrawProposalJSON {
    return new CommunityPoolWithdrawProposalJSON().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunityPoolWithdrawProposalJSON {
    return new CommunityPoolWithdrawProposalJSON().fromJsonString(jsonString, options);
  }

  static equals(a: CommunityPoolWithdrawProposalJSON | PlainMessage<CommunityPoolWithdrawProposalJSON> | undefined, b: CommunityPoolWithdrawProposalJSON | PlainMessage<CommunityPoolWithdrawProposalJSON> | undefined): boolean {
    return proto3.util.equals(CommunityPoolWithdrawProposalJSON, a, b);
  }
}


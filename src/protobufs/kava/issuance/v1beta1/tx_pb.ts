// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/issuance/v1beta1/tx.proto (package kava.issuance.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * MsgIssueTokens represents a message used by the issuer to issue new tokens
 *
 * @generated from message kava.issuance.v1beta1.MsgIssueTokens
 */
export class MsgIssueTokens extends Message<MsgIssueTokens> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin tokens = 2;
   */
  tokens?: Coin;

  /**
   * @generated from field: string receiver = 3;
   */
  receiver = "";

  constructor(data?: PartialMessage<MsgIssueTokens>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.MsgIssueTokens";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tokens", kind: "message", T: Coin },
    { no: 3, name: "receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgIssueTokens {
    return new MsgIssueTokens().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgIssueTokens {
    return new MsgIssueTokens().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgIssueTokens {
    return new MsgIssueTokens().fromJsonString(jsonString, options);
  }

  static equals(a: MsgIssueTokens | PlainMessage<MsgIssueTokens> | undefined, b: MsgIssueTokens | PlainMessage<MsgIssueTokens> | undefined): boolean {
    return proto3.util.equals(MsgIssueTokens, a, b);
  }
}

/**
 * MsgIssueTokensResponse defines the Msg/IssueTokens response type.
 *
 * @generated from message kava.issuance.v1beta1.MsgIssueTokensResponse
 */
export class MsgIssueTokensResponse extends Message<MsgIssueTokensResponse> {
  constructor(data?: PartialMessage<MsgIssueTokensResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.MsgIssueTokensResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgIssueTokensResponse {
    return new MsgIssueTokensResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgIssueTokensResponse {
    return new MsgIssueTokensResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgIssueTokensResponse {
    return new MsgIssueTokensResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgIssueTokensResponse | PlainMessage<MsgIssueTokensResponse> | undefined, b: MsgIssueTokensResponse | PlainMessage<MsgIssueTokensResponse> | undefined): boolean {
    return proto3.util.equals(MsgIssueTokensResponse, a, b);
  }
}

/**
 * MsgRedeemTokens represents a message used by the issuer to redeem (burn) tokens
 *
 * @generated from message kava.issuance.v1beta1.MsgRedeemTokens
 */
export class MsgRedeemTokens extends Message<MsgRedeemTokens> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin tokens = 2;
   */
  tokens?: Coin;

  constructor(data?: PartialMessage<MsgRedeemTokens>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.MsgRedeemTokens";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tokens", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRedeemTokens {
    return new MsgRedeemTokens().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRedeemTokens {
    return new MsgRedeemTokens().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRedeemTokens {
    return new MsgRedeemTokens().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRedeemTokens | PlainMessage<MsgRedeemTokens> | undefined, b: MsgRedeemTokens | PlainMessage<MsgRedeemTokens> | undefined): boolean {
    return proto3.util.equals(MsgRedeemTokens, a, b);
  }
}

/**
 * MsgRedeemTokensResponse defines the Msg/RedeemTokens response type.
 *
 * @generated from message kava.issuance.v1beta1.MsgRedeemTokensResponse
 */
export class MsgRedeemTokensResponse extends Message<MsgRedeemTokensResponse> {
  constructor(data?: PartialMessage<MsgRedeemTokensResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.MsgRedeemTokensResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRedeemTokensResponse {
    return new MsgRedeemTokensResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRedeemTokensResponse {
    return new MsgRedeemTokensResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRedeemTokensResponse {
    return new MsgRedeemTokensResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRedeemTokensResponse | PlainMessage<MsgRedeemTokensResponse> | undefined, b: MsgRedeemTokensResponse | PlainMessage<MsgRedeemTokensResponse> | undefined): boolean {
    return proto3.util.equals(MsgRedeemTokensResponse, a, b);
  }
}

/**
 * MsgBlockAddress represents a message used by the issuer to block an address from holding or transferring tokens
 *
 * @generated from message kava.issuance.v1beta1.MsgBlockAddress
 */
export class MsgBlockAddress extends Message<MsgBlockAddress> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: string blocked_address = 3;
   */
  blockedAddress = "";

  constructor(data?: PartialMessage<MsgBlockAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.MsgBlockAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blocked_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBlockAddress {
    return new MsgBlockAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBlockAddress {
    return new MsgBlockAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBlockAddress {
    return new MsgBlockAddress().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBlockAddress | PlainMessage<MsgBlockAddress> | undefined, b: MsgBlockAddress | PlainMessage<MsgBlockAddress> | undefined): boolean {
    return proto3.util.equals(MsgBlockAddress, a, b);
  }
}

/**
 * MsgBlockAddressResponse defines the Msg/BlockAddress response type.
 *
 * @generated from message kava.issuance.v1beta1.MsgBlockAddressResponse
 */
export class MsgBlockAddressResponse extends Message<MsgBlockAddressResponse> {
  constructor(data?: PartialMessage<MsgBlockAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.MsgBlockAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgBlockAddressResponse {
    return new MsgBlockAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgBlockAddressResponse {
    return new MsgBlockAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgBlockAddressResponse {
    return new MsgBlockAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgBlockAddressResponse | PlainMessage<MsgBlockAddressResponse> | undefined, b: MsgBlockAddressResponse | PlainMessage<MsgBlockAddressResponse> | undefined): boolean {
    return proto3.util.equals(MsgBlockAddressResponse, a, b);
  }
}

/**
 * MsgUnblockAddress message type used by the issuer to unblock an address from holding or transferring tokens
 *
 * @generated from message kava.issuance.v1beta1.MsgUnblockAddress
 */
export class MsgUnblockAddress extends Message<MsgUnblockAddress> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: string blocked_address = 3;
   */
  blockedAddress = "";

  constructor(data?: PartialMessage<MsgUnblockAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.MsgUnblockAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blocked_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnblockAddress {
    return new MsgUnblockAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnblockAddress {
    return new MsgUnblockAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnblockAddress {
    return new MsgUnblockAddress().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnblockAddress | PlainMessage<MsgUnblockAddress> | undefined, b: MsgUnblockAddress | PlainMessage<MsgUnblockAddress> | undefined): boolean {
    return proto3.util.equals(MsgUnblockAddress, a, b);
  }
}

/**
 * MsgUnblockAddressResponse defines the Msg/UnblockAddress response type.
 *
 * @generated from message kava.issuance.v1beta1.MsgUnblockAddressResponse
 */
export class MsgUnblockAddressResponse extends Message<MsgUnblockAddressResponse> {
  constructor(data?: PartialMessage<MsgUnblockAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.MsgUnblockAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnblockAddressResponse {
    return new MsgUnblockAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnblockAddressResponse {
    return new MsgUnblockAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnblockAddressResponse {
    return new MsgUnblockAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUnblockAddressResponse | PlainMessage<MsgUnblockAddressResponse> | undefined, b: MsgUnblockAddressResponse | PlainMessage<MsgUnblockAddressResponse> | undefined): boolean {
    return proto3.util.equals(MsgUnblockAddressResponse, a, b);
  }
}

/**
 * MsgSetPauseStatus message type used by the issuer to pause or unpause status
 *
 * @generated from message kava.issuance.v1beta1.MsgSetPauseStatus
 */
export class MsgSetPauseStatus extends Message<MsgSetPauseStatus> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: bool status = 3;
   */
  status = false;

  constructor(data?: PartialMessage<MsgSetPauseStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.MsgSetPauseStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetPauseStatus {
    return new MsgSetPauseStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetPauseStatus {
    return new MsgSetPauseStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetPauseStatus {
    return new MsgSetPauseStatus().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetPauseStatus | PlainMessage<MsgSetPauseStatus> | undefined, b: MsgSetPauseStatus | PlainMessage<MsgSetPauseStatus> | undefined): boolean {
    return proto3.util.equals(MsgSetPauseStatus, a, b);
  }
}

/**
 * MsgSetPauseStatusResponse defines the Msg/SetPauseStatus response type.
 *
 * @generated from message kava.issuance.v1beta1.MsgSetPauseStatusResponse
 */
export class MsgSetPauseStatusResponse extends Message<MsgSetPauseStatusResponse> {
  constructor(data?: PartialMessage<MsgSetPauseStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.MsgSetPauseStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetPauseStatusResponse {
    return new MsgSetPauseStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetPauseStatusResponse {
    return new MsgSetPauseStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetPauseStatusResponse {
    return new MsgSetPauseStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetPauseStatusResponse | PlainMessage<MsgSetPauseStatusResponse> | undefined, b: MsgSetPauseStatusResponse | PlainMessage<MsgSetPauseStatusResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetPauseStatusResponse, a, b);
  }
}


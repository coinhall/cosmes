// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/issuance/v1beta1/genesis.proto (package kava.issuance.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * GenesisState defines the issuance module's genesis state.
 *
 * @generated from message kava.issuance.v1beta1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of the module.
   *
   * @generated from field: kava.issuance.v1beta1.Params params = 1;
   */
  params?: Params;

  /**
   * @generated from field: repeated kava.issuance.v1beta1.AssetSupply supplies = 2;
   */
  supplies: AssetSupply[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "supplies", kind: "message", T: AssetSupply, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Params defines the parameters for the issuance module.
 *
 * @generated from message kava.issuance.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * @generated from field: repeated kava.issuance.v1beta1.Asset assets = 1;
   */
  assets: Asset[] = [];

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assets", kind: "message", T: Asset, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * Asset type for assets in the issuance module
 *
 * @generated from message kava.issuance.v1beta1.Asset
 */
export class Asset extends Message<Asset> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  /**
   * @generated from field: repeated string blocked_addresses = 3;
   */
  blockedAddresses: string[] = [];

  /**
   * @generated from field: bool paused = 4;
   */
  paused = false;

  /**
   * @generated from field: bool blockable = 5;
   */
  blockable = false;

  /**
   * @generated from field: kava.issuance.v1beta1.RateLimit rate_limit = 6;
   */
  rateLimit?: RateLimit;

  constructor(data?: PartialMessage<Asset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.Asset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blocked_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "paused", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "blockable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "rate_limit", kind: "message", T: RateLimit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Asset {
    return new Asset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Asset {
    return new Asset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Asset {
    return new Asset().fromJsonString(jsonString, options);
  }

  static equals(a: Asset | PlainMessage<Asset> | undefined, b: Asset | PlainMessage<Asset> | undefined): boolean {
    return proto3.util.equals(Asset, a, b);
  }
}

/**
 * RateLimit parameters for rate-limiting the supply of an issued asset
 *
 * @generated from message kava.issuance.v1beta1.RateLimit
 */
export class RateLimit extends Message<RateLimit> {
  /**
   * @generated from field: bool active = 1;
   */
  active = false;

  /**
   * @generated from field: bytes limit = 2;
   */
  limit = new Uint8Array(0);

  /**
   * @generated from field: google.protobuf.Duration time_period = 3;
   */
  timePeriod?: Duration;

  constructor(data?: PartialMessage<RateLimit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.RateLimit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "limit", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "time_period", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateLimit {
    return new RateLimit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateLimit {
    return new RateLimit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateLimit {
    return new RateLimit().fromJsonString(jsonString, options);
  }

  static equals(a: RateLimit | PlainMessage<RateLimit> | undefined, b: RateLimit | PlainMessage<RateLimit> | undefined): boolean {
    return proto3.util.equals(RateLimit, a, b);
  }
}

/**
 * AssetSupply contains information about an asset's rate-limited supply (the
 * total supply of the asset is tracked in the top-level supply module)
 *
 * @generated from message kava.issuance.v1beta1.AssetSupply
 */
export class AssetSupply extends Message<AssetSupply> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin current_supply = 1;
   */
  currentSupply?: Coin;

  /**
   * @generated from field: google.protobuf.Duration time_elapsed = 2;
   */
  timeElapsed?: Duration;

  constructor(data?: PartialMessage<AssetSupply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.issuance.v1beta1.AssetSupply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_supply", kind: "message", T: Coin },
    { no: 2, name: "time_elapsed", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetSupply {
    return new AssetSupply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetSupply {
    return new AssetSupply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetSupply {
    return new AssetSupply().fromJsonString(jsonString, options);
  }

  static equals(a: AssetSupply | PlainMessage<AssetSupply> | undefined, b: AssetSupply | PlainMessage<AssetSupply> | undefined): boolean {
    return proto3.util.equals(AssetSupply, a, b);
  }
}


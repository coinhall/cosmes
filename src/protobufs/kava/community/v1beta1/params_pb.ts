// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/community/v1beta1/params.proto (package kava.community.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Params defines the parameters of the community module.
 *
 * @generated from message kava.community.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * upgrade_time_disable_inflation is the time at which to disable mint and kavadist module inflation.
   * If set to 0, inflation will be disabled from block 1.
   *
   * @generated from field: google.protobuf.Timestamp upgrade_time_disable_inflation = 1;
   */
  upgradeTimeDisableInflation?: Timestamp;

  /**
   * staking_rewards_per_second is the amount paid out to delegators each block from the community account
   *
   * @generated from field: string staking_rewards_per_second = 2;
   */
  stakingRewardsPerSecond = "";

  /**
   * upgrade_time_set_staking_rewards_per_second is the initial staking_rewards_per_second to set
   * and use when the disable inflation time is reached
   *
   * @generated from field: string upgrade_time_set_staking_rewards_per_second = 3;
   */
  upgradeTimeSetStakingRewardsPerSecond = "";

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.community.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "upgrade_time_disable_inflation", kind: "message", T: Timestamp },
    { no: 2, name: "staking_rewards_per_second", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "upgrade_time_set_staking_rewards_per_second", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}


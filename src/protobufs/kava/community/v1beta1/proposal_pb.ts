// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/community/v1beta1/proposal.proto (package kava.community.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * CommunityPoolLendDepositProposal deposits from the community pool into lend
 *
 * @generated from message kava.community.v1beta1.CommunityPoolLendDepositProposal
 */
export class CommunityPoolLendDepositProposal extends Message<CommunityPoolLendDepositProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<CommunityPoolLendDepositProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.community.v1beta1.CommunityPoolLendDepositProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunityPoolLendDepositProposal {
    return new CommunityPoolLendDepositProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunityPoolLendDepositProposal {
    return new CommunityPoolLendDepositProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunityPoolLendDepositProposal {
    return new CommunityPoolLendDepositProposal().fromJsonString(jsonString, options);
  }

  static equals(a: CommunityPoolLendDepositProposal | PlainMessage<CommunityPoolLendDepositProposal> | undefined, b: CommunityPoolLendDepositProposal | PlainMessage<CommunityPoolLendDepositProposal> | undefined): boolean {
    return proto3.util.equals(CommunityPoolLendDepositProposal, a, b);
  }
}

/**
 * CommunityPoolLendWithdrawProposal withdraws a lend position back to the community pool
 *
 * @generated from message kava.community.v1beta1.CommunityPoolLendWithdrawProposal
 */
export class CommunityPoolLendWithdrawProposal extends Message<CommunityPoolLendWithdrawProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 3;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<CommunityPoolLendWithdrawProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.community.v1beta1.CommunityPoolLendWithdrawProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunityPoolLendWithdrawProposal {
    return new CommunityPoolLendWithdrawProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunityPoolLendWithdrawProposal {
    return new CommunityPoolLendWithdrawProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunityPoolLendWithdrawProposal {
    return new CommunityPoolLendWithdrawProposal().fromJsonString(jsonString, options);
  }

  static equals(a: CommunityPoolLendWithdrawProposal | PlainMessage<CommunityPoolLendWithdrawProposal> | undefined, b: CommunityPoolLendWithdrawProposal | PlainMessage<CommunityPoolLendWithdrawProposal> | undefined): boolean {
    return proto3.util.equals(CommunityPoolLendWithdrawProposal, a, b);
  }
}

/**
 * CommunityCDPRepayDebtProposal repays a cdp debt position owned by the community module
 * This proposal exists primarily to allow committees to repay community module cdp debts.
 *
 * @generated from message kava.community.v1beta1.CommunityCDPRepayDebtProposal
 */
export class CommunityCDPRepayDebtProposal extends Message<CommunityCDPRepayDebtProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: string collateral_type = 3;
   */
  collateralType = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin payment = 4;
   */
  payment?: Coin;

  constructor(data?: PartialMessage<CommunityCDPRepayDebtProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.community.v1beta1.CommunityCDPRepayDebtProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "payment", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunityCDPRepayDebtProposal {
    return new CommunityCDPRepayDebtProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunityCDPRepayDebtProposal {
    return new CommunityCDPRepayDebtProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunityCDPRepayDebtProposal {
    return new CommunityCDPRepayDebtProposal().fromJsonString(jsonString, options);
  }

  static equals(a: CommunityCDPRepayDebtProposal | PlainMessage<CommunityCDPRepayDebtProposal> | undefined, b: CommunityCDPRepayDebtProposal | PlainMessage<CommunityCDPRepayDebtProposal> | undefined): boolean {
    return proto3.util.equals(CommunityCDPRepayDebtProposal, a, b);
  }
}

/**
 * CommunityCDPWithdrawCollateralProposal withdraws cdp collateral owned by the community module
 * This proposal exists primarily to allow committees to withdraw community module cdp collateral.
 *
 * @generated from message kava.community.v1beta1.CommunityCDPWithdrawCollateralProposal
 */
export class CommunityCDPWithdrawCollateralProposal extends Message<CommunityCDPWithdrawCollateralProposal> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: string collateral_type = 3;
   */
  collateralType = "";

  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral = 4;
   */
  collateral?: Coin;

  constructor(data?: PartialMessage<CommunityCDPWithdrawCollateralProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.community.v1beta1.CommunityCDPWithdrawCollateralProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "collateral_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "collateral", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunityCDPWithdrawCollateralProposal {
    return new CommunityCDPWithdrawCollateralProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunityCDPWithdrawCollateralProposal {
    return new CommunityCDPWithdrawCollateralProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunityCDPWithdrawCollateralProposal {
    return new CommunityCDPWithdrawCollateralProposal().fromJsonString(jsonString, options);
  }

  static equals(a: CommunityCDPWithdrawCollateralProposal | PlainMessage<CommunityCDPWithdrawCollateralProposal> | undefined, b: CommunityCDPWithdrawCollateralProposal | PlainMessage<CommunityCDPWithdrawCollateralProposal> | undefined): boolean {
    return proto3.util.equals(CommunityCDPWithdrawCollateralProposal, a, b);
  }
}


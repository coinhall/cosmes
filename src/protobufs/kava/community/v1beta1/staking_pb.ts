// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kava/community/v1beta1/staking.proto (package kava.community.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * StakingRewardsState represents the state of staking reward accumulation between blocks.
 *
 * @generated from message kava.community.v1beta1.StakingRewardsState
 */
export class StakingRewardsState extends Message<StakingRewardsState> {
  /**
   * last_accumulation_time represents the last block time which rewards where calculated and distributed.
   * This may be zero to signal accumulation should start on the next interval.
   *
   * @generated from field: google.protobuf.Timestamp last_accumulation_time = 1;
   */
  lastAccumulationTime?: Timestamp;

  /**
   * accumulated_truncation_error represents the sum of previous errors due to truncation on payout
   * This value will always be on the interval [0, 1).
   *
   * @generated from field: string last_truncation_error = 2;
   */
  lastTruncationError = "";

  constructor(data?: PartialMessage<StakingRewardsState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kava.community.v1beta1.StakingRewardsState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_accumulation_time", kind: "message", T: Timestamp },
    { no: 2, name: "last_truncation_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakingRewardsState {
    return new StakingRewardsState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakingRewardsState {
    return new StakingRewardsState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakingRewardsState {
    return new StakingRewardsState().fromJsonString(jsonString, options);
  }

  static equals(a: StakingRewardsState | PlainMessage<StakingRewardsState> | undefined, b: StakingRewardsState | PlainMessage<StakingRewardsState> | undefined): boolean {
    return proto3.util.equals(StakingRewardsState, a, b);
  }
}


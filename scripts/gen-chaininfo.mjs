// @ts-check

/**
 * This script generates the src/protobufs directory from the proto files in the
 * repos specified in `REPOS`. It uses `buf` to generate TS files from the proto
 * files, and then generates an `index.ts` file to re-export the generated code.
 */

import { chainRegistryChainToKeplr } from "@chain-registry/keplr";
import { assets, chains } from "chain-registry";
import { mkdirSync, rmSync, writeFileSync } from "fs";
import { dirname, join } from "path";
import { fileURLToPath } from "url";

const __dirname = dirname(fileURLToPath(import.meta.url));
const CHAININFOS_DIR = join(__dirname, "..", "src", "chaininfos");

console.log("Initialising directories...");
rmSync(CHAININFOS_DIR, { recursive: true, force: true });
mkdirSync(CHAININFOS_DIR);

console.log("Generating TS files from chain registry...");
// Keplr
const chainInfos = chains.reduce((infos, chain) => {
  // Filter out example chain
  if (chain.chain_id === "") {
    return infos;
  }
  try {
    const info = chainRegistryChainToKeplr(chain, assets);
    console.log(`✔️ [${chain.chain_id}]`);
    infos[chain.chain_id] = info;
  } catch (err) {
    if (err instanceof Error) {
      console.error(`❌ [${chain.chain_id}] ${err.message}`);
    } else {
      console.error(`❌ [${chain.chain_id}] Unexpected error`);
    }
  }
  return infos;
}, {});
let contents =
  "/** This file is generated by gen-chaininfo.mjs. Do not edit. */\n\n";
contents += `export default ${JSON.stringify(chainInfos, null, 2)};`;
writeFileSync(join(CHAININFOS_DIR, "keplr.ts"), contents);

console.log("ChainInfo generation completed successfully!");
